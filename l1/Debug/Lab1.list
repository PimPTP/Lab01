
Lab1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006de0  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006fb8  08006fb8  00016fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff8  08006ff8  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08006ff8  08006ff8  00016ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007000  08007000  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007000  08007000  00017000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007004  08007004  00017004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08007008  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004cc  2000000c  08007014  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004d8  08007014  000204d8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000176fa  00000000  00000000  0002007f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002a5b  00000000  00000000  00037779  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001488  00000000  00000000  0003a1d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000100e  00000000  00000000  0003b660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00027a3a  00000000  00000000  0003c66e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001759b  00000000  00000000  000640a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0010ea22  00000000  00000000  0007b643  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005930  00000000  00000000  0018a068  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000056  00000000  00000000  0018f998  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	; (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	; (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	; (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000000c 	.word	0x2000000c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006fa0 	.word	0x08006fa0

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	; (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	; (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	; (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000010 	.word	0x20000010
 8000214:	08006fa0 	.word	0x08006fa0

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b970 	b.w	8000510 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9e08      	ldr	r6, [sp, #32]
 800024e:	460d      	mov	r5, r1
 8000250:	4604      	mov	r4, r0
 8000252:	460f      	mov	r7, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4694      	mov	ip, r2
 800025c:	d965      	bls.n	800032a <__udivmoddi4+0xe2>
 800025e:	fab2 f382 	clz	r3, r2
 8000262:	b143      	cbz	r3, 8000276 <__udivmoddi4+0x2e>
 8000264:	fa02 fc03 	lsl.w	ip, r2, r3
 8000268:	f1c3 0220 	rsb	r2, r3, #32
 800026c:	409f      	lsls	r7, r3
 800026e:	fa20 f202 	lsr.w	r2, r0, r2
 8000272:	4317      	orrs	r7, r2
 8000274:	409c      	lsls	r4, r3
 8000276:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800027a:	fa1f f58c 	uxth.w	r5, ip
 800027e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000282:	0c22      	lsrs	r2, r4, #16
 8000284:	fb0e 7711 	mls	r7, lr, r1, r7
 8000288:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 800028c:	fb01 f005 	mul.w	r0, r1, r5
 8000290:	4290      	cmp	r0, r2
 8000292:	d90a      	bls.n	80002aa <__udivmoddi4+0x62>
 8000294:	eb1c 0202 	adds.w	r2, ip, r2
 8000298:	f101 37ff 	add.w	r7, r1, #4294967295
 800029c:	f080 811c 	bcs.w	80004d8 <__udivmoddi4+0x290>
 80002a0:	4290      	cmp	r0, r2
 80002a2:	f240 8119 	bls.w	80004d8 <__udivmoddi4+0x290>
 80002a6:	3902      	subs	r1, #2
 80002a8:	4462      	add	r2, ip
 80002aa:	1a12      	subs	r2, r2, r0
 80002ac:	b2a4      	uxth	r4, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80002ba:	fb00 f505 	mul.w	r5, r0, r5
 80002be:	42a5      	cmp	r5, r4
 80002c0:	d90a      	bls.n	80002d8 <__udivmoddi4+0x90>
 80002c2:	eb1c 0404 	adds.w	r4, ip, r4
 80002c6:	f100 32ff 	add.w	r2, r0, #4294967295
 80002ca:	f080 8107 	bcs.w	80004dc <__udivmoddi4+0x294>
 80002ce:	42a5      	cmp	r5, r4
 80002d0:	f240 8104 	bls.w	80004dc <__udivmoddi4+0x294>
 80002d4:	4464      	add	r4, ip
 80002d6:	3802      	subs	r0, #2
 80002d8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002dc:	1b64      	subs	r4, r4, r5
 80002de:	2100      	movs	r1, #0
 80002e0:	b11e      	cbz	r6, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40dc      	lsrs	r4, r3
 80002e4:	2300      	movs	r3, #0
 80002e6:	e9c6 4300 	strd	r4, r3, [r6]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d908      	bls.n	8000304 <__udivmoddi4+0xbc>
 80002f2:	2e00      	cmp	r6, #0
 80002f4:	f000 80ed 	beq.w	80004d2 <__udivmoddi4+0x28a>
 80002f8:	2100      	movs	r1, #0
 80002fa:	e9c6 0500 	strd	r0, r5, [r6]
 80002fe:	4608      	mov	r0, r1
 8000300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000304:	fab3 f183 	clz	r1, r3
 8000308:	2900      	cmp	r1, #0
 800030a:	d149      	bne.n	80003a0 <__udivmoddi4+0x158>
 800030c:	42ab      	cmp	r3, r5
 800030e:	d302      	bcc.n	8000316 <__udivmoddi4+0xce>
 8000310:	4282      	cmp	r2, r0
 8000312:	f200 80f8 	bhi.w	8000506 <__udivmoddi4+0x2be>
 8000316:	1a84      	subs	r4, r0, r2
 8000318:	eb65 0203 	sbc.w	r2, r5, r3
 800031c:	2001      	movs	r0, #1
 800031e:	4617      	mov	r7, r2
 8000320:	2e00      	cmp	r6, #0
 8000322:	d0e2      	beq.n	80002ea <__udivmoddi4+0xa2>
 8000324:	e9c6 4700 	strd	r4, r7, [r6]
 8000328:	e7df      	b.n	80002ea <__udivmoddi4+0xa2>
 800032a:	b902      	cbnz	r2, 800032e <__udivmoddi4+0xe6>
 800032c:	deff      	udf	#255	; 0xff
 800032e:	fab2 f382 	clz	r3, r2
 8000332:	2b00      	cmp	r3, #0
 8000334:	f040 8090 	bne.w	8000458 <__udivmoddi4+0x210>
 8000338:	1a8a      	subs	r2, r1, r2
 800033a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800033e:	fa1f fe8c 	uxth.w	lr, ip
 8000342:	2101      	movs	r1, #1
 8000344:	fbb2 f5f7 	udiv	r5, r2, r7
 8000348:	fb07 2015 	mls	r0, r7, r5, r2
 800034c:	0c22      	lsrs	r2, r4, #16
 800034e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000352:	fb0e f005 	mul.w	r0, lr, r5
 8000356:	4290      	cmp	r0, r2
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0x124>
 800035a:	eb1c 0202 	adds.w	r2, ip, r2
 800035e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000362:	d202      	bcs.n	800036a <__udivmoddi4+0x122>
 8000364:	4290      	cmp	r0, r2
 8000366:	f200 80cb 	bhi.w	8000500 <__udivmoddi4+0x2b8>
 800036a:	4645      	mov	r5, r8
 800036c:	1a12      	subs	r2, r2, r0
 800036e:	b2a4      	uxth	r4, r4
 8000370:	fbb2 f0f7 	udiv	r0, r2, r7
 8000374:	fb07 2210 	mls	r2, r7, r0, r2
 8000378:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800037c:	fb0e fe00 	mul.w	lr, lr, r0
 8000380:	45a6      	cmp	lr, r4
 8000382:	d908      	bls.n	8000396 <__udivmoddi4+0x14e>
 8000384:	eb1c 0404 	adds.w	r4, ip, r4
 8000388:	f100 32ff 	add.w	r2, r0, #4294967295
 800038c:	d202      	bcs.n	8000394 <__udivmoddi4+0x14c>
 800038e:	45a6      	cmp	lr, r4
 8000390:	f200 80bb 	bhi.w	800050a <__udivmoddi4+0x2c2>
 8000394:	4610      	mov	r0, r2
 8000396:	eba4 040e 	sub.w	r4, r4, lr
 800039a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 800039e:	e79f      	b.n	80002e0 <__udivmoddi4+0x98>
 80003a0:	f1c1 0720 	rsb	r7, r1, #32
 80003a4:	408b      	lsls	r3, r1
 80003a6:	fa22 fc07 	lsr.w	ip, r2, r7
 80003aa:	ea4c 0c03 	orr.w	ip, ip, r3
 80003ae:	fa05 f401 	lsl.w	r4, r5, r1
 80003b2:	fa20 f307 	lsr.w	r3, r0, r7
 80003b6:	40fd      	lsrs	r5, r7
 80003b8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003bc:	4323      	orrs	r3, r4
 80003be:	fbb5 f8f9 	udiv	r8, r5, r9
 80003c2:	fa1f fe8c 	uxth.w	lr, ip
 80003c6:	fb09 5518 	mls	r5, r9, r8, r5
 80003ca:	0c1c      	lsrs	r4, r3, #16
 80003cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003d0:	fb08 f50e 	mul.w	r5, r8, lr
 80003d4:	42a5      	cmp	r5, r4
 80003d6:	fa02 f201 	lsl.w	r2, r2, r1
 80003da:	fa00 f001 	lsl.w	r0, r0, r1
 80003de:	d90b      	bls.n	80003f8 <__udivmoddi4+0x1b0>
 80003e0:	eb1c 0404 	adds.w	r4, ip, r4
 80003e4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003e8:	f080 8088 	bcs.w	80004fc <__udivmoddi4+0x2b4>
 80003ec:	42a5      	cmp	r5, r4
 80003ee:	f240 8085 	bls.w	80004fc <__udivmoddi4+0x2b4>
 80003f2:	f1a8 0802 	sub.w	r8, r8, #2
 80003f6:	4464      	add	r4, ip
 80003f8:	1b64      	subs	r4, r4, r5
 80003fa:	b29d      	uxth	r5, r3
 80003fc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000400:	fb09 4413 	mls	r4, r9, r3, r4
 8000404:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000408:	fb03 fe0e 	mul.w	lr, r3, lr
 800040c:	45a6      	cmp	lr, r4
 800040e:	d908      	bls.n	8000422 <__udivmoddi4+0x1da>
 8000410:	eb1c 0404 	adds.w	r4, ip, r4
 8000414:	f103 35ff 	add.w	r5, r3, #4294967295
 8000418:	d26c      	bcs.n	80004f4 <__udivmoddi4+0x2ac>
 800041a:	45a6      	cmp	lr, r4
 800041c:	d96a      	bls.n	80004f4 <__udivmoddi4+0x2ac>
 800041e:	3b02      	subs	r3, #2
 8000420:	4464      	add	r4, ip
 8000422:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000426:	fba3 9502 	umull	r9, r5, r3, r2
 800042a:	eba4 040e 	sub.w	r4, r4, lr
 800042e:	42ac      	cmp	r4, r5
 8000430:	46c8      	mov	r8, r9
 8000432:	46ae      	mov	lr, r5
 8000434:	d356      	bcc.n	80004e4 <__udivmoddi4+0x29c>
 8000436:	d053      	beq.n	80004e0 <__udivmoddi4+0x298>
 8000438:	b156      	cbz	r6, 8000450 <__udivmoddi4+0x208>
 800043a:	ebb0 0208 	subs.w	r2, r0, r8
 800043e:	eb64 040e 	sbc.w	r4, r4, lr
 8000442:	fa04 f707 	lsl.w	r7, r4, r7
 8000446:	40ca      	lsrs	r2, r1
 8000448:	40cc      	lsrs	r4, r1
 800044a:	4317      	orrs	r7, r2
 800044c:	e9c6 7400 	strd	r7, r4, [r6]
 8000450:	4618      	mov	r0, r3
 8000452:	2100      	movs	r1, #0
 8000454:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000458:	f1c3 0120 	rsb	r1, r3, #32
 800045c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000460:	fa20 f201 	lsr.w	r2, r0, r1
 8000464:	fa25 f101 	lsr.w	r1, r5, r1
 8000468:	409d      	lsls	r5, r3
 800046a:	432a      	orrs	r2, r5
 800046c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000470:	fa1f fe8c 	uxth.w	lr, ip
 8000474:	fbb1 f0f7 	udiv	r0, r1, r7
 8000478:	fb07 1510 	mls	r5, r7, r0, r1
 800047c:	0c11      	lsrs	r1, r2, #16
 800047e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000482:	fb00 f50e 	mul.w	r5, r0, lr
 8000486:	428d      	cmp	r5, r1
 8000488:	fa04 f403 	lsl.w	r4, r4, r3
 800048c:	d908      	bls.n	80004a0 <__udivmoddi4+0x258>
 800048e:	eb1c 0101 	adds.w	r1, ip, r1
 8000492:	f100 38ff 	add.w	r8, r0, #4294967295
 8000496:	d22f      	bcs.n	80004f8 <__udivmoddi4+0x2b0>
 8000498:	428d      	cmp	r5, r1
 800049a:	d92d      	bls.n	80004f8 <__udivmoddi4+0x2b0>
 800049c:	3802      	subs	r0, #2
 800049e:	4461      	add	r1, ip
 80004a0:	1b49      	subs	r1, r1, r5
 80004a2:	b292      	uxth	r2, r2
 80004a4:	fbb1 f5f7 	udiv	r5, r1, r7
 80004a8:	fb07 1115 	mls	r1, r7, r5, r1
 80004ac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b0:	fb05 f10e 	mul.w	r1, r5, lr
 80004b4:	4291      	cmp	r1, r2
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x282>
 80004b8:	eb1c 0202 	adds.w	r2, ip, r2
 80004bc:	f105 38ff 	add.w	r8, r5, #4294967295
 80004c0:	d216      	bcs.n	80004f0 <__udivmoddi4+0x2a8>
 80004c2:	4291      	cmp	r1, r2
 80004c4:	d914      	bls.n	80004f0 <__udivmoddi4+0x2a8>
 80004c6:	3d02      	subs	r5, #2
 80004c8:	4462      	add	r2, ip
 80004ca:	1a52      	subs	r2, r2, r1
 80004cc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004d0:	e738      	b.n	8000344 <__udivmoddi4+0xfc>
 80004d2:	4631      	mov	r1, r6
 80004d4:	4630      	mov	r0, r6
 80004d6:	e708      	b.n	80002ea <__udivmoddi4+0xa2>
 80004d8:	4639      	mov	r1, r7
 80004da:	e6e6      	b.n	80002aa <__udivmoddi4+0x62>
 80004dc:	4610      	mov	r0, r2
 80004de:	e6fb      	b.n	80002d8 <__udivmoddi4+0x90>
 80004e0:	4548      	cmp	r0, r9
 80004e2:	d2a9      	bcs.n	8000438 <__udivmoddi4+0x1f0>
 80004e4:	ebb9 0802 	subs.w	r8, r9, r2
 80004e8:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004ec:	3b01      	subs	r3, #1
 80004ee:	e7a3      	b.n	8000438 <__udivmoddi4+0x1f0>
 80004f0:	4645      	mov	r5, r8
 80004f2:	e7ea      	b.n	80004ca <__udivmoddi4+0x282>
 80004f4:	462b      	mov	r3, r5
 80004f6:	e794      	b.n	8000422 <__udivmoddi4+0x1da>
 80004f8:	4640      	mov	r0, r8
 80004fa:	e7d1      	b.n	80004a0 <__udivmoddi4+0x258>
 80004fc:	46d0      	mov	r8, sl
 80004fe:	e77b      	b.n	80003f8 <__udivmoddi4+0x1b0>
 8000500:	3d02      	subs	r5, #2
 8000502:	4462      	add	r2, ip
 8000504:	e732      	b.n	800036c <__udivmoddi4+0x124>
 8000506:	4608      	mov	r0, r1
 8000508:	e70a      	b.n	8000320 <__udivmoddi4+0xd8>
 800050a:	4464      	add	r4, ip
 800050c:	3802      	subs	r0, #2
 800050e:	e742      	b.n	8000396 <__udivmoddi4+0x14e>

08000510 <__aeabi_idiv0>:
 8000510:	4770      	bx	lr
 8000512:	bf00      	nop

08000514 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000518:	f000 fe2d 	bl	8001176 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800051c:	f000 f830 	bl	8000580 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000520:	f000 faa4 	bl	8000a6c <MX_GPIO_Init>
  MX_DMA_Init();
 8000524:	f000 fa78 	bl	8000a18 <MX_DMA_Init>
  MX_LPUART1_UART_Init();
 8000528:	f000 f910 	bl	800074c <MX_LPUART1_UART_Init>
  MX_ADC1_Init();
 800052c:	f000 f874 	bl	8000618 <MX_ADC1_Init>
  MX_TIM1_Init();
 8000530:	f000 f956 	bl	80007e0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000534:	f000 f9f8 	bl	8000928 <MX_TIM3_Init>
  MX_TIM2_Init();
 8000538:	f000 f9a8 	bl	800088c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED);
 800053c:	217f      	movs	r1, #127	; 0x7f
 800053e:	480c      	ldr	r0, [pc, #48]	; (8000570 <main+0x5c>)
 8000540:	f002 fc24 	bl	8002d8c <HAL_ADCEx_Calibration_Start>
  HAL_ADC_Start_DMA(&hadc1, ADC_RawRead, 300);
 8000544:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000548:	490a      	ldr	r1, [pc, #40]	; (8000574 <main+0x60>)
 800054a:	4809      	ldr	r0, [pc, #36]	; (8000570 <main+0x5c>)
 800054c:	f001 faa6 	bl	8001a9c <HAL_ADC_Start_DMA>
  HAL_TIM_Base_Start(&htim1);
 8000550:	4809      	ldr	r0, [pc, #36]	; (8000578 <main+0x64>)
 8000552:	f004 fb7f 	bl	8004c54 <HAL_TIM_Base_Start>
  HAL_TIM_Base_Start(&htim3);
 8000556:	4809      	ldr	r0, [pc, #36]	; (800057c <main+0x68>)
 8000558:	f004 fb7c 	bl	8004c54 <HAL_TIM_Base_Start>
  HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800055c:	2100      	movs	r1, #0
 800055e:	4807      	ldr	r0, [pc, #28]	; (800057c <main+0x68>)
 8000560:	f004 fc4a 	bl	8004df8 <HAL_TIM_PWM_Start>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  ADCtoPot();
 8000564:	f000 faf0 	bl	8000b48 <ADCtoPot>
	  Servo();
 8000568:	f000 fb54 	bl	8000c14 <Servo>
	  ADCtoPot();
 800056c:	e7fa      	b.n	8000564 <main+0x50>
 800056e:	bf00      	nop
 8000570:	20000028 	.word	0x20000028
 8000574:	2000026c 	.word	0x2000026c
 8000578:	20000188 	.word	0x20000188
 800057c:	20000220 	.word	0x20000220

08000580 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b094      	sub	sp, #80	; 0x50
 8000584:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000586:	f107 0318 	add.w	r3, r7, #24
 800058a:	2238      	movs	r2, #56	; 0x38
 800058c:	2100      	movs	r1, #0
 800058e:	4618      	mov	r0, r3
 8000590:	f006 fcda 	bl	8006f48 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000594:	1d3b      	adds	r3, r7, #4
 8000596:	2200      	movs	r2, #0
 8000598:	601a      	str	r2, [r3, #0]
 800059a:	605a      	str	r2, [r3, #4]
 800059c:	609a      	str	r2, [r3, #8]
 800059e:	60da      	str	r2, [r3, #12]
 80005a0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80005a2:	2000      	movs	r0, #0
 80005a4:	f003 face 	bl	8003b44 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005a8:	2302      	movs	r3, #2
 80005aa:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ac:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005b2:	2340      	movs	r3, #64	; 0x40
 80005b4:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005b6:	2302      	movs	r3, #2
 80005b8:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005ba:	2302      	movs	r3, #2
 80005bc:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 80005be:	2304      	movs	r3, #4
 80005c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80005c2:	2355      	movs	r3, #85	; 0x55
 80005c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c6:	2302      	movs	r3, #2
 80005c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80005ca:	2302      	movs	r3, #2
 80005cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80005ce:	2302      	movs	r3, #2
 80005d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d2:	f107 0318 	add.w	r3, r7, #24
 80005d6:	4618      	mov	r0, r3
 80005d8:	f003 fb68 	bl	8003cac <HAL_RCC_OscConfig>
 80005dc:	4603      	mov	r3, r0
 80005de:	2b00      	cmp	r3, #0
 80005e0:	d001      	beq.n	80005e6 <SystemClock_Config+0x66>
  {
    Error_Handler();
 80005e2:	f000 fb93 	bl	8000d0c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e6:	230f      	movs	r3, #15
 80005e8:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005ea:	2303      	movs	r3, #3
 80005ec:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2104      	movs	r1, #4
 80005fe:	4618      	mov	r0, r3
 8000600:	f003 fe66 	bl	80042d0 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800060a:	f000 fb7f 	bl	8000d0c <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3750      	adds	r7, #80	; 0x50
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}
	...

08000618 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000618:	b580      	push	{r7, lr}
 800061a:	b08c      	sub	sp, #48	; 0x30
 800061c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 800061e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000622:	2200      	movs	r2, #0
 8000624:	601a      	str	r2, [r3, #0]
 8000626:	605a      	str	r2, [r3, #4]
 8000628:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 800062a:	1d3b      	adds	r3, r7, #4
 800062c:	2220      	movs	r2, #32
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f006 fc89 	bl	8006f48 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000636:	4b41      	ldr	r3, [pc, #260]	; (800073c <MX_ADC1_Init+0x124>)
 8000638:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800063c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800063e:	4b3f      	ldr	r3, [pc, #252]	; (800073c <MX_ADC1_Init+0x124>)
 8000640:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000644:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000646:	4b3d      	ldr	r3, [pc, #244]	; (800073c <MX_ADC1_Init+0x124>)
 8000648:	2200      	movs	r2, #0
 800064a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800064c:	4b3b      	ldr	r3, [pc, #236]	; (800073c <MX_ADC1_Init+0x124>)
 800064e:	2200      	movs	r2, #0
 8000650:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000652:	4b3a      	ldr	r3, [pc, #232]	; (800073c <MX_ADC1_Init+0x124>)
 8000654:	2200      	movs	r2, #0
 8000656:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000658:	4b38      	ldr	r3, [pc, #224]	; (800073c <MX_ADC1_Init+0x124>)
 800065a:	2201      	movs	r2, #1
 800065c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800065e:	4b37      	ldr	r3, [pc, #220]	; (800073c <MX_ADC1_Init+0x124>)
 8000660:	2204      	movs	r2, #4
 8000662:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000664:	4b35      	ldr	r3, [pc, #212]	; (800073c <MX_ADC1_Init+0x124>)
 8000666:	2200      	movs	r2, #0
 8000668:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800066a:	4b34      	ldr	r3, [pc, #208]	; (800073c <MX_ADC1_Init+0x124>)
 800066c:	2201      	movs	r2, #1
 800066e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 3;
 8000670:	4b32      	ldr	r3, [pc, #200]	; (800073c <MX_ADC1_Init+0x124>)
 8000672:	2203      	movs	r2, #3
 8000674:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000676:	4b31      	ldr	r3, [pc, #196]	; (800073c <MX_ADC1_Init+0x124>)
 8000678:	2200      	movs	r2, #0
 800067a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800067e:	4b2f      	ldr	r3, [pc, #188]	; (800073c <MX_ADC1_Init+0x124>)
 8000680:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000684:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000686:	4b2d      	ldr	r3, [pc, #180]	; (800073c <MX_ADC1_Init+0x124>)
 8000688:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800068c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800068e:	4b2b      	ldr	r3, [pc, #172]	; (800073c <MX_ADC1_Init+0x124>)
 8000690:	2201      	movs	r2, #1
 8000692:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000696:	4b29      	ldr	r3, [pc, #164]	; (800073c <MX_ADC1_Init+0x124>)
 8000698:	2200      	movs	r2, #0
 800069a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800069c:	4b27      	ldr	r3, [pc, #156]	; (800073c <MX_ADC1_Init+0x124>)
 800069e:	2200      	movs	r2, #0
 80006a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006a4:	4825      	ldr	r0, [pc, #148]	; (800073c <MX_ADC1_Init+0x124>)
 80006a6:	f001 f83d 	bl	8001724 <HAL_ADC_Init>
 80006aa:	4603      	mov	r3, r0
 80006ac:	2b00      	cmp	r3, #0
 80006ae:	d001      	beq.n	80006b4 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 80006b0:	f000 fb2c 	bl	8000d0c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 80006b4:	2300      	movs	r3, #0
 80006b6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 80006b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006bc:	4619      	mov	r1, r3
 80006be:	481f      	ldr	r0, [pc, #124]	; (800073c <MX_ADC1_Init+0x124>)
 80006c0:	f002 fbf8 	bl	8002eb4 <HAL_ADCEx_MultiModeConfigChannel>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 80006ca:	f000 fb1f 	bl	8000d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80006ce:	4b1c      	ldr	r3, [pc, #112]	; (8000740 <MX_ADC1_Init+0x128>)
 80006d0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006d2:	2306      	movs	r3, #6
 80006d4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_640CYCLES_5;
 80006d6:	2307      	movs	r3, #7
 80006d8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006da:	237f      	movs	r3, #127	; 0x7f
 80006dc:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006de:	2304      	movs	r3, #4
 80006e0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006e2:	2300      	movs	r3, #0
 80006e4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006e6:	1d3b      	adds	r3, r7, #4
 80006e8:	4619      	mov	r1, r3
 80006ea:	4814      	ldr	r0, [pc, #80]	; (800073c <MX_ADC1_Init+0x124>)
 80006ec:	f001 fd32 	bl	8002154 <HAL_ADC_ConfigChannel>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 80006f6:	f000 fb09 	bl	8000d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80006fa:	4b12      	ldr	r3, [pc, #72]	; (8000744 <MX_ADC1_Init+0x12c>)
 80006fc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80006fe:	230c      	movs	r3, #12
 8000700:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000702:	1d3b      	adds	r3, r7, #4
 8000704:	4619      	mov	r1, r3
 8000706:	480d      	ldr	r0, [pc, #52]	; (800073c <MX_ADC1_Init+0x124>)
 8000708:	f001 fd24 	bl	8002154 <HAL_ADC_ConfigChannel>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <MX_ADC1_Init+0xfe>
  {
    Error_Handler();
 8000712:	f000 fafb 	bl	8000d0c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_15;
 8000716:	4b0c      	ldr	r3, [pc, #48]	; (8000748 <MX_ADC1_Init+0x130>)
 8000718:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800071a:	2312      	movs	r3, #18
 800071c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800071e:	1d3b      	adds	r3, r7, #4
 8000720:	4619      	mov	r1, r3
 8000722:	4806      	ldr	r0, [pc, #24]	; (800073c <MX_ADC1_Init+0x124>)
 8000724:	f001 fd16 	bl	8002154 <HAL_ADC_ConfigChannel>
 8000728:	4603      	mov	r3, r0
 800072a:	2b00      	cmp	r3, #0
 800072c:	d001      	beq.n	8000732 <MX_ADC1_Init+0x11a>
  {
    Error_Handler();
 800072e:	f000 faed 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000732:	bf00      	nop
 8000734:	3730      	adds	r7, #48	; 0x30
 8000736:	46bd      	mov	sp, r7
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000028 	.word	0x20000028
 8000740:	04300002 	.word	0x04300002
 8000744:	08600004 	.word	0x08600004
 8000748:	3ef08000 	.word	0x3ef08000

0800074c <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000750:	4b21      	ldr	r3, [pc, #132]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000752:	4a22      	ldr	r2, [pc, #136]	; (80007dc <MX_LPUART1_UART_Init+0x90>)
 8000754:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000756:	4b20      	ldr	r3, [pc, #128]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000758:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800075c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800075e:	4b1e      	ldr	r3, [pc, #120]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000760:	2200      	movs	r2, #0
 8000762:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000764:	4b1c      	ldr	r3, [pc, #112]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000766:	2200      	movs	r2, #0
 8000768:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800076a:	4b1b      	ldr	r3, [pc, #108]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000770:	4b19      	ldr	r3, [pc, #100]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000772:	220c      	movs	r2, #12
 8000774:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000776:	4b18      	ldr	r3, [pc, #96]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000778:	2200      	movs	r2, #0
 800077a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800077c:	4b16      	ldr	r3, [pc, #88]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000782:	4b15      	ldr	r3, [pc, #84]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000784:	2200      	movs	r2, #0
 8000786:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000788:	4b13      	ldr	r3, [pc, #76]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 800078a:	2200      	movs	r2, #0
 800078c:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800078e:	4812      	ldr	r0, [pc, #72]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 8000790:	f005 fd6c 	bl	800626c <HAL_UART_Init>
 8000794:	4603      	mov	r3, r0
 8000796:	2b00      	cmp	r3, #0
 8000798:	d001      	beq.n	800079e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800079a:	f000 fab7 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800079e:	2100      	movs	r1, #0
 80007a0:	480d      	ldr	r0, [pc, #52]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007a2:	f006 fb07 	bl	8006db4 <HAL_UARTEx_SetTxFifoThreshold>
 80007a6:	4603      	mov	r3, r0
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d001      	beq.n	80007b0 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80007ac:	f000 faae 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007b0:	2100      	movs	r1, #0
 80007b2:	4809      	ldr	r0, [pc, #36]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007b4:	f006 fb3c 	bl	8006e30 <HAL_UARTEx_SetRxFifoThreshold>
 80007b8:	4603      	mov	r3, r0
 80007ba:	2b00      	cmp	r3, #0
 80007bc:	d001      	beq.n	80007c2 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80007be:	f000 faa5 	bl	8000d0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80007c2:	4805      	ldr	r0, [pc, #20]	; (80007d8 <MX_LPUART1_UART_Init+0x8c>)
 80007c4:	f006 fabd 	bl	8006d42 <HAL_UARTEx_DisableFifoMode>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80007ce:	f000 fa9d 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80007d2:	bf00      	nop
 80007d4:	bd80      	pop	{r7, pc}
 80007d6:	bf00      	nop
 80007d8:	200000f4 	.word	0x200000f4
 80007dc:	40008000 	.word	0x40008000

080007e0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b088      	sub	sp, #32
 80007e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007e6:	f107 0310 	add.w	r3, r7, #16
 80007ea:	2200      	movs	r2, #0
 80007ec:	601a      	str	r2, [r3, #0]
 80007ee:	605a      	str	r2, [r3, #4]
 80007f0:	609a      	str	r2, [r3, #8]
 80007f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007f4:	1d3b      	adds	r3, r7, #4
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80007fe:	4b21      	ldr	r3, [pc, #132]	; (8000884 <MX_TIM1_Init+0xa4>)
 8000800:	4a21      	ldr	r2, [pc, #132]	; (8000888 <MX_TIM1_Init+0xa8>)
 8000802:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 16999;
 8000804:	4b1f      	ldr	r3, [pc, #124]	; (8000884 <MX_TIM1_Init+0xa4>)
 8000806:	f244 2267 	movw	r2, #16999	; 0x4267
 800080a:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800080c:	4b1d      	ldr	r3, [pc, #116]	; (8000884 <MX_TIM1_Init+0xa4>)
 800080e:	2200      	movs	r2, #0
 8000810:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 19999;
 8000812:	4b1c      	ldr	r3, [pc, #112]	; (8000884 <MX_TIM1_Init+0xa4>)
 8000814:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000818:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800081a:	4b1a      	ldr	r3, [pc, #104]	; (8000884 <MX_TIM1_Init+0xa4>)
 800081c:	2200      	movs	r2, #0
 800081e:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <MX_TIM1_Init+0xa4>)
 8000822:	2200      	movs	r2, #0
 8000824:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000826:	4b17      	ldr	r3, [pc, #92]	; (8000884 <MX_TIM1_Init+0xa4>)
 8000828:	2200      	movs	r2, #0
 800082a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800082c:	4815      	ldr	r0, [pc, #84]	; (8000884 <MX_TIM1_Init+0xa4>)
 800082e:	f004 f9b9 	bl	8004ba4 <HAL_TIM_Base_Init>
 8000832:	4603      	mov	r3, r0
 8000834:	2b00      	cmp	r3, #0
 8000836:	d001      	beq.n	800083c <MX_TIM1_Init+0x5c>
  {
    Error_Handler();
 8000838:	f000 fa68 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800083c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000840:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000842:	f107 0310 	add.w	r3, r7, #16
 8000846:	4619      	mov	r1, r3
 8000848:	480e      	ldr	r0, [pc, #56]	; (8000884 <MX_TIM1_Init+0xa4>)
 800084a:	f004 fe4b 	bl	80054e4 <HAL_TIM_ConfigClockSource>
 800084e:	4603      	mov	r3, r0
 8000850:	2b00      	cmp	r3, #0
 8000852:	d001      	beq.n	8000858 <MX_TIM1_Init+0x78>
  {
    Error_Handler();
 8000854:	f000 fa5a 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000858:	2320      	movs	r3, #32
 800085a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_UPDATE;
 800085c:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8000860:	60bb      	str	r3, [r7, #8]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000862:	2300      	movs	r3, #0
 8000864:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000866:	1d3b      	adds	r3, r7, #4
 8000868:	4619      	mov	r1, r3
 800086a:	4806      	ldr	r0, [pc, #24]	; (8000884 <MX_TIM1_Init+0xa4>)
 800086c:	f005 fc22 	bl	80060b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000870:	4603      	mov	r3, r0
 8000872:	2b00      	cmp	r3, #0
 8000874:	d001      	beq.n	800087a <MX_TIM1_Init+0x9a>
  {
    Error_Handler();
 8000876:	f000 fa49 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800087a:	bf00      	nop
 800087c:	3720      	adds	r7, #32
 800087e:	46bd      	mov	sp, r7
 8000880:	bd80      	pop	{r7, pc}
 8000882:	bf00      	nop
 8000884:	20000188 	.word	0x20000188
 8000888:	40012c00 	.word	0x40012c00

0800088c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b088      	sub	sp, #32
 8000890:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000892:	f107 0310 	add.w	r3, r7, #16
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008a0:	1d3b      	adds	r3, r7, #4
 80008a2:	2200      	movs	r2, #0
 80008a4:	601a      	str	r2, [r3, #0]
 80008a6:	605a      	str	r2, [r3, #4]
 80008a8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80008aa:	4b1e      	ldr	r3, [pc, #120]	; (8000924 <MX_TIM2_Init+0x98>)
 80008ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80008b0:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 80008b2:	4b1c      	ldr	r3, [pc, #112]	; (8000924 <MX_TIM2_Init+0x98>)
 80008b4:	2263      	movs	r2, #99	; 0x63
 80008b6:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b8:	4b1a      	ldr	r3, [pc, #104]	; (8000924 <MX_TIM2_Init+0x98>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4.294967295E9;
 80008be:	4b19      	ldr	r3, [pc, #100]	; (8000924 <MX_TIM2_Init+0x98>)
 80008c0:	f04f 32ff 	mov.w	r2, #4294967295
 80008c4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008c6:	4b17      	ldr	r3, [pc, #92]	; (8000924 <MX_TIM2_Init+0x98>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008cc:	4b15      	ldr	r3, [pc, #84]	; (8000924 <MX_TIM2_Init+0x98>)
 80008ce:	2200      	movs	r2, #0
 80008d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008d2:	4814      	ldr	r0, [pc, #80]	; (8000924 <MX_TIM2_Init+0x98>)
 80008d4:	f004 f966 	bl	8004ba4 <HAL_TIM_Base_Init>
 80008d8:	4603      	mov	r3, r0
 80008da:	2b00      	cmp	r3, #0
 80008dc:	d001      	beq.n	80008e2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80008de:	f000 fa15 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008e2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80008e6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008e8:	f107 0310 	add.w	r3, r7, #16
 80008ec:	4619      	mov	r1, r3
 80008ee:	480d      	ldr	r0, [pc, #52]	; (8000924 <MX_TIM2_Init+0x98>)
 80008f0:	f004 fdf8 	bl	80054e4 <HAL_TIM_ConfigClockSource>
 80008f4:	4603      	mov	r3, r0
 80008f6:	2b00      	cmp	r3, #0
 80008f8:	d001      	beq.n	80008fe <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80008fa:	f000 fa07 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80008fe:	2320      	movs	r3, #32
 8000900:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000902:	2300      	movs	r3, #0
 8000904:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000906:	1d3b      	adds	r3, r7, #4
 8000908:	4619      	mov	r1, r3
 800090a:	4806      	ldr	r0, [pc, #24]	; (8000924 <MX_TIM2_Init+0x98>)
 800090c:	f005 fbd2 	bl	80060b4 <HAL_TIMEx_MasterConfigSynchronization>
 8000910:	4603      	mov	r3, r0
 8000912:	2b00      	cmp	r3, #0
 8000914:	d001      	beq.n	800091a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8000916:	f000 f9f9 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800091a:	bf00      	nop
 800091c:	3720      	adds	r7, #32
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}
 8000922:	bf00      	nop
 8000924:	200001d4 	.word	0x200001d4

08000928 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b08e      	sub	sp, #56	; 0x38
 800092c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800092e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000932:	2200      	movs	r2, #0
 8000934:	601a      	str	r2, [r3, #0]
 8000936:	605a      	str	r2, [r3, #4]
 8000938:	609a      	str	r2, [r3, #8]
 800093a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800093c:	f107 031c 	add.w	r3, r7, #28
 8000940:	2200      	movs	r2, #0
 8000942:	601a      	str	r2, [r3, #0]
 8000944:	605a      	str	r2, [r3, #4]
 8000946:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000948:	463b      	mov	r3, r7
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]
 8000956:	615a      	str	r2, [r3, #20]
 8000958:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800095a:	4b2d      	ldr	r3, [pc, #180]	; (8000a10 <MX_TIM3_Init+0xe8>)
 800095c:	4a2d      	ldr	r2, [pc, #180]	; (8000a14 <MX_TIM3_Init+0xec>)
 800095e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 169;
 8000960:	4b2b      	ldr	r3, [pc, #172]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000962:	22a9      	movs	r2, #169	; 0xa9
 8000964:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000966:	4b2a      	ldr	r3, [pc, #168]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000968:	2200      	movs	r2, #0
 800096a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 19999;
 800096c:	4b28      	ldr	r3, [pc, #160]	; (8000a10 <MX_TIM3_Init+0xe8>)
 800096e:	f644 621f 	movw	r2, #19999	; 0x4e1f
 8000972:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000974:	4b26      	ldr	r3, [pc, #152]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000976:	2200      	movs	r2, #0
 8000978:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800097a:	4b25      	ldr	r3, [pc, #148]	; (8000a10 <MX_TIM3_Init+0xe8>)
 800097c:	2200      	movs	r2, #0
 800097e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000980:	4823      	ldr	r0, [pc, #140]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000982:	f004 f90f 	bl	8004ba4 <HAL_TIM_Base_Init>
 8000986:	4603      	mov	r3, r0
 8000988:	2b00      	cmp	r3, #0
 800098a:	d001      	beq.n	8000990 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 800098c:	f000 f9be 	bl	8000d0c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000990:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000994:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000996:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800099a:	4619      	mov	r1, r3
 800099c:	481c      	ldr	r0, [pc, #112]	; (8000a10 <MX_TIM3_Init+0xe8>)
 800099e:	f004 fda1 	bl	80054e4 <HAL_TIM_ConfigClockSource>
 80009a2:	4603      	mov	r3, r0
 80009a4:	2b00      	cmp	r3, #0
 80009a6:	d001      	beq.n	80009ac <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80009a8:	f000 f9b0 	bl	8000d0c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80009ac:	4818      	ldr	r0, [pc, #96]	; (8000a10 <MX_TIM3_Init+0xe8>)
 80009ae:	f004 f9c1 	bl	8004d34 <HAL_TIM_PWM_Init>
 80009b2:	4603      	mov	r3, r0
 80009b4:	2b00      	cmp	r3, #0
 80009b6:	d001      	beq.n	80009bc <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80009b8:	f000 f9a8 	bl	8000d0c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80009bc:	2300      	movs	r3, #0
 80009be:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009c4:	f107 031c 	add.w	r3, r7, #28
 80009c8:	4619      	mov	r1, r3
 80009ca:	4811      	ldr	r0, [pc, #68]	; (8000a10 <MX_TIM3_Init+0xe8>)
 80009cc:	f005 fb72 	bl	80060b4 <HAL_TIMEx_MasterConfigSynchronization>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d001      	beq.n	80009da <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009d6:	f000 f999 	bl	8000d0c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009da:	2360      	movs	r3, #96	; 0x60
 80009dc:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 2000;
 80009de:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009e2:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009e4:	2300      	movs	r3, #0
 80009e6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009e8:	2300      	movs	r3, #0
 80009ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ec:	463b      	mov	r3, r7
 80009ee:	2200      	movs	r2, #0
 80009f0:	4619      	mov	r1, r3
 80009f2:	4807      	ldr	r0, [pc, #28]	; (8000a10 <MX_TIM3_Init+0xe8>)
 80009f4:	f004 fc62 	bl	80052bc <HAL_TIM_PWM_ConfigChannel>
 80009f8:	4603      	mov	r3, r0
 80009fa:	2b00      	cmp	r3, #0
 80009fc:	d001      	beq.n	8000a02 <MX_TIM3_Init+0xda>
  {
    Error_Handler();
 80009fe:	f000 f985 	bl	8000d0c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000a02:	4803      	ldr	r0, [pc, #12]	; (8000a10 <MX_TIM3_Init+0xe8>)
 8000a04:	f000 faf4 	bl	8000ff0 <HAL_TIM_MspPostInit>

}
 8000a08:	bf00      	nop
 8000a0a:	3738      	adds	r7, #56	; 0x38
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	20000220 	.word	0x20000220
 8000a14:	40000400 	.word	0x40000400

08000a18 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000a18:	b580      	push	{r7, lr}
 8000a1a:	b082      	sub	sp, #8
 8000a1c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000a1e:	4b12      	ldr	r3, [pc, #72]	; (8000a68 <MX_DMA_Init+0x50>)
 8000a20:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a22:	4a11      	ldr	r2, [pc, #68]	; (8000a68 <MX_DMA_Init+0x50>)
 8000a24:	f043 0304 	orr.w	r3, r3, #4
 8000a28:	6493      	str	r3, [r2, #72]	; 0x48
 8000a2a:	4b0f      	ldr	r3, [pc, #60]	; (8000a68 <MX_DMA_Init+0x50>)
 8000a2c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a2e:	f003 0304 	and.w	r3, r3, #4
 8000a32:	607b      	str	r3, [r7, #4]
 8000a34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_DMA_Init+0x50>)
 8000a38:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a3a:	4a0b      	ldr	r2, [pc, #44]	; (8000a68 <MX_DMA_Init+0x50>)
 8000a3c:	f043 0301 	orr.w	r3, r3, #1
 8000a40:	6493      	str	r3, [r2, #72]	; 0x48
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_DMA_Init+0x50>)
 8000a44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000a46:	f003 0301 	and.w	r3, r3, #1
 8000a4a:	603b      	str	r3, [r7, #0]
 8000a4c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	2100      	movs	r1, #0
 8000a52:	200b      	movs	r0, #11
 8000a54:	f002 fc11 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000a58:	200b      	movs	r0, #11
 8000a5a:	f002 fc28 	bl	80032ae <HAL_NVIC_EnableIRQ>

}
 8000a5e:	bf00      	nop
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	40021000 	.word	0x40021000

08000a6c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08a      	sub	sp, #40	; 0x28
 8000a70:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a72:	f107 0314 	add.w	r3, r7, #20
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
 8000a80:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a82:	4b2f      	ldr	r3, [pc, #188]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000a84:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a86:	4a2e      	ldr	r2, [pc, #184]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000a88:	f043 0304 	orr.w	r3, r3, #4
 8000a8c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a8e:	4b2c      	ldr	r3, [pc, #176]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000a90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a92:	f003 0304 	and.w	r3, r3, #4
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000a9a:	4b29      	ldr	r3, [pc, #164]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000a9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a9e:	4a28      	ldr	r2, [pc, #160]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000aa0:	f043 0320 	orr.w	r3, r3, #32
 8000aa4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aa6:	4b26      	ldr	r3, [pc, #152]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000aa8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aaa:	f003 0320 	and.w	r3, r3, #32
 8000aae:	60fb      	str	r3, [r7, #12]
 8000ab0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ab2:	4b23      	ldr	r3, [pc, #140]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000ab4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ab6:	4a22      	ldr	r2, [pc, #136]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000abe:	4b20      	ldr	r3, [pc, #128]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000ac0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60bb      	str	r3, [r7, #8]
 8000ac8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	4b1d      	ldr	r3, [pc, #116]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000acc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ace:	4a1c      	ldr	r2, [pc, #112]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000ad0:	f043 0302 	orr.w	r3, r3, #2
 8000ad4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ad6:	4b1a      	ldr	r3, [pc, #104]	; (8000b40 <MX_GPIO_Init+0xd4>)
 8000ad8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ada:	f003 0302 	and.w	r3, r3, #2
 8000ade:	607b      	str	r3, [r7, #4]
 8000ae0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	2120      	movs	r1, #32
 8000ae6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000aea:	f002 ffef 	bl	8003acc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000aee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000af2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000af4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000af8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000afe:	f107 0314 	add.w	r3, r7, #20
 8000b02:	4619      	mov	r1, r3
 8000b04:	480f      	ldr	r0, [pc, #60]	; (8000b44 <MX_GPIO_Init+0xd8>)
 8000b06:	f002 fe5f 	bl	80037c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000b0a:	2320      	movs	r3, #32
 8000b0c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b0e:	2301      	movs	r3, #1
 8000b10:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b12:	2300      	movs	r3, #0
 8000b14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b16:	2300      	movs	r3, #0
 8000b18:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000b1a:	f107 0314 	add.w	r3, r7, #20
 8000b1e:	4619      	mov	r1, r3
 8000b20:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b24:	f002 fe50 	bl	80037c8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000b28:	2200      	movs	r2, #0
 8000b2a:	2100      	movs	r1, #0
 8000b2c:	2028      	movs	r0, #40	; 0x28
 8000b2e:	f002 fba4 	bl	800327a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000b32:	2028      	movs	r0, #40	; 0x28
 8000b34:	f002 fbbb 	bl	80032ae <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b38:	bf00      	nop
 8000b3a:	3728      	adds	r7, #40	; 0x28
 8000b3c:	46bd      	mov	sp, r7
 8000b3e:	bd80      	pop	{r7, pc}
 8000b40:	40021000 	.word	0x40021000
 8000b44:	48000800 	.word	0x48000800

08000b48 <ADCtoPot>:

/* USER CODE BEGIN 4 */
void ADCtoPot()
{
 8000b48:	b490      	push	{r4, r7}
 8000b4a:	af00      	add	r7, sp, #0
	register int i;
	for (i = 0; i < 300; i++)
 8000b4c:	2400      	movs	r4, #0
 8000b4e:	e03e      	b.n	8000bce <ADCtoPot+0x86>
	{
		 if (i % 3 == 0)
 8000b50:	4b28      	ldr	r3, [pc, #160]	; (8000bf4 <ADCtoPot+0xac>)
 8000b52:	fb83 3204 	smull	r3, r2, r3, r4
 8000b56:	17e3      	asrs	r3, r4, #31
 8000b58:	1ad2      	subs	r2, r2, r3
 8000b5a:	4613      	mov	r3, r2
 8000b5c:	005b      	lsls	r3, r3, #1
 8000b5e:	4413      	add	r3, r2
 8000b60:	1ae2      	subs	r2, r4, r3
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d109      	bne.n	8000b7a <ADCtoPot+0x32>
		 {
			 pot1_sum += ADC_RawRead[i];
 8000b66:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <ADCtoPot+0xb0>)
 8000b68:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8000b6c:	4b23      	ldr	r3, [pc, #140]	; (8000bfc <ADCtoPot+0xb4>)
 8000b6e:	881b      	ldrh	r3, [r3, #0]
 8000b70:	4413      	add	r3, r2
 8000b72:	b29a      	uxth	r2, r3
 8000b74:	4b21      	ldr	r3, [pc, #132]	; (8000bfc <ADCtoPot+0xb4>)
 8000b76:	801a      	strh	r2, [r3, #0]
 8000b78:	e028      	b.n	8000bcc <ADCtoPot+0x84>
		 }
		 else if (i % 3 == 1)
 8000b7a:	4b1e      	ldr	r3, [pc, #120]	; (8000bf4 <ADCtoPot+0xac>)
 8000b7c:	fb83 3204 	smull	r3, r2, r3, r4
 8000b80:	17e3      	asrs	r3, r4, #31
 8000b82:	1ad2      	subs	r2, r2, r3
 8000b84:	4613      	mov	r3, r2
 8000b86:	005b      	lsls	r3, r3, #1
 8000b88:	4413      	add	r3, r2
 8000b8a:	1ae2      	subs	r2, r4, r3
 8000b8c:	2a01      	cmp	r2, #1
 8000b8e:	d109      	bne.n	8000ba4 <ADCtoPot+0x5c>
		 {
			 pot2_sum += ADC_RawRead[i];
 8000b90:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <ADCtoPot+0xb0>)
 8000b92:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8000b96:	4b1a      	ldr	r3, [pc, #104]	; (8000c00 <ADCtoPot+0xb8>)
 8000b98:	881b      	ldrh	r3, [r3, #0]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	4b18      	ldr	r3, [pc, #96]	; (8000c00 <ADCtoPot+0xb8>)
 8000ba0:	801a      	strh	r2, [r3, #0]
 8000ba2:	e013      	b.n	8000bcc <ADCtoPot+0x84>
		 }
		 else if (i % 3 == 2)
 8000ba4:	4b13      	ldr	r3, [pc, #76]	; (8000bf4 <ADCtoPot+0xac>)
 8000ba6:	fb83 3204 	smull	r3, r2, r3, r4
 8000baa:	17e3      	asrs	r3, r4, #31
 8000bac:	1ad2      	subs	r2, r2, r3
 8000bae:	4613      	mov	r3, r2
 8000bb0:	005b      	lsls	r3, r3, #1
 8000bb2:	4413      	add	r3, r2
 8000bb4:	1ae2      	subs	r2, r4, r3
 8000bb6:	2a02      	cmp	r2, #2
 8000bb8:	d108      	bne.n	8000bcc <ADCtoPot+0x84>
		 {
			 pot3_sum += ADC_RawRead[i];
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <ADCtoPot+0xb0>)
 8000bbc:	f833 2014 	ldrh.w	r2, [r3, r4, lsl #1]
 8000bc0:	4b10      	ldr	r3, [pc, #64]	; (8000c04 <ADCtoPot+0xbc>)
 8000bc2:	881b      	ldrh	r3, [r3, #0]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	b29a      	uxth	r2, r3
 8000bc8:	4b0e      	ldr	r3, [pc, #56]	; (8000c04 <ADCtoPot+0xbc>)
 8000bca:	801a      	strh	r2, [r3, #0]
	for (i = 0; i < 300; i++)
 8000bcc:	3401      	adds	r4, #1
 8000bce:	f5b4 7f96 	cmp.w	r4, #300	; 0x12c
 8000bd2:	dbbd      	blt.n	8000b50 <ADCtoPot+0x8>
		 }
	}

	pot1_avg = ADC_RawRead[0];  //pot1_sum/100;
 8000bd4:	4b08      	ldr	r3, [pc, #32]	; (8000bf8 <ADCtoPot+0xb0>)
 8000bd6:	881a      	ldrh	r2, [r3, #0]
 8000bd8:	4b0b      	ldr	r3, [pc, #44]	; (8000c08 <ADCtoPot+0xc0>)
 8000bda:	801a      	strh	r2, [r3, #0]
	pot2_avg = ADC_RawRead[1];  //pot2_sum/100;
 8000bdc:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <ADCtoPot+0xb0>)
 8000bde:	885a      	ldrh	r2, [r3, #2]
 8000be0:	4b0a      	ldr	r3, [pc, #40]	; (8000c0c <ADCtoPot+0xc4>)
 8000be2:	801a      	strh	r2, [r3, #0]
	pot3_avg = ADC_RawRead[2];  //pot3_sum/100;
 8000be4:	4b04      	ldr	r3, [pc, #16]	; (8000bf8 <ADCtoPot+0xb0>)
 8000be6:	889a      	ldrh	r2, [r3, #4]
 8000be8:	4b09      	ldr	r3, [pc, #36]	; (8000c10 <ADCtoPot+0xc8>)
 8000bea:	801a      	strh	r2, [r3, #0]
}
 8000bec:	bf00      	nop
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bc90      	pop	{r4, r7}
 8000bf2:	4770      	bx	lr
 8000bf4:	55555556 	.word	0x55555556
 8000bf8:	2000026c 	.word	0x2000026c
 8000bfc:	200004c4 	.word	0x200004c4
 8000c00:	200004c8 	.word	0x200004c8
 8000c04:	200004cc 	.word	0x200004cc
 8000c08:	200004c6 	.word	0x200004c6
 8000c0c:	200004ca 	.word	0x200004ca
 8000c10:	200004ce 	.word	0x200004ce

08000c14 <Servo>:

void Servo()
{
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	if(pot1_avg >= 0 && pot1_avg <= 1024)
 8000c18:	4b35      	ldr	r3, [pc, #212]	; (8000cf0 <Servo+0xdc>)
 8000c1a:	881b      	ldrh	r3, [r3, #0]
 8000c1c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c20:	d805      	bhi.n	8000c2e <Servo+0x1a>
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 500);
 8000c22:	4b34      	ldr	r3, [pc, #208]	; (8000cf4 <Servo+0xe0>)
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000c2a:	635a      	str	r2, [r3, #52]	; 0x34
	else if(pot1_avg >= 3073 && pot1_avg <= 4095)
	{
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2500);
	}

}
 8000c2c:	e05b      	b.n	8000ce6 <Servo+0xd2>
	else if(pot1_avg >= 1025 && pot1_avg <= 2048)
 8000c2e:	4b30      	ldr	r3, [pc, #192]	; (8000cf0 <Servo+0xdc>)
 8000c30:	881b      	ldrh	r3, [r3, #0]
 8000c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000c36:	d920      	bls.n	8000c7a <Servo+0x66>
 8000c38:	4b2d      	ldr	r3, [pc, #180]	; (8000cf0 <Servo+0xdc>)
 8000c3a:	881b      	ldrh	r3, [r3, #0]
 8000c3c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c40:	d81b      	bhi.n	8000c7a <Servo+0x66>
		x1 = (pot2_avg/4095)*2000+500;
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <Servo+0xe4>)
 8000c44:	881a      	ldrh	r2, [r3, #0]
 8000c46:	4b2d      	ldr	r3, [pc, #180]	; (8000cfc <Servo+0xe8>)
 8000c48:	fba3 1302 	umull	r1, r3, r3, r2
 8000c4c:	1ad2      	subs	r2, r2, r3
 8000c4e:	0852      	lsrs	r2, r2, #1
 8000c50:	4413      	add	r3, r2
 8000c52:	0adb      	lsrs	r3, r3, #11
 8000c54:	b29b      	uxth	r3, r3
 8000c56:	461a      	mov	r2, r3
 8000c58:	0152      	lsls	r2, r2, #5
 8000c5a:	1ad2      	subs	r2, r2, r3
 8000c5c:	0092      	lsls	r2, r2, #2
 8000c5e:	4413      	add	r3, r2
 8000c60:	011b      	lsls	r3, r3, #4
 8000c62:	b29b      	uxth	r3, r3
 8000c64:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b25      	ldr	r3, [pc, #148]	; (8000d00 <Servo+0xec>)
 8000c6c:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x1);
 8000c6e:	4b24      	ldr	r3, [pc, #144]	; (8000d00 <Servo+0xec>)
 8000c70:	881a      	ldrh	r2, [r3, #0]
 8000c72:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <Servo+0xe0>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	635a      	str	r2, [r3, #52]	; 0x34
 8000c78:	e035      	b.n	8000ce6 <Servo+0xd2>
	else if(pot1_avg >= 2049 && pot1_avg <= 3072)
 8000c7a:	4b1d      	ldr	r3, [pc, #116]	; (8000cf0 <Servo+0xdc>)
 8000c7c:	881b      	ldrh	r3, [r3, #0]
 8000c7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000c82:	d920      	bls.n	8000cc6 <Servo+0xb2>
 8000c84:	4b1a      	ldr	r3, [pc, #104]	; (8000cf0 <Servo+0xdc>)
 8000c86:	881b      	ldrh	r3, [r3, #0]
 8000c88:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000c8c:	d81b      	bhi.n	8000cc6 <Servo+0xb2>
		x2 = (pot3_avg/4095)*2000+500;
 8000c8e:	4b1d      	ldr	r3, [pc, #116]	; (8000d04 <Servo+0xf0>)
 8000c90:	881a      	ldrh	r2, [r3, #0]
 8000c92:	4b1a      	ldr	r3, [pc, #104]	; (8000cfc <Servo+0xe8>)
 8000c94:	fba3 1302 	umull	r1, r3, r3, r2
 8000c98:	1ad2      	subs	r2, r2, r3
 8000c9a:	0852      	lsrs	r2, r2, #1
 8000c9c:	4413      	add	r3, r2
 8000c9e:	0adb      	lsrs	r3, r3, #11
 8000ca0:	b29b      	uxth	r3, r3
 8000ca2:	461a      	mov	r2, r3
 8000ca4:	0152      	lsls	r2, r2, #5
 8000ca6:	1ad2      	subs	r2, r2, r3
 8000ca8:	0092      	lsls	r2, r2, #2
 8000caa:	4413      	add	r3, r2
 8000cac:	011b      	lsls	r3, r3, #4
 8000cae:	b29b      	uxth	r3, r3
 8000cb0:	f503 73fa 	add.w	r3, r3, #500	; 0x1f4
 8000cb4:	b29a      	uxth	r2, r3
 8000cb6:	4b14      	ldr	r3, [pc, #80]	; (8000d08 <Servo+0xf4>)
 8000cb8:	801a      	strh	r2, [r3, #0]
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, x2);
 8000cba:	4b13      	ldr	r3, [pc, #76]	; (8000d08 <Servo+0xf4>)
 8000cbc:	881a      	ldrh	r2, [r3, #0]
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <Servo+0xe0>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	635a      	str	r2, [r3, #52]	; 0x34
 8000cc4:	e00f      	b.n	8000ce6 <Servo+0xd2>
	else if(pot1_avg >= 3073 && pot1_avg <= 4095)
 8000cc6:	4b0a      	ldr	r3, [pc, #40]	; (8000cf0 <Servo+0xdc>)
 8000cc8:	881b      	ldrh	r3, [r3, #0]
 8000cca:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8000cce:	d90a      	bls.n	8000ce6 <Servo+0xd2>
 8000cd0:	4b07      	ldr	r3, [pc, #28]	; (8000cf0 <Servo+0xdc>)
 8000cd2:	881b      	ldrh	r3, [r3, #0]
 8000cd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000cd8:	d205      	bcs.n	8000ce6 <Servo+0xd2>
		__HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_1, 2500);
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <Servo+0xe0>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8000ce2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ce4:	e7ff      	b.n	8000ce6 <Servo+0xd2>
 8000ce6:	bf00      	nop
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cee:	4770      	bx	lr
 8000cf0:	200004c6 	.word	0x200004c6
 8000cf4:	20000220 	.word	0x20000220
 8000cf8:	200004ca 	.word	0x200004ca
 8000cfc:	00100101 	.word	0x00100101
 8000d00:	200004d0 	.word	0x200004d0
 8000d04:	200004ce 	.word	0x200004ce
 8000d08:	200004d2 	.word	0x200004d2

08000d0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d10:	b672      	cpsid	i
}
 8000d12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <Error_Handler+0x8>
	...

08000d18 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	b082      	sub	sp, #8
 8000d1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d1e:	4b0f      	ldr	r3, [pc, #60]	; (8000d5c <HAL_MspInit+0x44>)
 8000d20:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d22:	4a0e      	ldr	r2, [pc, #56]	; (8000d5c <HAL_MspInit+0x44>)
 8000d24:	f043 0301 	orr.w	r3, r3, #1
 8000d28:	6613      	str	r3, [r2, #96]	; 0x60
 8000d2a:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	f003 0301 	and.w	r3, r3, #1
 8000d32:	607b      	str	r3, [r7, #4]
 8000d34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d36:	4b09      	ldr	r3, [pc, #36]	; (8000d5c <HAL_MspInit+0x44>)
 8000d38:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d3a:	4a08      	ldr	r2, [pc, #32]	; (8000d5c <HAL_MspInit+0x44>)
 8000d3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d40:	6593      	str	r3, [r2, #88]	; 0x58
 8000d42:	4b06      	ldr	r3, [pc, #24]	; (8000d5c <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d4a:	603b      	str	r3, [r7, #0]
 8000d4c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000d4e:	f002 ff9d 	bl	8003c8c <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	40021000 	.word	0x40021000

08000d60 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b0a0      	sub	sp, #128	; 0x80
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d68:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]
 8000d70:	605a      	str	r2, [r3, #4]
 8000d72:	609a      	str	r2, [r3, #8]
 8000d74:	60da      	str	r2, [r3, #12]
 8000d76:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d78:	f107 0318 	add.w	r3, r7, #24
 8000d7c:	2254      	movs	r2, #84	; 0x54
 8000d7e:	2100      	movs	r1, #0
 8000d80:	4618      	mov	r0, r3
 8000d82:	f006 f8e1 	bl	8006f48 <memset>
  if(hadc->Instance==ADC1)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000d8e:	d17f      	bne.n	8000e90 <HAL_ADC_MspInit+0x130>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000d94:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d96:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8000d9a:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d9c:	f107 0318 	add.w	r3, r7, #24
 8000da0:	4618      	mov	r0, r3
 8000da2:	f003 fcb1 	bl	8004708 <HAL_RCCEx_PeriphCLKConfig>
 8000da6:	4603      	mov	r3, r0
 8000da8:	2b00      	cmp	r3, #0
 8000daa:	d001      	beq.n	8000db0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000dac:	f7ff ffae 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000db0:	4b39      	ldr	r3, [pc, #228]	; (8000e98 <HAL_ADC_MspInit+0x138>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000db4:	4a38      	ldr	r2, [pc, #224]	; (8000e98 <HAL_ADC_MspInit+0x138>)
 8000db6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000dba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dbc:	4b36      	ldr	r3, [pc, #216]	; (8000e98 <HAL_ADC_MspInit+0x138>)
 8000dbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dc0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000dc4:	617b      	str	r3, [r7, #20]
 8000dc6:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dc8:	4b33      	ldr	r3, [pc, #204]	; (8000e98 <HAL_ADC_MspInit+0x138>)
 8000dca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dcc:	4a32      	ldr	r2, [pc, #200]	; (8000e98 <HAL_ADC_MspInit+0x138>)
 8000dce:	f043 0301 	orr.w	r3, r3, #1
 8000dd2:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dd4:	4b30      	ldr	r3, [pc, #192]	; (8000e98 <HAL_ADC_MspInit+0x138>)
 8000dd6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000dd8:	f003 0301 	and.w	r3, r3, #1
 8000ddc:	613b      	str	r3, [r7, #16]
 8000dde:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000de0:	4b2d      	ldr	r3, [pc, #180]	; (8000e98 <HAL_ADC_MspInit+0x138>)
 8000de2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000de4:	4a2c      	ldr	r2, [pc, #176]	; (8000e98 <HAL_ADC_MspInit+0x138>)
 8000de6:	f043 0302 	orr.w	r3, r3, #2
 8000dea:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000dec:	4b2a      	ldr	r3, [pc, #168]	; (8000e98 <HAL_ADC_MspInit+0x138>)
 8000dee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	60fb      	str	r3, [r7, #12]
 8000df6:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000df8:	2303      	movs	r3, #3
 8000dfa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dfc:	2303      	movs	r3, #3
 8000dfe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e04:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e08:	4619      	mov	r1, r3
 8000e0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e0e:	f002 fcdb 	bl	80037c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000e12:	2301      	movs	r3, #1
 8000e14:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e16:	2303      	movs	r3, #3
 8000e18:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e1e:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000e22:	4619      	mov	r1, r3
 8000e24:	481d      	ldr	r0, [pc, #116]	; (8000e9c <HAL_ADC_MspInit+0x13c>)
 8000e26:	f002 fccf 	bl	80037c8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000e2a:	4b1d      	ldr	r3, [pc, #116]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e2c:	4a1d      	ldr	r2, [pc, #116]	; (8000ea4 <HAL_ADC_MspInit+0x144>)
 8000e2e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000e30:	4b1b      	ldr	r3, [pc, #108]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e32:	2205      	movs	r2, #5
 8000e34:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e36:	4b1a      	ldr	r3, [pc, #104]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e38:	2200      	movs	r2, #0
 8000e3a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e3c:	4b18      	ldr	r3, [pc, #96]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e42:	4b17      	ldr	r3, [pc, #92]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e44:	2280      	movs	r2, #128	; 0x80
 8000e46:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000e48:	4b15      	ldr	r3, [pc, #84]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e4a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000e4e:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000e50:	4b13      	ldr	r3, [pc, #76]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e52:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e56:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000e58:	4b11      	ldr	r3, [pc, #68]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e5a:	2220      	movs	r2, #32
 8000e5c:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000e5e:	4b10      	ldr	r3, [pc, #64]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e64:	480e      	ldr	r0, [pc, #56]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e66:	f002 fa3d 	bl	80032e4 <HAL_DMA_Init>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d001      	beq.n	8000e74 <HAL_ADC_MspInit+0x114>
    {
      Error_Handler();
 8000e70:	f7ff ff4c 	bl	8000d0c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	4a0a      	ldr	r2, [pc, #40]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e78:	655a      	str	r2, [r3, #84]	; 0x54
 8000e7a:	4a09      	ldr	r2, [pc, #36]	; (8000ea0 <HAL_ADC_MspInit+0x140>)
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	6293      	str	r3, [r2, #40]	; 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000e80:	2200      	movs	r2, #0
 8000e82:	2100      	movs	r1, #0
 8000e84:	2012      	movs	r0, #18
 8000e86:	f002 f9f8 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e8a:	2012      	movs	r0, #18
 8000e8c:	f002 fa0f 	bl	80032ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000e90:	bf00      	nop
 8000e92:	3780      	adds	r7, #128	; 0x80
 8000e94:	46bd      	mov	sp, r7
 8000e96:	bd80      	pop	{r7, pc}
 8000e98:	40021000 	.word	0x40021000
 8000e9c:	48000400 	.word	0x48000400
 8000ea0:	20000094 	.word	0x20000094
 8000ea4:	40020008 	.word	0x40020008

08000ea8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ea8:	b580      	push	{r7, lr}
 8000eaa:	b09e      	sub	sp, #120	; 0x78
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eb0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	601a      	str	r2, [r3, #0]
 8000eb8:	605a      	str	r2, [r3, #4]
 8000eba:	609a      	str	r2, [r3, #8]
 8000ebc:	60da      	str	r2, [r3, #12]
 8000ebe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ec0:	f107 0310 	add.w	r3, r7, #16
 8000ec4:	2254      	movs	r2, #84	; 0x54
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	4618      	mov	r0, r3
 8000eca:	f006 f83d 	bl	8006f48 <memset>
  if(huart->Instance==LPUART1)
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	4a1f      	ldr	r2, [pc, #124]	; (8000f50 <HAL_UART_MspInit+0xa8>)
 8000ed4:	4293      	cmp	r3, r2
 8000ed6:	d136      	bne.n	8000f46 <HAL_UART_MspInit+0x9e>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ed8:	2320      	movs	r3, #32
 8000eda:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000edc:	2300      	movs	r3, #0
 8000ede:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ee0:	f107 0310 	add.w	r3, r7, #16
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	f003 fc0f 	bl	8004708 <HAL_RCCEx_PeriphCLKConfig>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000ef0:	f7ff ff0c 	bl	8000d0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000ef4:	4b17      	ldr	r3, [pc, #92]	; (8000f54 <HAL_UART_MspInit+0xac>)
 8000ef6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef8:	4a16      	ldr	r2, [pc, #88]	; (8000f54 <HAL_UART_MspInit+0xac>)
 8000efa:	f043 0301 	orr.w	r3, r3, #1
 8000efe:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000f00:	4b14      	ldr	r3, [pc, #80]	; (8000f54 <HAL_UART_MspInit+0xac>)
 8000f02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f04:	f003 0301 	and.w	r3, r3, #1
 8000f08:	60fb      	str	r3, [r7, #12]
 8000f0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <HAL_UART_MspInit+0xac>)
 8000f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f10:	4a10      	ldr	r2, [pc, #64]	; (8000f54 <HAL_UART_MspInit+0xac>)
 8000f12:	f043 0301 	orr.w	r3, r3, #1
 8000f16:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f18:	4b0e      	ldr	r3, [pc, #56]	; (8000f54 <HAL_UART_MspInit+0xac>)
 8000f1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f1c:	f003 0301 	and.w	r3, r3, #1
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8000f24:	230c      	movs	r3, #12
 8000f26:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f28:	2302      	movs	r3, #2
 8000f2a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f2c:	2300      	movs	r3, #0
 8000f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f30:	2300      	movs	r3, #0
 8000f32:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8000f34:	230c      	movs	r3, #12
 8000f36:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f38:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f3c:	4619      	mov	r1, r3
 8000f3e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f42:	f002 fc41 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000f46:	bf00      	nop
 8000f48:	3778      	adds	r7, #120	; 0x78
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	40008000 	.word	0x40008000
 8000f54:	40021000 	.word	0x40021000

08000f58 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000f58:	b580      	push	{r7, lr}
 8000f5a:	b086      	sub	sp, #24
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	681b      	ldr	r3, [r3, #0]
 8000f64:	4a1f      	ldr	r2, [pc, #124]	; (8000fe4 <HAL_TIM_Base_MspInit+0x8c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d10c      	bne.n	8000f84 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000f6a:	4b1f      	ldr	r3, [pc, #124]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f6e:	4a1e      	ldr	r2, [pc, #120]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f70:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8000f74:	6613      	str	r3, [r2, #96]	; 0x60
 8000f76:	4b1c      	ldr	r3, [pc, #112]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000f7e:	617b      	str	r3, [r7, #20]
 8000f80:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000f82:	e02a      	b.n	8000fda <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM2)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000f8c:	d114      	bne.n	8000fb8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000f8e:	4b16      	ldr	r3, [pc, #88]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f92:	4a15      	ldr	r2, [pc, #84]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f94:	f043 0301 	orr.w	r3, r3, #1
 8000f98:	6593      	str	r3, [r2, #88]	; 0x58
 8000f9a:	4b13      	ldr	r3, [pc, #76]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9e:	f003 0301 	and.w	r3, r3, #1
 8000fa2:	613b      	str	r3, [r7, #16]
 8000fa4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	2100      	movs	r1, #0
 8000faa:	201c      	movs	r0, #28
 8000fac:	f002 f965 	bl	800327a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000fb0:	201c      	movs	r0, #28
 8000fb2:	f002 f97c 	bl	80032ae <HAL_NVIC_EnableIRQ>
}
 8000fb6:	e010      	b.n	8000fda <HAL_TIM_Base_MspInit+0x82>
  else if(htim_base->Instance==TIM3)
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	4a0b      	ldr	r2, [pc, #44]	; (8000fec <HAL_TIM_Base_MspInit+0x94>)
 8000fbe:	4293      	cmp	r3, r2
 8000fc0:	d10b      	bne.n	8000fda <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000fc2:	4b09      	ldr	r3, [pc, #36]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc6:	4a08      	ldr	r2, [pc, #32]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000fc8:	f043 0302 	orr.w	r3, r3, #2
 8000fcc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fce:	4b06      	ldr	r3, [pc, #24]	; (8000fe8 <HAL_TIM_Base_MspInit+0x90>)
 8000fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fd2:	f003 0302 	and.w	r3, r3, #2
 8000fd6:	60fb      	str	r3, [r7, #12]
 8000fd8:	68fb      	ldr	r3, [r7, #12]
}
 8000fda:	bf00      	nop
 8000fdc:	3718      	adds	r7, #24
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	bd80      	pop	{r7, pc}
 8000fe2:	bf00      	nop
 8000fe4:	40012c00 	.word	0x40012c00
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40000400 	.word	0x40000400

08000ff0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b088      	sub	sp, #32
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ff8:	f107 030c 	add.w	r3, r7, #12
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]
 8001006:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a11      	ldr	r2, [pc, #68]	; (8001054 <HAL_TIM_MspPostInit+0x64>)
 800100e:	4293      	cmp	r3, r2
 8001010:	d11b      	bne.n	800104a <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001012:	4b11      	ldr	r3, [pc, #68]	; (8001058 <HAL_TIM_MspPostInit+0x68>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001016:	4a10      	ldr	r2, [pc, #64]	; (8001058 <HAL_TIM_MspPostInit+0x68>)
 8001018:	f043 0302 	orr.w	r3, r3, #2
 800101c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <HAL_TIM_MspPostInit+0x68>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001022:	f003 0302 	and.w	r3, r3, #2
 8001026:	60bb      	str	r3, [r7, #8]
 8001028:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PB4     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800102a:	2310      	movs	r3, #16
 800102c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800102e:	2302      	movs	r3, #2
 8001030:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001032:	2300      	movs	r3, #0
 8001034:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001036:	2300      	movs	r3, #0
 8001038:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800103a:	2302      	movs	r3, #2
 800103c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800103e:	f107 030c 	add.w	r3, r7, #12
 8001042:	4619      	mov	r1, r3
 8001044:	4805      	ldr	r0, [pc, #20]	; (800105c <HAL_TIM_MspPostInit+0x6c>)
 8001046:	f002 fbbf 	bl	80037c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800104a:	bf00      	nop
 800104c:	3720      	adds	r7, #32
 800104e:	46bd      	mov	sp, r7
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	40000400 	.word	0x40000400
 8001058:	40021000 	.word	0x40021000
 800105c:	48000400 	.word	0x48000400

08001060 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001064:	e7fe      	b.n	8001064 <NMI_Handler+0x4>

08001066 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001066:	b480      	push	{r7}
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800106a:	e7fe      	b.n	800106a <HardFault_Handler+0x4>

0800106c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001070:	e7fe      	b.n	8001070 <MemManage_Handler+0x4>

08001072 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001072:	b480      	push	{r7}
 8001074:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001076:	e7fe      	b.n	8001076 <BusFault_Handler+0x4>

08001078 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001078:	b480      	push	{r7}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800107c:	e7fe      	b.n	800107c <UsageFault_Handler+0x4>

0800107e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800107e:	b480      	push	{r7}
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	46bd      	mov	sp, r7
 8001086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108a:	4770      	bx	lr

0800108c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ac:	f000 f8b6 	bl	800121c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010b0:	bf00      	nop
 80010b2:	bd80      	pop	{r7, pc}

080010b4 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80010b4:	b580      	push	{r7, lr}
 80010b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80010b8:	4802      	ldr	r0, [pc, #8]	; (80010c4 <DMA1_Channel1_IRQHandler+0x10>)
 80010ba:	f002 fa36 	bl	800352a <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
 80010c2:	bf00      	nop
 80010c4:	20000094 	.word	0x20000094

080010c8 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80010cc:	4802      	ldr	r0, [pc, #8]	; (80010d8 <ADC1_2_IRQHandler+0x10>)
 80010ce:	f000 fdb9 	bl	8001c44 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	20000028 	.word	0x20000028

080010dc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010e0:	4802      	ldr	r0, [pc, #8]	; (80010ec <TIM2_IRQHandler+0x10>)
 80010e2:	f003 ff9b 	bl	800501c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010e6:	bf00      	nop
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	200001d4 	.word	0x200001d4

080010f0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010f4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80010f8:	f002 fd00 	bl	8003afc <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010fc:	bf00      	nop
 80010fe:	bd80      	pop	{r7, pc}

08001100 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001100:	b480      	push	{r7}
 8001102:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001104:	4b06      	ldr	r3, [pc, #24]	; (8001120 <SystemInit+0x20>)
 8001106:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800110a:	4a05      	ldr	r2, [pc, #20]	; (8001120 <SystemInit+0x20>)
 800110c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001110:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001124:	480d      	ldr	r0, [pc, #52]	; (800115c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001126:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001128:	f7ff ffea 	bl	8001100 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800112c:	480c      	ldr	r0, [pc, #48]	; (8001160 <LoopForever+0x6>)
  ldr r1, =_edata
 800112e:	490d      	ldr	r1, [pc, #52]	; (8001164 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001130:	4a0d      	ldr	r2, [pc, #52]	; (8001168 <LoopForever+0xe>)
  movs r3, #0
 8001132:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001134:	e002      	b.n	800113c <LoopCopyDataInit>

08001136 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001136:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001138:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800113a:	3304      	adds	r3, #4

0800113c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800113c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800113e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001140:	d3f9      	bcc.n	8001136 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001142:	4a0a      	ldr	r2, [pc, #40]	; (800116c <LoopForever+0x12>)
  ldr r4, =_ebss
 8001144:	4c0a      	ldr	r4, [pc, #40]	; (8001170 <LoopForever+0x16>)
  movs r3, #0
 8001146:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001148:	e001      	b.n	800114e <LoopFillZerobss>

0800114a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800114a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800114c:	3204      	adds	r2, #4

0800114e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800114e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001150:	d3fb      	bcc.n	800114a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001152:	f005 ff01 	bl	8006f58 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001156:	f7ff f9dd 	bl	8000514 <main>

0800115a <LoopForever>:

LoopForever:
    b LoopForever
 800115a:	e7fe      	b.n	800115a <LoopForever>
  ldr   r0, =_estack
 800115c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001160:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001164:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001168:	08007008 	.word	0x08007008
  ldr r2, =_sbss
 800116c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001170:	200004d8 	.word	0x200004d8

08001174 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001174:	e7fe      	b.n	8001174 <ADC3_IRQHandler>

08001176 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b082      	sub	sp, #8
 800117a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001180:	2003      	movs	r0, #3
 8001182:	f002 f86f 	bl	8003264 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001186:	2000      	movs	r0, #0
 8001188:	f000 f80e 	bl	80011a8 <HAL_InitTick>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d002      	beq.n	8001198 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001192:	2301      	movs	r3, #1
 8001194:	71fb      	strb	r3, [r7, #7]
 8001196:	e001      	b.n	800119c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001198:	f7ff fdbe 	bl	8000d18 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800119c:	79fb      	ldrb	r3, [r7, #7]

}
 800119e:	4618      	mov	r0, r3
 80011a0:	3708      	adds	r7, #8
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
	...

080011a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b084      	sub	sp, #16
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80011b0:	2300      	movs	r3, #0
 80011b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80011b4:	4b16      	ldr	r3, [pc, #88]	; (8001210 <HAL_InitTick+0x68>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d022      	beq.n	8001202 <HAL_InitTick+0x5a>
  {
    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80011bc:	4b15      	ldr	r3, [pc, #84]	; (8001214 <HAL_InitTick+0x6c>)
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	4b13      	ldr	r3, [pc, #76]	; (8001210 <HAL_InitTick+0x68>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80011c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80011cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80011d0:	4618      	mov	r0, r3
 80011d2:	f002 f87a 	bl	80032ca <HAL_SYSTICK_Config>
 80011d6:	4603      	mov	r3, r0
 80011d8:	2b00      	cmp	r3, #0
 80011da:	d10f      	bne.n	80011fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	2b0f      	cmp	r3, #15
 80011e0:	d809      	bhi.n	80011f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80011e2:	2200      	movs	r2, #0
 80011e4:	6879      	ldr	r1, [r7, #4]
 80011e6:	f04f 30ff 	mov.w	r0, #4294967295
 80011ea:	f002 f846 	bl	800327a <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011ee:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_InitTick+0x70>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6013      	str	r3, [r2, #0]
 80011f4:	e007      	b.n	8001206 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80011f6:	2301      	movs	r3, #1
 80011f8:	73fb      	strb	r3, [r7, #15]
 80011fa:	e004      	b.n	8001206 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	73fb      	strb	r3, [r7, #15]
 8001200:	e001      	b.n	8001206 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001202:	2301      	movs	r3, #1
 8001204:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001206:	7bfb      	ldrb	r3, [r7, #15]
}
 8001208:	4618      	mov	r0, r3
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000008 	.word	0x20000008
 8001214:	20000000 	.word	0x20000000
 8001218:	20000004 	.word	0x20000004

0800121c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001220:	4b05      	ldr	r3, [pc, #20]	; (8001238 <HAL_IncTick+0x1c>)
 8001222:	681a      	ldr	r2, [r3, #0]
 8001224:	4b05      	ldr	r3, [pc, #20]	; (800123c <HAL_IncTick+0x20>)
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	4413      	add	r3, r2
 800122a:	4a03      	ldr	r2, [pc, #12]	; (8001238 <HAL_IncTick+0x1c>)
 800122c:	6013      	str	r3, [r2, #0]
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr
 8001238:	200004d4 	.word	0x200004d4
 800123c:	20000008 	.word	0x20000008

08001240 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001240:	b480      	push	{r7}
 8001242:	af00      	add	r7, sp, #0
  return uwTick;
 8001244:	4b03      	ldr	r3, [pc, #12]	; (8001254 <HAL_GetTick+0x14>)
 8001246:	681b      	ldr	r3, [r3, #0]
}
 8001248:	4618      	mov	r0, r3
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	200004d4 	.word	0x200004d4

08001258 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001258:	b480      	push	{r7}
 800125a:	b083      	sub	sp, #12
 800125c:	af00      	add	r7, sp, #0
 800125e:	6078      	str	r0, [r7, #4]
 8001260:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001262:	687b      	ldr	r3, [r7, #4]
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	431a      	orrs	r2, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	609a      	str	r2, [r3, #8]
}
 8001272:	bf00      	nop
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr

0800127e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800127e:	b480      	push	{r7}
 8001280:	b083      	sub	sp, #12
 8001282:	af00      	add	r7, sp, #0
 8001284:	6078      	str	r0, [r7, #4]
 8001286:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	431a      	orrs	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	609a      	str	r2, [r3, #8]
}
 8001298:	bf00      	nop
 800129a:	370c      	adds	r7, #12
 800129c:	46bd      	mov	sp, r7
 800129e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a2:	4770      	bx	lr

080012a4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012a4:	b480      	push	{r7}
 80012a6:	b083      	sub	sp, #12
 80012a8:	af00      	add	r7, sp, #0
 80012aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	689b      	ldr	r3, [r3, #8]
 80012b0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	370c      	adds	r7, #12
 80012b8:	46bd      	mov	sp, r7
 80012ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012be:	4770      	bx	lr

080012c0 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80012c0:	b480      	push	{r7}
 80012c2:	b087      	sub	sp, #28
 80012c4:	af00      	add	r7, sp, #0
 80012c6:	60f8      	str	r0, [r7, #12]
 80012c8:	60b9      	str	r1, [r7, #8]
 80012ca:	607a      	str	r2, [r7, #4]
 80012cc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	3360      	adds	r3, #96	; 0x60
 80012d2:	461a      	mov	r2, r3
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80012dc:	697b      	ldr	r3, [r7, #20]
 80012de:	681a      	ldr	r2, [r3, #0]
 80012e0:	4b08      	ldr	r3, [pc, #32]	; (8001304 <LL_ADC_SetOffset+0x44>)
 80012e2:	4013      	ands	r3, r2
 80012e4:	687a      	ldr	r2, [r7, #4]
 80012e6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80012ea:	683a      	ldr	r2, [r7, #0]
 80012ec:	430a      	orrs	r2, r1
 80012ee:	4313      	orrs	r3, r2
 80012f0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80012f4:	697b      	ldr	r3, [r7, #20]
 80012f6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80012f8:	bf00      	nop
 80012fa:	371c      	adds	r7, #28
 80012fc:	46bd      	mov	sp, r7
 80012fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001302:	4770      	bx	lr
 8001304:	03fff000 	.word	0x03fff000

08001308 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
 8001310:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	3360      	adds	r3, #96	; 0x60
 8001316:	461a      	mov	r2, r3
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001328:	4618      	mov	r0, r3
 800132a:	3714      	adds	r7, #20
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001334:	b480      	push	{r7}
 8001336:	b087      	sub	sp, #28
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	3360      	adds	r3, #96	; 0x60
 8001344:	461a      	mov	r2, r3
 8001346:	68bb      	ldr	r3, [r7, #8]
 8001348:	009b      	lsls	r3, r3, #2
 800134a:	4413      	add	r3, r2
 800134c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	431a      	orrs	r2, r3
 800135a:	697b      	ldr	r3, [r7, #20]
 800135c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800135e:	bf00      	nop
 8001360:	371c      	adds	r7, #28
 8001362:	46bd      	mov	sp, r7
 8001364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001368:	4770      	bx	lr

0800136a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800136a:	b480      	push	{r7}
 800136c:	b087      	sub	sp, #28
 800136e:	af00      	add	r7, sp, #0
 8001370:	60f8      	str	r0, [r7, #12]
 8001372:	60b9      	str	r1, [r7, #8]
 8001374:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001376:	68fb      	ldr	r3, [r7, #12]
 8001378:	3360      	adds	r3, #96	; 0x60
 800137a:	461a      	mov	r2, r3
 800137c:	68bb      	ldr	r3, [r7, #8]
 800137e:	009b      	lsls	r3, r3, #2
 8001380:	4413      	add	r3, r2
 8001382:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001384:	697b      	ldr	r3, [r7, #20]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	431a      	orrs	r2, r3
 8001390:	697b      	ldr	r3, [r7, #20]
 8001392:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001394:	bf00      	nop
 8001396:	371c      	adds	r7, #28
 8001398:	46bd      	mov	sp, r7
 800139a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139e:	4770      	bx	lr

080013a0 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 80013a0:	b480      	push	{r7}
 80013a2:	b087      	sub	sp, #28
 80013a4:	af00      	add	r7, sp, #0
 80013a6:	60f8      	str	r0, [r7, #12]
 80013a8:	60b9      	str	r1, [r7, #8]
 80013aa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80013ac:	68fb      	ldr	r3, [r7, #12]
 80013ae:	3360      	adds	r3, #96	; 0x60
 80013b0:	461a      	mov	r2, r3
 80013b2:	68bb      	ldr	r3, [r7, #8]
 80013b4:	009b      	lsls	r3, r3, #2
 80013b6:	4413      	add	r3, r2
 80013b8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80013ba:	697b      	ldr	r3, [r7, #20]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	431a      	orrs	r2, r3
 80013c6:	697b      	ldr	r3, [r7, #20]
 80013c8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80013ca:	bf00      	nop
 80013cc:	371c      	adds	r7, #28
 80013ce:	46bd      	mov	sp, r7
 80013d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d4:	4770      	bx	lr

080013d6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80013d6:	b480      	push	{r7}
 80013d8:	b083      	sub	sp, #12
 80013da:	af00      	add	r7, sp, #0
 80013dc:	6078      	str	r0, [r7, #4]
 80013de:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	695b      	ldr	r3, [r3, #20]
 80013e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	431a      	orrs	r2, r3
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	615a      	str	r2, [r3, #20]
}
 80013f0:	bf00      	nop
 80013f2:	370c      	adds	r7, #12
 80013f4:	46bd      	mov	sp, r7
 80013f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fa:	4770      	bx	lr

080013fc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80013fc:	b480      	push	{r7}
 80013fe:	b083      	sub	sp, #12
 8001400:	af00      	add	r7, sp, #0
 8001402:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	68db      	ldr	r3, [r3, #12]
 8001408:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800140c:	2b00      	cmp	r3, #0
 800140e:	d101      	bne.n	8001414 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001414:	2300      	movs	r3, #0
}
 8001416:	4618      	mov	r0, r3
 8001418:	370c      	adds	r7, #12
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001422:	b480      	push	{r7}
 8001424:	b087      	sub	sp, #28
 8001426:	af00      	add	r7, sp, #0
 8001428:	60f8      	str	r0, [r7, #12]
 800142a:	60b9      	str	r1, [r7, #8]
 800142c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	3330      	adds	r3, #48	; 0x30
 8001432:	461a      	mov	r2, r3
 8001434:	68bb      	ldr	r3, [r7, #8]
 8001436:	0a1b      	lsrs	r3, r3, #8
 8001438:	009b      	lsls	r3, r3, #2
 800143a:	f003 030c 	and.w	r3, r3, #12
 800143e:	4413      	add	r3, r2
 8001440:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001442:	697b      	ldr	r3, [r7, #20]
 8001444:	681a      	ldr	r2, [r3, #0]
 8001446:	68bb      	ldr	r3, [r7, #8]
 8001448:	f003 031f 	and.w	r3, r3, #31
 800144c:	211f      	movs	r1, #31
 800144e:	fa01 f303 	lsl.w	r3, r1, r3
 8001452:	43db      	mvns	r3, r3
 8001454:	401a      	ands	r2, r3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	0e9b      	lsrs	r3, r3, #26
 800145a:	f003 011f 	and.w	r1, r3, #31
 800145e:	68bb      	ldr	r3, [r7, #8]
 8001460:	f003 031f 	and.w	r3, r3, #31
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	431a      	orrs	r2, r3
 800146a:	697b      	ldr	r3, [r7, #20]
 800146c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800146e:	bf00      	nop
 8001470:	371c      	adds	r7, #28
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr

0800147a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800147a:	b480      	push	{r7}
 800147c:	b083      	sub	sp, #12
 800147e:	af00      	add	r7, sp, #0
 8001480:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001486:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 800148a:	2b00      	cmp	r3, #0
 800148c:	d101      	bne.n	8001492 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800148e:	2301      	movs	r3, #1
 8001490:	e000      	b.n	8001494 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001492:	2300      	movs	r3, #0
}
 8001494:	4618      	mov	r0, r3
 8001496:	370c      	adds	r7, #12
 8001498:	46bd      	mov	sp, r7
 800149a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800149e:	4770      	bx	lr

080014a0 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 80014a0:	b480      	push	{r7}
 80014a2:	b087      	sub	sp, #28
 80014a4:	af00      	add	r7, sp, #0
 80014a6:	60f8      	str	r0, [r7, #12]
 80014a8:	60b9      	str	r1, [r7, #8]
 80014aa:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	3314      	adds	r3, #20
 80014b0:	461a      	mov	r2, r3
 80014b2:	68bb      	ldr	r3, [r7, #8]
 80014b4:	0e5b      	lsrs	r3, r3, #25
 80014b6:	009b      	lsls	r3, r3, #2
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	4413      	add	r3, r2
 80014be:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 80014c0:	697b      	ldr	r3, [r7, #20]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	68bb      	ldr	r3, [r7, #8]
 80014c6:	0d1b      	lsrs	r3, r3, #20
 80014c8:	f003 031f 	and.w	r3, r3, #31
 80014cc:	2107      	movs	r1, #7
 80014ce:	fa01 f303 	lsl.w	r3, r1, r3
 80014d2:	43db      	mvns	r3, r3
 80014d4:	401a      	ands	r2, r3
 80014d6:	68bb      	ldr	r3, [r7, #8]
 80014d8:	0d1b      	lsrs	r3, r3, #20
 80014da:	f003 031f 	and.w	r3, r3, #31
 80014de:	6879      	ldr	r1, [r7, #4]
 80014e0:	fa01 f303 	lsl.w	r3, r1, r3
 80014e4:	431a      	orrs	r2, r3
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80014ea:	bf00      	nop
 80014ec:	371c      	adds	r7, #28
 80014ee:	46bd      	mov	sp, r7
 80014f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f4:	4770      	bx	lr
	...

080014f8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001504:	68fb      	ldr	r3, [r7, #12]
 8001506:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 800150a:	68bb      	ldr	r3, [r7, #8]
 800150c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001510:	43db      	mvns	r3, r3
 8001512:	401a      	ands	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	f003 0318 	and.w	r3, r3, #24
 800151a:	4908      	ldr	r1, [pc, #32]	; (800153c <LL_ADC_SetChannelSingleDiff+0x44>)
 800151c:	40d9      	lsrs	r1, r3
 800151e:	68bb      	ldr	r3, [r7, #8]
 8001520:	400b      	ands	r3, r1
 8001522:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001526:	431a      	orrs	r2, r3
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 800152e:	bf00      	nop
 8001530:	3714      	adds	r7, #20
 8001532:	46bd      	mov	sp, r7
 8001534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001538:	4770      	bx	lr
 800153a:	bf00      	nop
 800153c:	0007ffff 	.word	0x0007ffff

08001540 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001540:	b480      	push	{r7}
 8001542:	b083      	sub	sp, #12
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	689b      	ldr	r3, [r3, #8]
 800154c:	f003 031f 	and.w	r3, r3, #31
}
 8001550:	4618      	mov	r0, r3
 8001552:	370c      	adds	r7, #12
 8001554:	46bd      	mov	sp, r7
 8001556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155a:	4770      	bx	lr

0800155c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800155c:	b480      	push	{r7}
 800155e:	b083      	sub	sp, #12
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	689b      	ldr	r3, [r3, #8]
 8001568:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
}
 800156c:	4618      	mov	r0, r3
 800156e:	370c      	adds	r7, #12
 8001570:	46bd      	mov	sp, r7
 8001572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001576:	4770      	bx	lr

08001578 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001578:	b480      	push	{r7}
 800157a:	b083      	sub	sp, #12
 800157c:	af00      	add	r7, sp, #0
 800157e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	689b      	ldr	r3, [r3, #8]
 8001584:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001588:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800158c:	687a      	ldr	r2, [r7, #4]
 800158e:	6093      	str	r3, [r2, #8]
}
 8001590:	bf00      	nop
 8001592:	370c      	adds	r7, #12
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr

0800159c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 800159c:	b480      	push	{r7}
 800159e:	b083      	sub	sp, #12
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	689b      	ldr	r3, [r3, #8]
 80015a8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80015ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80015b0:	d101      	bne.n	80015b6 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 80015b2:	2301      	movs	r3, #1
 80015b4:	e000      	b.n	80015b8 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 80015b6:	2300      	movs	r3, #0
}
 80015b8:	4618      	mov	r0, r3
 80015ba:	370c      	adds	r7, #12
 80015bc:	46bd      	mov	sp, r7
 80015be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c2:	4770      	bx	lr

080015c4 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80015c4:	b480      	push	{r7}
 80015c6:	b083      	sub	sp, #12
 80015c8:	af00      	add	r7, sp, #0
 80015ca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	689b      	ldr	r3, [r3, #8]
 80015d0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 80015d4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80015d8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	689b      	ldr	r3, [r3, #8]
 80015f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001600:	d101      	bne.n	8001606 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001602:	2301      	movs	r3, #1
 8001604:	e000      	b.n	8001608 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001606:	2300      	movs	r3, #0
}
 8001608:	4618      	mov	r0, r3
 800160a:	370c      	adds	r7, #12
 800160c:	46bd      	mov	sp, r7
 800160e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001612:	4770      	bx	lr

08001614 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	689b      	ldr	r3, [r3, #8]
 8001620:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8001624:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001628:	f043 0201 	orr.w	r2, r3, #1
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001644:	687b      	ldr	r3, [r7, #4]
 8001646:	689b      	ldr	r3, [r3, #8]
 8001648:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800164c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001650:	f043 0202 	orr.w	r2, r3, #2
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8001658:	bf00      	nop
 800165a:	370c      	adds	r7, #12
 800165c:	46bd      	mov	sp, r7
 800165e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001662:	4770      	bx	lr

08001664 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001664:	b480      	push	{r7}
 8001666:	b083      	sub	sp, #12
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	f003 0301 	and.w	r3, r3, #1
 8001674:	2b01      	cmp	r3, #1
 8001676:	d101      	bne.n	800167c <LL_ADC_IsEnabled+0x18>
 8001678:	2301      	movs	r3, #1
 800167a:	e000      	b.n	800167e <LL_ADC_IsEnabled+0x1a>
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr

0800168a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800168a:	b480      	push	{r7}
 800168c:	b083      	sub	sp, #12
 800168e:	af00      	add	r7, sp, #0
 8001690:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	689b      	ldr	r3, [r3, #8]
 8001696:	f003 0302 	and.w	r3, r3, #2
 800169a:	2b02      	cmp	r3, #2
 800169c:	d101      	bne.n	80016a2 <LL_ADC_IsDisableOngoing+0x18>
 800169e:	2301      	movs	r3, #1
 80016a0:	e000      	b.n	80016a4 <LL_ADC_IsDisableOngoing+0x1a>
 80016a2:	2300      	movs	r3, #0
}
 80016a4:	4618      	mov	r0, r3
 80016a6:	370c      	adds	r7, #12
 80016a8:	46bd      	mov	sp, r7
 80016aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ae:	4770      	bx	lr

080016b0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80016b0:	b480      	push	{r7}
 80016b2:	b083      	sub	sp, #12
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80016c0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80016c4:	f043 0204 	orr.w	r2, r3, #4
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80016cc:	bf00      	nop
 80016ce:	370c      	adds	r7, #12
 80016d0:	46bd      	mov	sp, r7
 80016d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d6:	4770      	bx	lr

080016d8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016d8:	b480      	push	{r7}
 80016da:	b083      	sub	sp, #12
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	689b      	ldr	r3, [r3, #8]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d101      	bne.n	80016f0 <LL_ADC_REG_IsConversionOngoing+0x18>
 80016ec:	2301      	movs	r3, #1
 80016ee:	e000      	b.n	80016f2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80016f0:	2300      	movs	r3, #0
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	370c      	adds	r7, #12
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr

080016fe <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80016fe:	b480      	push	{r7}
 8001700:	b083      	sub	sp, #12
 8001702:	af00      	add	r7, sp, #0
 8001704:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	689b      	ldr	r3, [r3, #8]
 800170a:	f003 0308 	and.w	r3, r3, #8
 800170e:	2b08      	cmp	r3, #8
 8001710:	d101      	bne.n	8001716 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001712:	2301      	movs	r3, #1
 8001714:	e000      	b.n	8001718 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001716:	2300      	movs	r3, #0
}
 8001718:	4618      	mov	r0, r3
 800171a:	370c      	adds	r7, #12
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr

08001724 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001724:	b590      	push	{r4, r7, lr}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800172c:	2300      	movs	r3, #0
 800172e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001730:	2300      	movs	r3, #0
 8001732:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1a9      	b.n	8001a92 <HAL_ADC_Init+0x36e>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	695b      	ldr	r3, [r3, #20]
 8001742:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001748:	2b00      	cmp	r3, #0
 800174a:	d109      	bne.n	8001760 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff fb07 	bl	8000d60 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	2200      	movs	r2, #0
 8001756:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2200      	movs	r2, #0
 800175c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4618      	mov	r0, r3
 8001766:	f7ff ff19 	bl	800159c <LL_ADC_IsDeepPowerDownEnabled>
 800176a:	4603      	mov	r3, r0
 800176c:	2b00      	cmp	r3, #0
 800176e:	d004      	beq.n	800177a <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7ff feff 	bl	8001578 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	4618      	mov	r0, r3
 8001780:	f7ff ff34 	bl	80015ec <LL_ADC_IsInternalRegulatorEnabled>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d115      	bne.n	80017b6 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4618      	mov	r0, r3
 8001790:	f7ff ff18 	bl	80015c4 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001794:	4b9c      	ldr	r3, [pc, #624]	; (8001a08 <HAL_ADC_Init+0x2e4>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	099b      	lsrs	r3, r3, #6
 800179a:	4a9c      	ldr	r2, [pc, #624]	; (8001a0c <HAL_ADC_Init+0x2e8>)
 800179c:	fba2 2303 	umull	r2, r3, r2, r3
 80017a0:	099b      	lsrs	r3, r3, #6
 80017a2:	3301      	adds	r3, #1
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017a8:	e002      	b.n	80017b0 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	3b01      	subs	r3, #1
 80017ae:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80017b0:	68fb      	ldr	r3, [r7, #12]
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d1f9      	bne.n	80017aa <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff ff16 	bl	80015ec <LL_ADC_IsInternalRegulatorEnabled>
 80017c0:	4603      	mov	r3, r0
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d10d      	bne.n	80017e2 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017ca:	f043 0210 	orr.w	r2, r3, #16
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80017d6:	f043 0201 	orr.w	r2, r3, #1
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4618      	mov	r0, r3
 80017e8:	f7ff ff76 	bl	80016d8 <LL_ADC_REG_IsConversionOngoing>
 80017ec:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017f2:	f003 0310 	and.w	r3, r3, #16
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 8142 	bne.w	8001a80 <HAL_ADC_Init+0x35c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80017fc:	697b      	ldr	r3, [r7, #20]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	f040 813e 	bne.w	8001a80 <HAL_ADC_Init+0x35c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001808:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800180c:	f043 0202 	orr.w	r2, r3, #2
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	4618      	mov	r0, r3
 800181a:	f7ff ff23 	bl	8001664 <LL_ADC_IsEnabled>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d141      	bne.n	80018a8 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800182c:	d004      	beq.n	8001838 <HAL_ADC_Init+0x114>
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a77      	ldr	r2, [pc, #476]	; (8001a10 <HAL_ADC_Init+0x2ec>)
 8001834:	4293      	cmp	r3, r2
 8001836:	d10f      	bne.n	8001858 <HAL_ADC_Init+0x134>
 8001838:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 800183c:	f7ff ff12 	bl	8001664 <LL_ADC_IsEnabled>
 8001840:	4604      	mov	r4, r0
 8001842:	4873      	ldr	r0, [pc, #460]	; (8001a10 <HAL_ADC_Init+0x2ec>)
 8001844:	f7ff ff0e 	bl	8001664 <LL_ADC_IsEnabled>
 8001848:	4603      	mov	r3, r0
 800184a:	4323      	orrs	r3, r4
 800184c:	2b00      	cmp	r3, #0
 800184e:	bf0c      	ite	eq
 8001850:	2301      	moveq	r3, #1
 8001852:	2300      	movne	r3, #0
 8001854:	b2db      	uxtb	r3, r3
 8001856:	e012      	b.n	800187e <HAL_ADC_Init+0x15a>
 8001858:	486e      	ldr	r0, [pc, #440]	; (8001a14 <HAL_ADC_Init+0x2f0>)
 800185a:	f7ff ff03 	bl	8001664 <LL_ADC_IsEnabled>
 800185e:	4604      	mov	r4, r0
 8001860:	486d      	ldr	r0, [pc, #436]	; (8001a18 <HAL_ADC_Init+0x2f4>)
 8001862:	f7ff feff 	bl	8001664 <LL_ADC_IsEnabled>
 8001866:	4603      	mov	r3, r0
 8001868:	431c      	orrs	r4, r3
 800186a:	486c      	ldr	r0, [pc, #432]	; (8001a1c <HAL_ADC_Init+0x2f8>)
 800186c:	f7ff fefa 	bl	8001664 <LL_ADC_IsEnabled>
 8001870:	4603      	mov	r3, r0
 8001872:	4323      	orrs	r3, r4
 8001874:	2b00      	cmp	r3, #0
 8001876:	bf0c      	ite	eq
 8001878:	2301      	moveq	r3, #1
 800187a:	2300      	movne	r3, #0
 800187c:	b2db      	uxtb	r3, r3
 800187e:	2b00      	cmp	r3, #0
 8001880:	d012      	beq.n	80018a8 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800188a:	d004      	beq.n	8001896 <HAL_ADC_Init+0x172>
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a5f      	ldr	r2, [pc, #380]	; (8001a10 <HAL_ADC_Init+0x2ec>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d101      	bne.n	800189a <HAL_ADC_Init+0x176>
 8001896:	4a62      	ldr	r2, [pc, #392]	; (8001a20 <HAL_ADC_Init+0x2fc>)
 8001898:	e000      	b.n	800189c <HAL_ADC_Init+0x178>
 800189a:	4a62      	ldr	r2, [pc, #392]	; (8001a24 <HAL_ADC_Init+0x300>)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	4619      	mov	r1, r3
 80018a2:	4610      	mov	r0, r2
 80018a4:	f7ff fcd8 	bl	8001258 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	7f5b      	ldrb	r3, [r3, #29]
 80018ac:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018b2:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 80018b8:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 80018be:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018c6:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 80018c8:	4313      	orrs	r3, r2
 80018ca:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d106      	bne.n	80018e4 <HAL_ADC_Init+0x1c0>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018da:	3b01      	subs	r3, #1
 80018dc:	045b      	lsls	r3, r3, #17
 80018de:	69ba      	ldr	r2, [r7, #24]
 80018e0:	4313      	orrs	r3, r2
 80018e2:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d009      	beq.n	8001900 <HAL_ADC_Init+0x1dc>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018f0:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f8:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 80018fa:	69ba      	ldr	r2, [r7, #24]
 80018fc:	4313      	orrs	r3, r2
 80018fe:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68da      	ldr	r2, [r3, #12]
 8001906:	4b48      	ldr	r3, [pc, #288]	; (8001a28 <HAL_ADC_Init+0x304>)
 8001908:	4013      	ands	r3, r2
 800190a:	687a      	ldr	r2, [r7, #4]
 800190c:	6812      	ldr	r2, [r2, #0]
 800190e:	69b9      	ldr	r1, [r7, #24]
 8001910:	430b      	orrs	r3, r1
 8001912:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	691b      	ldr	r3, [r3, #16]
 800191a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	430a      	orrs	r2, r1
 8001928:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	4618      	mov	r0, r3
 8001930:	f7ff fee5 	bl	80016fe <LL_ADC_INJ_IsConversionOngoing>
 8001934:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	2b00      	cmp	r3, #0
 800193a:	d17f      	bne.n	8001a3c <HAL_ADC_Init+0x318>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800193c:	693b      	ldr	r3, [r7, #16]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d17c      	bne.n	8001a3c <HAL_ADC_Init+0x318>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001946:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800194e:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8001950:	4313      	orrs	r3, r2
 8001952:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	68db      	ldr	r3, [r3, #12]
 800195a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800195e:	f023 0302 	bic.w	r3, r3, #2
 8001962:	687a      	ldr	r2, [r7, #4]
 8001964:	6812      	ldr	r2, [r2, #0]
 8001966:	69b9      	ldr	r1, [r7, #24]
 8001968:	430b      	orrs	r3, r1
 800196a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	691b      	ldr	r3, [r3, #16]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d017      	beq.n	80019a4 <HAL_ADC_Init+0x280>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	691a      	ldr	r2, [r3, #16]
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001982:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 800198c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001990:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6911      	ldr	r1, [r2, #16]
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6812      	ldr	r2, [r2, #0]
 800199c:	430b      	orrs	r3, r1
 800199e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 80019a2:	e013      	b.n	80019cc <HAL_ADC_Init+0x2a8>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	691a      	ldr	r2, [r3, #16]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 80019b2:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80019bc:	687a      	ldr	r2, [r7, #4]
 80019be:	6812      	ldr	r2, [r2, #0]
 80019c0:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 80019c4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80019c8:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80019d2:	2b01      	cmp	r3, #1
 80019d4:	d12a      	bne.n	8001a2c <HAL_ADC_Init+0x308>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	691b      	ldr	r3, [r3, #16]
 80019dc:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80019e0:	f023 0304 	bic.w	r3, r3, #4
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	6c51      	ldr	r1, [r2, #68]	; 0x44
 80019e8:	687a      	ldr	r2, [r7, #4]
 80019ea:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80019ec:	4311      	orrs	r1, r2
 80019ee:	687a      	ldr	r2, [r7, #4]
 80019f0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 80019f2:	4311      	orrs	r1, r2
 80019f4:	687a      	ldr	r2, [r7, #4]
 80019f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80019f8:	430a      	orrs	r2, r1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f042 0201 	orr.w	r2, r2, #1
 8001a04:	611a      	str	r2, [r3, #16]
 8001a06:	e019      	b.n	8001a3c <HAL_ADC_Init+0x318>
 8001a08:	20000000 	.word	0x20000000
 8001a0c:	053e2d63 	.word	0x053e2d63
 8001a10:	50000100 	.word	0x50000100
 8001a14:	50000400 	.word	0x50000400
 8001a18:	50000500 	.word	0x50000500
 8001a1c:	50000600 	.word	0x50000600
 8001a20:	50000300 	.word	0x50000300
 8001a24:	50000700 	.word	0x50000700
 8001a28:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	691a      	ldr	r2, [r3, #16]
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f022 0201 	bic.w	r2, r2, #1
 8001a3a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	695b      	ldr	r3, [r3, #20]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d10c      	bne.n	8001a5e <HAL_ADC_Init+0x33a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f023 010f 	bic.w	r1, r3, #15
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	6a1b      	ldr	r3, [r3, #32]
 8001a52:	1e5a      	subs	r2, r3, #1
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	631a      	str	r2, [r3, #48]	; 0x30
 8001a5c:	e007      	b.n	8001a6e <HAL_ADC_Init+0x34a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f022 020f 	bic.w	r2, r2, #15
 8001a6c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a72:	f023 0303 	bic.w	r3, r3, #3
 8001a76:	f043 0201 	orr.w	r2, r3, #1
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	65da      	str	r2, [r3, #92]	; 0x5c
 8001a7e:	e007      	b.n	8001a90 <HAL_ADC_Init+0x36c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a84:	f043 0210 	orr.w	r2, r3, #16
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a90:	7ffb      	ldrb	r3, [r7, #31]
}
 8001a92:	4618      	mov	r0, r3
 8001a94:	3724      	adds	r7, #36	; 0x24
 8001a96:	46bd      	mov	sp, r7
 8001a98:	bd90      	pop	{r4, r7, pc}
 8001a9a:	bf00      	nop

08001a9c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b086      	sub	sp, #24
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	60f8      	str	r0, [r7, #12]
 8001aa4:	60b9      	str	r1, [r7, #8]
 8001aa6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001ab0:	d004      	beq.n	8001abc <HAL_ADC_Start_DMA+0x20>
 8001ab2:	68fb      	ldr	r3, [r7, #12]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	4a5a      	ldr	r2, [pc, #360]	; (8001c20 <HAL_ADC_Start_DMA+0x184>)
 8001ab8:	4293      	cmp	r3, r2
 8001aba:	d101      	bne.n	8001ac0 <HAL_ADC_Start_DMA+0x24>
 8001abc:	4b59      	ldr	r3, [pc, #356]	; (8001c24 <HAL_ADC_Start_DMA+0x188>)
 8001abe:	e000      	b.n	8001ac2 <HAL_ADC_Start_DMA+0x26>
 8001ac0:	4b59      	ldr	r3, [pc, #356]	; (8001c28 <HAL_ADC_Start_DMA+0x18c>)
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fd3c 	bl	8001540 <LL_ADC_GetMultimode>
 8001ac8:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001aca:	68fb      	ldr	r3, [r7, #12]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	4618      	mov	r0, r3
 8001ad0:	f7ff fe02 	bl	80016d8 <LL_ADC_REG_IsConversionOngoing>
 8001ad4:	4603      	mov	r3, r0
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	f040 809b 	bne.w	8001c12 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001adc:	68fb      	ldr	r3, [r7, #12]
 8001ade:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8001ae2:	2b01      	cmp	r3, #1
 8001ae4:	d101      	bne.n	8001aea <HAL_ADC_Start_DMA+0x4e>
 8001ae6:	2302      	movs	r3, #2
 8001ae8:	e096      	b.n	8001c18 <HAL_ADC_Start_DMA+0x17c>
 8001aea:	68fb      	ldr	r3, [r7, #12]
 8001aec:	2201      	movs	r2, #1
 8001aee:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8001af2:	68fb      	ldr	r3, [r7, #12]
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	4a4d      	ldr	r2, [pc, #308]	; (8001c2c <HAL_ADC_Start_DMA+0x190>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d008      	beq.n	8001b0e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001afc:	693b      	ldr	r3, [r7, #16]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d005      	beq.n	8001b0e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b02:	693b      	ldr	r3, [r7, #16]
 8001b04:	2b05      	cmp	r3, #5
 8001b06:	d002      	beq.n	8001b0e <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	2b09      	cmp	r3, #9
 8001b0c:	d17a      	bne.n	8001c04 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8001b0e:	68f8      	ldr	r0, [r7, #12]
 8001b10:	f000 ff60 	bl	80029d4 <ADC_Enable>
 8001b14:	4603      	mov	r3, r0
 8001b16:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8001b18:	7dfb      	ldrb	r3, [r7, #23]
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d16d      	bne.n	8001bfa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b22:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001b26:	f023 0301 	bic.w	r3, r3, #1
 8001b2a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4a3a      	ldr	r2, [pc, #232]	; (8001c20 <HAL_ADC_Start_DMA+0x184>)
 8001b38:	4293      	cmp	r3, r2
 8001b3a:	d009      	beq.n	8001b50 <HAL_ADC_Start_DMA+0xb4>
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	4a3b      	ldr	r2, [pc, #236]	; (8001c30 <HAL_ADC_Start_DMA+0x194>)
 8001b42:	4293      	cmp	r3, r2
 8001b44:	d002      	beq.n	8001b4c <HAL_ADC_Start_DMA+0xb0>
 8001b46:	68fb      	ldr	r3, [r7, #12]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	e003      	b.n	8001b54 <HAL_ADC_Start_DMA+0xb8>
 8001b4c:	4b39      	ldr	r3, [pc, #228]	; (8001c34 <HAL_ADC_Start_DMA+0x198>)
 8001b4e:	e001      	b.n	8001b54 <HAL_ADC_Start_DMA+0xb8>
 8001b50:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001b54:	68fa      	ldr	r2, [r7, #12]
 8001b56:	6812      	ldr	r2, [r2, #0]
 8001b58:	4293      	cmp	r3, r2
 8001b5a:	d002      	beq.n	8001b62 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b5c:	693b      	ldr	r3, [r7, #16]
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d105      	bne.n	8001b6e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001b62:	68fb      	ldr	r3, [r7, #12]
 8001b64:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b66:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d006      	beq.n	8001b88 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001b7a:	68fb      	ldr	r3, [r7, #12]
 8001b7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b7e:	f023 0206 	bic.w	r2, r3, #6
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	661a      	str	r2, [r3, #96]	; 0x60
 8001b86:	e002      	b.n	8001b8e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001b8e:	68fb      	ldr	r3, [r7, #12]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	4a29      	ldr	r2, [pc, #164]	; (8001c38 <HAL_ADC_Start_DMA+0x19c>)
 8001b94:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8001b96:	68fb      	ldr	r3, [r7, #12]
 8001b98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9a:	4a28      	ldr	r2, [pc, #160]	; (8001c3c <HAL_ADC_Start_DMA+0x1a0>)
 8001b9c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001b9e:	68fb      	ldr	r3, [r7, #12]
 8001ba0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ba2:	4a27      	ldr	r2, [pc, #156]	; (8001c40 <HAL_ADC_Start_DMA+0x1a4>)
 8001ba4:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	221c      	movs	r2, #28
 8001bac:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001bb6:	68fb      	ldr	r3, [r7, #12]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	685a      	ldr	r2, [r3, #4]
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f042 0210 	orr.w	r2, r2, #16
 8001bc4:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	68da      	ldr	r2, [r3, #12]
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f042 0201 	orr.w	r2, r2, #1
 8001bd4:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	3340      	adds	r3, #64	; 0x40
 8001be0:	4619      	mov	r1, r3
 8001be2:	68ba      	ldr	r2, [r7, #8]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	f001 fc25 	bl	8003434 <HAL_DMA_Start_IT>
 8001bea:	4603      	mov	r3, r0
 8001bec:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	f7ff fd5c 	bl	80016b0 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8001bf8:	e00d      	b.n	8001c16 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	2200      	movs	r2, #0
 8001bfe:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 8001c02:	e008      	b.n	8001c16 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8001c04:	2301      	movs	r3, #1
 8001c06:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	2200      	movs	r2, #0
 8001c0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 8001c10:	e001      	b.n	8001c16 <HAL_ADC_Start_DMA+0x17a>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c12:	2302      	movs	r3, #2
 8001c14:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001c16:	7dfb      	ldrb	r3, [r7, #23]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3718      	adds	r7, #24
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bd80      	pop	{r7, pc}
 8001c20:	50000100 	.word	0x50000100
 8001c24:	50000300 	.word	0x50000300
 8001c28:	50000700 	.word	0x50000700
 8001c2c:	50000600 	.word	0x50000600
 8001c30:	50000500 	.word	0x50000500
 8001c34:	50000400 	.word	0x50000400
 8001c38:	08002bbf 	.word	0x08002bbf
 8001c3c:	08002c97 	.word	0x08002c97
 8001c40:	08002cb3 	.word	0x08002cb3

08001c44 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	; 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	681b      	ldr	r3, [r3, #0]
 8001c56:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	685b      	ldr	r3, [r3, #4]
 8001c5e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001c68:	d004      	beq.n	8001c74 <HAL_ADC_IRQHandler+0x30>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a8e      	ldr	r2, [pc, #568]	; (8001ea8 <HAL_ADC_IRQHandler+0x264>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d101      	bne.n	8001c78 <HAL_ADC_IRQHandler+0x34>
 8001c74:	4b8d      	ldr	r3, [pc, #564]	; (8001eac <HAL_ADC_IRQHandler+0x268>)
 8001c76:	e000      	b.n	8001c7a <HAL_ADC_IRQHandler+0x36>
 8001c78:	4b8d      	ldr	r3, [pc, #564]	; (8001eb0 <HAL_ADC_IRQHandler+0x26c>)
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7ff fc60 	bl	8001540 <LL_ADC_GetMultimode>
 8001c80:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001c82:	69fb      	ldr	r3, [r7, #28]
 8001c84:	f003 0302 	and.w	r3, r3, #2
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d017      	beq.n	8001cbc <HAL_ADC_IRQHandler+0x78>
 8001c8c:	69bb      	ldr	r3, [r7, #24]
 8001c8e:	f003 0302 	and.w	r3, r3, #2
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d012      	beq.n	8001cbc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c9a:	f003 0310 	and.w	r3, r3, #16
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d105      	bne.n	8001cae <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	65da      	str	r2, [r3, #92]	; 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f001 f8f6 	bl	8002ea0 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	2202      	movs	r2, #2
 8001cba:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cbc:	69fb      	ldr	r3, [r7, #28]
 8001cbe:	f003 0304 	and.w	r3, r3, #4
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d004      	beq.n	8001cd0 <HAL_ADC_IRQHandler+0x8c>
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	f003 0304 	and.w	r3, r3, #4
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d10b      	bne.n	8001ce8 <HAL_ADC_IRQHandler+0xa4>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	f000 8094 	beq.w	8001e04 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f003 0308 	and.w	r3, r3, #8
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	f000 808e 	beq.w	8001e04 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cec:	f003 0310 	and.w	r3, r3, #16
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d105      	bne.n	8001d00 <HAL_ADC_IRQHandler+0xbc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cf8:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	4618      	mov	r0, r3
 8001d06:	f7ff fb79 	bl	80013fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d072      	beq.n	8001df6 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4a64      	ldr	r2, [pc, #400]	; (8001ea8 <HAL_ADC_IRQHandler+0x264>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d009      	beq.n	8001d2e <HAL_ADC_IRQHandler+0xea>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	4a65      	ldr	r2, [pc, #404]	; (8001eb4 <HAL_ADC_IRQHandler+0x270>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d002      	beq.n	8001d2a <HAL_ADC_IRQHandler+0xe6>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	e003      	b.n	8001d32 <HAL_ADC_IRQHandler+0xee>
 8001d2a:	4b63      	ldr	r3, [pc, #396]	; (8001eb8 <HAL_ADC_IRQHandler+0x274>)
 8001d2c:	e001      	b.n	8001d32 <HAL_ADC_IRQHandler+0xee>
 8001d2e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d32:	687a      	ldr	r2, [r7, #4]
 8001d34:	6812      	ldr	r2, [r2, #0]
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d008      	beq.n	8001d4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001d3a:	697b      	ldr	r3, [r7, #20]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d005      	beq.n	8001d4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001d40:	697b      	ldr	r3, [r7, #20]
 8001d42:	2b05      	cmp	r3, #5
 8001d44:	d002      	beq.n	8001d4c <HAL_ADC_IRQHandler+0x108>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	2b09      	cmp	r3, #9
 8001d4a:	d104      	bne.n	8001d56 <HAL_ADC_IRQHandler+0x112>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	68db      	ldr	r3, [r3, #12]
 8001d52:	623b      	str	r3, [r7, #32]
 8001d54:	e014      	b.n	8001d80 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a53      	ldr	r2, [pc, #332]	; (8001ea8 <HAL_ADC_IRQHandler+0x264>)
 8001d5c:	4293      	cmp	r3, r2
 8001d5e:	d009      	beq.n	8001d74 <HAL_ADC_IRQHandler+0x130>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	4a53      	ldr	r2, [pc, #332]	; (8001eb4 <HAL_ADC_IRQHandler+0x270>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d002      	beq.n	8001d70 <HAL_ADC_IRQHandler+0x12c>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	e003      	b.n	8001d78 <HAL_ADC_IRQHandler+0x134>
 8001d70:	4b51      	ldr	r3, [pc, #324]	; (8001eb8 <HAL_ADC_IRQHandler+0x274>)
 8001d72:	e001      	b.n	8001d78 <HAL_ADC_IRQHandler+0x134>
 8001d74:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001d78:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	68db      	ldr	r3, [r3, #12]
 8001d7e:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001d80:	6a3b      	ldr	r3, [r7, #32]
 8001d82:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d135      	bne.n	8001df6 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	f003 0308 	and.w	r3, r3, #8
 8001d94:	2b08      	cmp	r3, #8
 8001d96:	d12e      	bne.n	8001df6 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff fc9b 	bl	80016d8 <LL_ADC_REG_IsConversionOngoing>
 8001da2:	4603      	mov	r3, r0
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d11a      	bne.n	8001dde <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f022 020c 	bic.w	r2, r2, #12
 8001db6:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dbc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	65da      	str	r2, [r3, #92]	; 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d112      	bne.n	8001df6 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd4:	f043 0201 	orr.w	r2, r3, #1
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	65da      	str	r2, [r3, #92]	; 0x5c
 8001ddc:	e00b      	b.n	8001df6 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de2:	f043 0210 	orr.w	r2, r3, #16
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	65da      	str	r2, [r3, #92]	; 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dee:	f043 0201 	orr.w	r2, r3, #1
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	661a      	str	r2, [r3, #96]	; 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001df6:	6878      	ldr	r0, [r7, #4]
 8001df8:	f000 f984 	bl	8002104 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	220c      	movs	r2, #12
 8001e02:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e04:	69fb      	ldr	r3, [r7, #28]
 8001e06:	f003 0320 	and.w	r3, r3, #32
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d004      	beq.n	8001e18 <HAL_ADC_IRQHandler+0x1d4>
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	f003 0320 	and.w	r3, r3, #32
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d10b      	bne.n	8001e30 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	f000 80b3 	beq.w	8001f8a <HAL_ADC_IRQHandler+0x346>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001e24:	69bb      	ldr	r3, [r7, #24]
 8001e26:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	f000 80ad 	beq.w	8001f8a <HAL_ADC_IRQHandler+0x346>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e34:	f003 0310 	and.w	r3, r3, #16
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d105      	bne.n	8001e48 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e40:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	f7ff fb14 	bl	800147a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001e52:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff facf 	bl	80013fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8001e5e:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4a10      	ldr	r2, [pc, #64]	; (8001ea8 <HAL_ADC_IRQHandler+0x264>)
 8001e66:	4293      	cmp	r3, r2
 8001e68:	d009      	beq.n	8001e7e <HAL_ADC_IRQHandler+0x23a>
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a11      	ldr	r2, [pc, #68]	; (8001eb4 <HAL_ADC_IRQHandler+0x270>)
 8001e70:	4293      	cmp	r3, r2
 8001e72:	d002      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x236>
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	e003      	b.n	8001e82 <HAL_ADC_IRQHandler+0x23e>
 8001e7a:	4b0f      	ldr	r3, [pc, #60]	; (8001eb8 <HAL_ADC_IRQHandler+0x274>)
 8001e7c:	e001      	b.n	8001e82 <HAL_ADC_IRQHandler+0x23e>
 8001e7e:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001e82:	687a      	ldr	r2, [r7, #4]
 8001e84:	6812      	ldr	r2, [r2, #0]
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d008      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001e8a:	697b      	ldr	r3, [r7, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d005      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001e90:	697b      	ldr	r3, [r7, #20]
 8001e92:	2b06      	cmp	r3, #6
 8001e94:	d002      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x258>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001e96:	697b      	ldr	r3, [r7, #20]
 8001e98:	2b07      	cmp	r3, #7
 8001e9a:	d10f      	bne.n	8001ebc <HAL_ADC_IRQHandler+0x278>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	68db      	ldr	r3, [r3, #12]
 8001ea2:	623b      	str	r3, [r7, #32]
 8001ea4:	e01f      	b.n	8001ee6 <HAL_ADC_IRQHandler+0x2a2>
 8001ea6:	bf00      	nop
 8001ea8:	50000100 	.word	0x50000100
 8001eac:	50000300 	.word	0x50000300
 8001eb0:	50000700 	.word	0x50000700
 8001eb4:	50000500 	.word	0x50000500
 8001eb8:	50000400 	.word	0x50000400
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	4a8b      	ldr	r2, [pc, #556]	; (80020f0 <HAL_ADC_IRQHandler+0x4ac>)
 8001ec2:	4293      	cmp	r3, r2
 8001ec4:	d009      	beq.n	8001eda <HAL_ADC_IRQHandler+0x296>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	4a8a      	ldr	r2, [pc, #552]	; (80020f4 <HAL_ADC_IRQHandler+0x4b0>)
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	d002      	beq.n	8001ed6 <HAL_ADC_IRQHandler+0x292>
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e003      	b.n	8001ede <HAL_ADC_IRQHandler+0x29a>
 8001ed6:	4b88      	ldr	r3, [pc, #544]	; (80020f8 <HAL_ADC_IRQHandler+0x4b4>)
 8001ed8:	e001      	b.n	8001ede <HAL_ADC_IRQHandler+0x29a>
 8001eda:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8001ede:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d047      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x338>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001eec:	6a3b      	ldr	r3, [r7, #32]
 8001eee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d007      	beq.n	8001f06 <HAL_ADC_IRQHandler+0x2c2>
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	2b00      	cmp	r3, #0
 8001efa:	d03f      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x338>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001efc:	6a3b      	ldr	r3, [r7, #32]
 8001efe:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d13a      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x338>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f10:	2b40      	cmp	r3, #64	; 0x40
 8001f12:	d133      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x338>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001f14:	6a3b      	ldr	r3, [r7, #32]
 8001f16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d12e      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x338>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7ff fbeb 	bl	80016fe <LL_ADC_INJ_IsConversionOngoing>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d11a      	bne.n	8001f64 <HAL_ADC_IRQHandler+0x320>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	685a      	ldr	r2, [r3, #4]
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001f3c:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	65da      	str	r2, [r3, #92]	; 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d112      	bne.n	8001f7c <HAL_ADC_IRQHandler+0x338>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	f043 0201 	orr.w	r2, r3, #1
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	65da      	str	r2, [r3, #92]	; 0x5c
 8001f62:	e00b      	b.n	8001f7c <HAL_ADC_IRQHandler+0x338>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f68:	f043 0210 	orr.w	r2, r3, #16
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	65da      	str	r2, [r3, #92]	; 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f74:	f043 0201 	orr.w	r2, r3, #1
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	661a      	str	r2, [r3, #96]	; 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f000 ff67 	bl	8002e50 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2260      	movs	r2, #96	; 0x60
 8001f88:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f8a:	69fb      	ldr	r3, [r7, #28]
 8001f8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d011      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x374>
 8001f94:	69bb      	ldr	r3, [r7, #24]
 8001f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00c      	beq.n	8001fb8 <HAL_ADC_IRQHandler+0x374>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fa2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8be 	bl	800212c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	2280      	movs	r2, #128	; 0x80
 8001fb6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001fb8:	69fb      	ldr	r3, [r7, #28]
 8001fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d012      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x3a4>
 8001fc2:	69bb      	ldr	r3, [r7, #24]
 8001fc4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00d      	beq.n	8001fe8 <HAL_ADC_IRQHandler+0x3a4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd0:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	f000 ff4d 	bl	8002e78 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001fe6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fe8:	69fb      	ldr	r3, [r7, #28]
 8001fea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d012      	beq.n	8002018 <HAL_ADC_IRQHandler+0x3d4>
 8001ff2:	69bb      	ldr	r3, [r7, #24]
 8001ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d00d      	beq.n	8002018 <HAL_ADC_IRQHandler+0x3d4>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002000:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002008:	6878      	ldr	r0, [r7, #4]
 800200a:	f000 ff3f 	bl	8002e8c <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002016:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	f003 0310 	and.w	r3, r3, #16
 800201e:	2b00      	cmp	r3, #0
 8002020:	d043      	beq.n	80020aa <HAL_ADC_IRQHandler+0x466>
 8002022:	69bb      	ldr	r3, [r7, #24]
 8002024:	f003 0310 	and.w	r3, r3, #16
 8002028:	2b00      	cmp	r3, #0
 800202a:	d03e      	beq.n	80020aa <HAL_ADC_IRQHandler+0x466>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002030:	2b00      	cmp	r3, #0
 8002032:	d102      	bne.n	800203a <HAL_ADC_IRQHandler+0x3f6>
    {
      overrun_error = 1UL;
 8002034:	2301      	movs	r3, #1
 8002036:	627b      	str	r3, [r7, #36]	; 0x24
 8002038:	e021      	b.n	800207e <HAL_ADC_IRQHandler+0x43a>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d015      	beq.n	800206c <HAL_ADC_IRQHandler+0x428>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002048:	d004      	beq.n	8002054 <HAL_ADC_IRQHandler+0x410>
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a28      	ldr	r2, [pc, #160]	; (80020f0 <HAL_ADC_IRQHandler+0x4ac>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d101      	bne.n	8002058 <HAL_ADC_IRQHandler+0x414>
 8002054:	4b29      	ldr	r3, [pc, #164]	; (80020fc <HAL_ADC_IRQHandler+0x4b8>)
 8002056:	e000      	b.n	800205a <HAL_ADC_IRQHandler+0x416>
 8002058:	4b29      	ldr	r3, [pc, #164]	; (8002100 <HAL_ADC_IRQHandler+0x4bc>)
 800205a:	4618      	mov	r0, r3
 800205c:	f7ff fa7e 	bl	800155c <LL_ADC_GetMultiDMATransfer>
 8002060:	4603      	mov	r3, r0
 8002062:	2b00      	cmp	r3, #0
 8002064:	d00b      	beq.n	800207e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 8002066:	2301      	movs	r3, #1
 8002068:	627b      	str	r3, [r7, #36]	; 0x24
 800206a:	e008      	b.n	800207e <HAL_ADC_IRQHandler+0x43a>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
 8002072:	f003 0301 	and.w	r3, r3, #1
 8002076:	2b00      	cmp	r3, #0
 8002078:	d001      	beq.n	800207e <HAL_ADC_IRQHandler+0x43a>
        {
          overrun_error = 1UL;
 800207a:	2301      	movs	r3, #1
 800207c:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 800207e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002080:	2b01      	cmp	r3, #1
 8002082:	d10e      	bne.n	80020a2 <HAL_ADC_IRQHandler+0x45e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002094:	f043 0202 	orr.w	r2, r3, #2
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	661a      	str	r2, [r3, #96]	; 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 800209c:	6878      	ldr	r0, [r7, #4]
 800209e:	f000 f84f 	bl	8002140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	2210      	movs	r2, #16
 80020a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d018      	beq.n	80020e6 <HAL_ADC_IRQHandler+0x4a2>
 80020b4:	69bb      	ldr	r3, [r7, #24]
 80020b6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d013      	beq.n	80020e6 <HAL_ADC_IRQHandler+0x4a2>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c2:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020ce:	f043 0208 	orr.w	r2, r3, #8
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	661a      	str	r2, [r3, #96]	; 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80020de:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020e0:	6878      	ldr	r0, [r7, #4]
 80020e2:	f000 febf 	bl	8002e64 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 80020e6:	bf00      	nop
 80020e8:	3728      	adds	r7, #40	; 0x28
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}
 80020ee:	bf00      	nop
 80020f0:	50000100 	.word	0x50000100
 80020f4:	50000500 	.word	0x50000500
 80020f8:	50000400 	.word	0x50000400
 80020fc:	50000300 	.word	0x50000300
 8002100:	50000700 	.word	0x50000700

08002104 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 800212c:	b480      	push	{r7}
 800212e:	b083      	sub	sp, #12
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002134:	bf00      	nop
 8002136:	370c      	adds	r7, #12
 8002138:	46bd      	mov	sp, r7
 800213a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213e:	4770      	bx	lr

08002140 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002140:	b480      	push	{r7}
 8002142:	b083      	sub	sp, #12
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002148:	bf00      	nop
 800214a:	370c      	adds	r7, #12
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr

08002154 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b0b6      	sub	sp, #216	; 0xd8
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
 800215c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800215e:	2300      	movs	r3, #0
 8002160:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002164:	2300      	movs	r3, #0
 8002166:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800216e:	2b01      	cmp	r3, #1
 8002170:	d102      	bne.n	8002178 <HAL_ADC_ConfigChannel+0x24>
 8002172:	2302      	movs	r3, #2
 8002174:	f000 bc13 	b.w	800299e <HAL_ADC_ConfigChannel+0x84a>
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2201      	movs	r2, #1
 800217c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7ff faa7 	bl	80016d8 <LL_ADC_REG_IsConversionOngoing>
 800218a:	4603      	mov	r3, r0
 800218c:	2b00      	cmp	r3, #0
 800218e:	f040 83f3 	bne.w	8002978 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6818      	ldr	r0, [r3, #0]
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	6859      	ldr	r1, [r3, #4]
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	461a      	mov	r2, r3
 80021a0:	f7ff f93f 	bl	8001422 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fa95 	bl	80016d8 <LL_ADC_REG_IsConversionOngoing>
 80021ae:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff faa1 	bl	80016fe <LL_ADC_INJ_IsConversionOngoing>
 80021bc:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80021c0:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	f040 81d9 	bne.w	800257c <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80021ca:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	f040 81d4 	bne.w	800257c <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80021d4:	683b      	ldr	r3, [r7, #0]
 80021d6:	689b      	ldr	r3, [r3, #8]
 80021d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80021dc:	d10f      	bne.n	80021fe <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	6818      	ldr	r0, [r3, #0]
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	2200      	movs	r2, #0
 80021e8:	4619      	mov	r1, r3
 80021ea:	f7ff f959 	bl	80014a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80021f6:	4618      	mov	r0, r3
 80021f8:	f7ff f8ed 	bl	80013d6 <LL_ADC_SetSamplingTimeCommonConfig>
 80021fc:	e00e      	b.n	800221c <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	6818      	ldr	r0, [r3, #0]
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	6819      	ldr	r1, [r3, #0]
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689b      	ldr	r3, [r3, #8]
 800220a:	461a      	mov	r2, r3
 800220c:	f7ff f948 	bl	80014a0 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	2100      	movs	r1, #0
 8002216:	4618      	mov	r0, r3
 8002218:	f7ff f8dd 	bl	80013d6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	695a      	ldr	r2, [r3, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	68db      	ldr	r3, [r3, #12]
 8002226:	08db      	lsrs	r3, r3, #3
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	005b      	lsls	r3, r3, #1
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	691b      	ldr	r3, [r3, #16]
 800223a:	2b04      	cmp	r3, #4
 800223c:	d022      	beq.n	8002284 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6818      	ldr	r0, [r3, #0]
 8002242:	683b      	ldr	r3, [r7, #0]
 8002244:	6919      	ldr	r1, [r3, #16]
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800224e:	f7ff f837 	bl	80012c0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	6919      	ldr	r1, [r3, #16]
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	699b      	ldr	r3, [r3, #24]
 800225e:	461a      	mov	r2, r3
 8002260:	f7ff f883 	bl	800136a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6818      	ldr	r0, [r3, #0]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800226c:	683b      	ldr	r3, [r7, #0]
 800226e:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002270:	2b01      	cmp	r3, #1
 8002272:	d102      	bne.n	800227a <HAL_ADC_ConfigChannel+0x126>
 8002274:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8002278:	e000      	b.n	800227c <HAL_ADC_ConfigChannel+0x128>
 800227a:	2300      	movs	r3, #0
 800227c:	461a      	mov	r2, r3
 800227e:	f7ff f88f 	bl	80013a0 <LL_ADC_SetOffsetSaturation>
 8002282:	e17b      	b.n	800257c <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	2100      	movs	r1, #0
 800228a:	4618      	mov	r0, r3
 800228c:	f7ff f83c 	bl	8001308 <LL_ADC_GetOffsetChannel>
 8002290:	4603      	mov	r3, r0
 8002292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002296:	2b00      	cmp	r3, #0
 8002298:	d10a      	bne.n	80022b0 <HAL_ADC_ConfigChannel+0x15c>
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	2100      	movs	r1, #0
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff f831 	bl	8001308 <LL_ADC_GetOffsetChannel>
 80022a6:	4603      	mov	r3, r0
 80022a8:	0e9b      	lsrs	r3, r3, #26
 80022aa:	f003 021f 	and.w	r2, r3, #31
 80022ae:	e01e      	b.n	80022ee <HAL_ADC_ConfigChannel+0x19a>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f7ff f826 	bl	8001308 <LL_ADC_GetOffsetChannel>
 80022bc:	4603      	mov	r3, r0
 80022be:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022c2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80022c6:	fa93 f3a3 	rbit	r3, r3
 80022ca:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80022ce:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80022d2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80022d6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022da:	2b00      	cmp	r3, #0
 80022dc:	d101      	bne.n	80022e2 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80022de:	2320      	movs	r3, #32
 80022e0:	e004      	b.n	80022ec <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80022e2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80022e6:	fab3 f383 	clz	r3, r3
 80022ea:	b2db      	uxtb	r3, r3
 80022ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80022ee:	683b      	ldr	r3, [r7, #0]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d105      	bne.n	8002306 <HAL_ADC_ConfigChannel+0x1b2>
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	0e9b      	lsrs	r3, r3, #26
 8002300:	f003 031f 	and.w	r3, r3, #31
 8002304:	e018      	b.n	8002338 <HAL_ADC_ConfigChannel+0x1e4>
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800230e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 8002312:	fa93 f3a3 	rbit	r3, r3
 8002316:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 800231a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800231e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 8002322:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002326:	2b00      	cmp	r3, #0
 8002328:	d101      	bne.n	800232e <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 800232a:	2320      	movs	r3, #32
 800232c:	e004      	b.n	8002338 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800232e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002332:	fab3 f383 	clz	r3, r3
 8002336:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002338:	429a      	cmp	r2, r3
 800233a:	d106      	bne.n	800234a <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2200      	movs	r2, #0
 8002342:	2100      	movs	r1, #0
 8002344:	4618      	mov	r0, r3
 8002346:	f7fe fff5 	bl	8001334 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	2101      	movs	r1, #1
 8002350:	4618      	mov	r0, r3
 8002352:	f7fe ffd9 	bl	8001308 <LL_ADC_GetOffsetChannel>
 8002356:	4603      	mov	r3, r0
 8002358:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800235c:	2b00      	cmp	r3, #0
 800235e:	d10a      	bne.n	8002376 <HAL_ADC_ConfigChannel+0x222>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	2101      	movs	r1, #1
 8002366:	4618      	mov	r0, r3
 8002368:	f7fe ffce 	bl	8001308 <LL_ADC_GetOffsetChannel>
 800236c:	4603      	mov	r3, r0
 800236e:	0e9b      	lsrs	r3, r3, #26
 8002370:	f003 021f 	and.w	r2, r3, #31
 8002374:	e01e      	b.n	80023b4 <HAL_ADC_ConfigChannel+0x260>
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f7fe ffc3 	bl	8001308 <LL_ADC_GetOffsetChannel>
 8002382:	4603      	mov	r3, r0
 8002384:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002388:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800238c:	fa93 f3a3 	rbit	r3, r3
 8002390:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8002394:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002398:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 800239c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80023a4:	2320      	movs	r3, #32
 80023a6:	e004      	b.n	80023b2 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80023a8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80023ac:	fab3 f383 	clz	r3, r3
 80023b0:	b2db      	uxtb	r3, r3
 80023b2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d105      	bne.n	80023cc <HAL_ADC_ConfigChannel+0x278>
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	0e9b      	lsrs	r3, r3, #26
 80023c6:	f003 031f 	and.w	r3, r3, #31
 80023ca:	e018      	b.n	80023fe <HAL_ADC_ConfigChannel+0x2aa>
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023d4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80023d8:	fa93 f3a3 	rbit	r3, r3
 80023dc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80023e0:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80023e4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80023e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d101      	bne.n	80023f4 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80023f0:	2320      	movs	r3, #32
 80023f2:	e004      	b.n	80023fe <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80023f4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80023f8:	fab3 f383 	clz	r3, r3
 80023fc:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80023fe:	429a      	cmp	r2, r3
 8002400:	d106      	bne.n	8002410 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	2200      	movs	r2, #0
 8002408:	2101      	movs	r1, #1
 800240a:	4618      	mov	r0, r3
 800240c:	f7fe ff92 	bl	8001334 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	2102      	movs	r1, #2
 8002416:	4618      	mov	r0, r3
 8002418:	f7fe ff76 	bl	8001308 <LL_ADC_GetOffsetChannel>
 800241c:	4603      	mov	r3, r0
 800241e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002422:	2b00      	cmp	r3, #0
 8002424:	d10a      	bne.n	800243c <HAL_ADC_ConfigChannel+0x2e8>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	2102      	movs	r1, #2
 800242c:	4618      	mov	r0, r3
 800242e:	f7fe ff6b 	bl	8001308 <LL_ADC_GetOffsetChannel>
 8002432:	4603      	mov	r3, r0
 8002434:	0e9b      	lsrs	r3, r3, #26
 8002436:	f003 021f 	and.w	r2, r3, #31
 800243a:	e01e      	b.n	800247a <HAL_ADC_ConfigChannel+0x326>
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2102      	movs	r1, #2
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe ff60 	bl	8001308 <LL_ADC_GetOffsetChannel>
 8002448:	4603      	mov	r3, r0
 800244a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800244e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002452:	fa93 f3a3 	rbit	r3, r3
 8002456:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 800245a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800245e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8002462:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002466:	2b00      	cmp	r3, #0
 8002468:	d101      	bne.n	800246e <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800246a:	2320      	movs	r3, #32
 800246c:	e004      	b.n	8002478 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800246e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002472:	fab3 f383 	clz	r3, r3
 8002476:	b2db      	uxtb	r3, r3
 8002478:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002482:	2b00      	cmp	r3, #0
 8002484:	d105      	bne.n	8002492 <HAL_ADC_ConfigChannel+0x33e>
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	0e9b      	lsrs	r3, r3, #26
 800248c:	f003 031f 	and.w	r3, r3, #31
 8002490:	e016      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x36c>
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800249a:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800249e:	fa93 f3a3 	rbit	r3, r3
 80024a2:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80024a4:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80024a6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80024aa:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80024b2:	2320      	movs	r3, #32
 80024b4:	e004      	b.n	80024c0 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80024b6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80024ba:	fab3 f383 	clz	r3, r3
 80024be:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80024c0:	429a      	cmp	r2, r3
 80024c2:	d106      	bne.n	80024d2 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	2200      	movs	r2, #0
 80024ca:	2102      	movs	r1, #2
 80024cc:	4618      	mov	r0, r3
 80024ce:	f7fe ff31 	bl	8001334 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	2103      	movs	r1, #3
 80024d8:	4618      	mov	r0, r3
 80024da:	f7fe ff15 	bl	8001308 <LL_ADC_GetOffsetChannel>
 80024de:	4603      	mov	r3, r0
 80024e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10a      	bne.n	80024fe <HAL_ADC_ConfigChannel+0x3aa>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	2103      	movs	r1, #3
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe ff0a 	bl	8001308 <LL_ADC_GetOffsetChannel>
 80024f4:	4603      	mov	r3, r0
 80024f6:	0e9b      	lsrs	r3, r3, #26
 80024f8:	f003 021f 	and.w	r2, r3, #31
 80024fc:	e017      	b.n	800252e <HAL_ADC_ConfigChannel+0x3da>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	2103      	movs	r1, #3
 8002504:	4618      	mov	r0, r3
 8002506:	f7fe feff 	bl	8001308 <LL_ADC_GetOffsetChannel>
 800250a:	4603      	mov	r3, r0
 800250c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800250e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002510:	fa93 f3a3 	rbit	r3, r3
 8002514:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002516:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002518:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 800251a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 8002520:	2320      	movs	r3, #32
 8002522:	e003      	b.n	800252c <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002524:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002526:	fab3 f383 	clz	r3, r3
 800252a:	b2db      	uxtb	r3, r3
 800252c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002536:	2b00      	cmp	r3, #0
 8002538:	d105      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x3f2>
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	0e9b      	lsrs	r3, r3, #26
 8002540:	f003 031f 	and.w	r3, r3, #31
 8002544:	e011      	b.n	800256a <HAL_ADC_ConfigChannel+0x416>
 8002546:	683b      	ldr	r3, [r7, #0]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800254e:	fa93 f3a3 	rbit	r3, r3
 8002552:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002554:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002556:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002558:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800255a:	2b00      	cmp	r3, #0
 800255c:	d101      	bne.n	8002562 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800255e:	2320      	movs	r3, #32
 8002560:	e003      	b.n	800256a <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8002562:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002564:	fab3 f383 	clz	r3, r3
 8002568:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800256a:	429a      	cmp	r2, r3
 800256c:	d106      	bne.n	800257c <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2200      	movs	r2, #0
 8002574:	2103      	movs	r1, #3
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe fedc 	bl	8001334 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	681b      	ldr	r3, [r3, #0]
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff f86f 	bl	8001664 <LL_ADC_IsEnabled>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	f040 813d 	bne.w	8002808 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6818      	ldr	r0, [r3, #0]
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	6819      	ldr	r1, [r3, #0]
 8002596:	683b      	ldr	r3, [r7, #0]
 8002598:	68db      	ldr	r3, [r3, #12]
 800259a:	461a      	mov	r2, r3
 800259c:	f7fe ffac 	bl	80014f8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	68db      	ldr	r3, [r3, #12]
 80025a4:	4aa2      	ldr	r2, [pc, #648]	; (8002830 <HAL_ADC_ConfigChannel+0x6dc>)
 80025a6:	4293      	cmp	r3, r2
 80025a8:	f040 812e 	bne.w	8002808 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	681b      	ldr	r3, [r3, #0]
 80025b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d10b      	bne.n	80025d4 <HAL_ADC_ConfigChannel+0x480>
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	0e9b      	lsrs	r3, r3, #26
 80025c2:	3301      	adds	r3, #1
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	2b09      	cmp	r3, #9
 80025ca:	bf94      	ite	ls
 80025cc:	2301      	movls	r3, #1
 80025ce:	2300      	movhi	r3, #0
 80025d0:	b2db      	uxtb	r3, r3
 80025d2:	e019      	b.n	8002608 <HAL_ADC_ConfigChannel+0x4b4>
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025da:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80025dc:	fa93 f3a3 	rbit	r3, r3
 80025e0:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80025e2:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80025e4:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80025e6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d101      	bne.n	80025f0 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80025ec:	2320      	movs	r3, #32
 80025ee:	e003      	b.n	80025f8 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80025f0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80025f2:	fab3 f383 	clz	r3, r3
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	3301      	adds	r3, #1
 80025fa:	f003 031f 	and.w	r3, r3, #31
 80025fe:	2b09      	cmp	r3, #9
 8002600:	bf94      	ite	ls
 8002602:	2301      	movls	r3, #1
 8002604:	2300      	movhi	r3, #0
 8002606:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002608:	2b00      	cmp	r3, #0
 800260a:	d079      	beq.n	8002700 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002614:	2b00      	cmp	r3, #0
 8002616:	d107      	bne.n	8002628 <HAL_ADC_ConfigChannel+0x4d4>
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	0e9b      	lsrs	r3, r3, #26
 800261e:	3301      	adds	r3, #1
 8002620:	069b      	lsls	r3, r3, #26
 8002622:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002626:	e015      	b.n	8002654 <HAL_ADC_ConfigChannel+0x500>
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800262e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002630:	fa93 f3a3 	rbit	r3, r3
 8002634:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002636:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002638:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 800263a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800263c:	2b00      	cmp	r3, #0
 800263e:	d101      	bne.n	8002644 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8002640:	2320      	movs	r3, #32
 8002642:	e003      	b.n	800264c <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002644:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002646:	fab3 f383 	clz	r3, r3
 800264a:	b2db      	uxtb	r3, r3
 800264c:	3301      	adds	r3, #1
 800264e:	069b      	lsls	r3, r3, #26
 8002650:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002654:	683b      	ldr	r3, [r7, #0]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800265c:	2b00      	cmp	r3, #0
 800265e:	d109      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x520>
 8002660:	683b      	ldr	r3, [r7, #0]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0e9b      	lsrs	r3, r3, #26
 8002666:	3301      	adds	r3, #1
 8002668:	f003 031f 	and.w	r3, r3, #31
 800266c:	2101      	movs	r1, #1
 800266e:	fa01 f303 	lsl.w	r3, r1, r3
 8002672:	e017      	b.n	80026a4 <HAL_ADC_ConfigChannel+0x550>
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800267a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800267c:	fa93 f3a3 	rbit	r3, r3
 8002680:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8002682:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002684:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 8002686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002688:	2b00      	cmp	r3, #0
 800268a:	d101      	bne.n	8002690 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 800268c:	2320      	movs	r3, #32
 800268e:	e003      	b.n	8002698 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8002690:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002692:	fab3 f383 	clz	r3, r3
 8002696:	b2db      	uxtb	r3, r3
 8002698:	3301      	adds	r3, #1
 800269a:	f003 031f 	and.w	r3, r3, #31
 800269e:	2101      	movs	r1, #1
 80026a0:	fa01 f303 	lsl.w	r3, r1, r3
 80026a4:	ea42 0103 	orr.w	r1, r2, r3
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d10a      	bne.n	80026ca <HAL_ADC_ConfigChannel+0x576>
 80026b4:	683b      	ldr	r3, [r7, #0]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	0e9b      	lsrs	r3, r3, #26
 80026ba:	3301      	adds	r3, #1
 80026bc:	f003 021f 	and.w	r2, r3, #31
 80026c0:	4613      	mov	r3, r2
 80026c2:	005b      	lsls	r3, r3, #1
 80026c4:	4413      	add	r3, r2
 80026c6:	051b      	lsls	r3, r3, #20
 80026c8:	e018      	b.n	80026fc <HAL_ADC_ConfigChannel+0x5a8>
 80026ca:	683b      	ldr	r3, [r7, #0]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026d2:	fa93 f3a3 	rbit	r3, r3
 80026d6:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80026d8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80026da:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80026dc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80026e2:	2320      	movs	r3, #32
 80026e4:	e003      	b.n	80026ee <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80026e6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80026e8:	fab3 f383 	clz	r3, r3
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	3301      	adds	r3, #1
 80026f0:	f003 021f 	and.w	r2, r3, #31
 80026f4:	4613      	mov	r3, r2
 80026f6:	005b      	lsls	r3, r3, #1
 80026f8:	4413      	add	r3, r2
 80026fa:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80026fc:	430b      	orrs	r3, r1
 80026fe:	e07e      	b.n	80027fe <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002708:	2b00      	cmp	r3, #0
 800270a:	d107      	bne.n	800271c <HAL_ADC_ConfigChannel+0x5c8>
 800270c:	683b      	ldr	r3, [r7, #0]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	0e9b      	lsrs	r3, r3, #26
 8002712:	3301      	adds	r3, #1
 8002714:	069b      	lsls	r3, r3, #26
 8002716:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800271a:	e015      	b.n	8002748 <HAL_ADC_ConfigChannel+0x5f4>
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002722:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002724:	fa93 f3a3 	rbit	r3, r3
 8002728:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 800272a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800272c:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800272e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002730:	2b00      	cmp	r3, #0
 8002732:	d101      	bne.n	8002738 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002734:	2320      	movs	r3, #32
 8002736:	e003      	b.n	8002740 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800273a:	fab3 f383 	clz	r3, r3
 800273e:	b2db      	uxtb	r3, r3
 8002740:	3301      	adds	r3, #1
 8002742:	069b      	lsls	r3, r3, #26
 8002744:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002750:	2b00      	cmp	r3, #0
 8002752:	d109      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x614>
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	0e9b      	lsrs	r3, r3, #26
 800275a:	3301      	adds	r3, #1
 800275c:	f003 031f 	and.w	r3, r3, #31
 8002760:	2101      	movs	r1, #1
 8002762:	fa01 f303 	lsl.w	r3, r1, r3
 8002766:	e017      	b.n	8002798 <HAL_ADC_ConfigChannel+0x644>
 8002768:	683b      	ldr	r3, [r7, #0]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	fa93 f3a3 	rbit	r3, r3
 8002774:	61fb      	str	r3, [r7, #28]
  return result;
 8002776:	69fb      	ldr	r3, [r7, #28]
 8002778:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800277a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800277c:	2b00      	cmp	r3, #0
 800277e:	d101      	bne.n	8002784 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8002780:	2320      	movs	r3, #32
 8002782:	e003      	b.n	800278c <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002784:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002786:	fab3 f383 	clz	r3, r3
 800278a:	b2db      	uxtb	r3, r3
 800278c:	3301      	adds	r3, #1
 800278e:	f003 031f 	and.w	r3, r3, #31
 8002792:	2101      	movs	r1, #1
 8002794:	fa01 f303 	lsl.w	r3, r1, r3
 8002798:	ea42 0103 	orr.w	r1, r2, r3
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d10d      	bne.n	80027c4 <HAL_ADC_ConfigChannel+0x670>
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	0e9b      	lsrs	r3, r3, #26
 80027ae:	3301      	adds	r3, #1
 80027b0:	f003 021f 	and.w	r2, r3, #31
 80027b4:	4613      	mov	r3, r2
 80027b6:	005b      	lsls	r3, r3, #1
 80027b8:	4413      	add	r3, r2
 80027ba:	3b1e      	subs	r3, #30
 80027bc:	051b      	lsls	r3, r3, #20
 80027be:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80027c2:	e01b      	b.n	80027fc <HAL_ADC_ConfigChannel+0x6a8>
 80027c4:	683b      	ldr	r3, [r7, #0]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80027ca:	697b      	ldr	r3, [r7, #20]
 80027cc:	fa93 f3a3 	rbit	r3, r3
 80027d0:	613b      	str	r3, [r7, #16]
  return result;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 80027d6:	69bb      	ldr	r3, [r7, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d101      	bne.n	80027e0 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80027dc:	2320      	movs	r3, #32
 80027de:	e003      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80027e0:	69bb      	ldr	r3, [r7, #24]
 80027e2:	fab3 f383 	clz	r3, r3
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	3301      	adds	r3, #1
 80027ea:	f003 021f 	and.w	r2, r3, #31
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1e      	subs	r3, #30
 80027f6:	051b      	lsls	r3, r3, #20
 80027f8:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80027fc:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 80027fe:	683a      	ldr	r2, [r7, #0]
 8002800:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002802:	4619      	mov	r1, r3
 8002804:	f7fe fe4c 	bl	80014a0 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002808:	683b      	ldr	r3, [r7, #0]
 800280a:	681a      	ldr	r2, [r3, #0]
 800280c:	4b09      	ldr	r3, [pc, #36]	; (8002834 <HAL_ADC_ConfigChannel+0x6e0>)
 800280e:	4013      	ands	r3, r2
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 80be 	beq.w	8002992 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800281e:	d004      	beq.n	800282a <HAL_ADC_ConfigChannel+0x6d6>
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	4a04      	ldr	r2, [pc, #16]	; (8002838 <HAL_ADC_ConfigChannel+0x6e4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d10a      	bne.n	8002840 <HAL_ADC_ConfigChannel+0x6ec>
 800282a:	4b04      	ldr	r3, [pc, #16]	; (800283c <HAL_ADC_ConfigChannel+0x6e8>)
 800282c:	e009      	b.n	8002842 <HAL_ADC_ConfigChannel+0x6ee>
 800282e:	bf00      	nop
 8002830:	407f0000 	.word	0x407f0000
 8002834:	80080000 	.word	0x80080000
 8002838:	50000100 	.word	0x50000100
 800283c:	50000300 	.word	0x50000300
 8002840:	4b59      	ldr	r3, [pc, #356]	; (80029a8 <HAL_ADC_ConfigChannel+0x854>)
 8002842:	4618      	mov	r0, r3
 8002844:	f7fe fd2e 	bl	80012a4 <LL_ADC_GetCommonPathInternalCh>
 8002848:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4a56      	ldr	r2, [pc, #344]	; (80029ac <HAL_ADC_ConfigChannel+0x858>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d004      	beq.n	8002860 <HAL_ADC_ConfigChannel+0x70c>
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a55      	ldr	r2, [pc, #340]	; (80029b0 <HAL_ADC_ConfigChannel+0x85c>)
 800285c:	4293      	cmp	r3, r2
 800285e:	d13a      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002860:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002864:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002868:	2b00      	cmp	r3, #0
 800286a:	d134      	bne.n	80028d6 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002874:	d005      	beq.n	8002882 <HAL_ADC_ConfigChannel+0x72e>
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a4e      	ldr	r2, [pc, #312]	; (80029b4 <HAL_ADC_ConfigChannel+0x860>)
 800287c:	4293      	cmp	r3, r2
 800287e:	f040 8085 	bne.w	800298c <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800288a:	d004      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x742>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	4a49      	ldr	r2, [pc, #292]	; (80029b8 <HAL_ADC_ConfigChannel+0x864>)
 8002892:	4293      	cmp	r3, r2
 8002894:	d101      	bne.n	800289a <HAL_ADC_ConfigChannel+0x746>
 8002896:	4a49      	ldr	r2, [pc, #292]	; (80029bc <HAL_ADC_ConfigChannel+0x868>)
 8002898:	e000      	b.n	800289c <HAL_ADC_ConfigChannel+0x748>
 800289a:	4a43      	ldr	r2, [pc, #268]	; (80029a8 <HAL_ADC_ConfigChannel+0x854>)
 800289c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028a0:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f7fe fce9 	bl	800127e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80028ac:	4b44      	ldr	r3, [pc, #272]	; (80029c0 <HAL_ADC_ConfigChannel+0x86c>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	099b      	lsrs	r3, r3, #6
 80028b2:	4a44      	ldr	r2, [pc, #272]	; (80029c4 <HAL_ADC_ConfigChannel+0x870>)
 80028b4:	fba2 2303 	umull	r2, r3, r2, r3
 80028b8:	099b      	lsrs	r3, r3, #6
 80028ba:	1c5a      	adds	r2, r3, #1
 80028bc:	4613      	mov	r3, r2
 80028be:	005b      	lsls	r3, r3, #1
 80028c0:	4413      	add	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028c6:	e002      	b.n	80028ce <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	3b01      	subs	r3, #1
 80028cc:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d1f9      	bne.n	80028c8 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028d4:	e05a      	b.n	800298c <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4a3b      	ldr	r2, [pc, #236]	; (80029c8 <HAL_ADC_ConfigChannel+0x874>)
 80028dc:	4293      	cmp	r3, r2
 80028de:	d125      	bne.n	800292c <HAL_ADC_ConfigChannel+0x7d8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 80028e0:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80028e4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d11f      	bne.n	800292c <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a31      	ldr	r2, [pc, #196]	; (80029b8 <HAL_ADC_ConfigChannel+0x864>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d104      	bne.n	8002900 <HAL_ADC_ConfigChannel+0x7ac>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4a34      	ldr	r2, [pc, #208]	; (80029cc <HAL_ADC_ConfigChannel+0x878>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d047      	beq.n	8002990 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002908:	d004      	beq.n	8002914 <HAL_ADC_ConfigChannel+0x7c0>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4a2a      	ldr	r2, [pc, #168]	; (80029b8 <HAL_ADC_ConfigChannel+0x864>)
 8002910:	4293      	cmp	r3, r2
 8002912:	d101      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x7c4>
 8002914:	4a29      	ldr	r2, [pc, #164]	; (80029bc <HAL_ADC_ConfigChannel+0x868>)
 8002916:	e000      	b.n	800291a <HAL_ADC_ConfigChannel+0x7c6>
 8002918:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <HAL_ADC_ConfigChannel+0x854>)
 800291a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800291e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002922:	4619      	mov	r1, r3
 8002924:	4610      	mov	r0, r2
 8002926:	f7fe fcaa 	bl	800127e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800292a:	e031      	b.n	8002990 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	4a27      	ldr	r2, [pc, #156]	; (80029d0 <HAL_ADC_ConfigChannel+0x87c>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d12d      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002936:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800293a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800293e:	2b00      	cmp	r3, #0
 8002940:	d127      	bne.n	8002992 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	4a1c      	ldr	r2, [pc, #112]	; (80029b8 <HAL_ADC_ConfigChannel+0x864>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d022      	beq.n	8002992 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002954:	d004      	beq.n	8002960 <HAL_ADC_ConfigChannel+0x80c>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a17      	ldr	r2, [pc, #92]	; (80029b8 <HAL_ADC_ConfigChannel+0x864>)
 800295c:	4293      	cmp	r3, r2
 800295e:	d101      	bne.n	8002964 <HAL_ADC_ConfigChannel+0x810>
 8002960:	4a16      	ldr	r2, [pc, #88]	; (80029bc <HAL_ADC_ConfigChannel+0x868>)
 8002962:	e000      	b.n	8002966 <HAL_ADC_ConfigChannel+0x812>
 8002964:	4a10      	ldr	r2, [pc, #64]	; (80029a8 <HAL_ADC_ConfigChannel+0x854>)
 8002966:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800296a:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800296e:	4619      	mov	r1, r3
 8002970:	4610      	mov	r0, r2
 8002972:	f7fe fc84 	bl	800127e <LL_ADC_SetCommonPathInternalCh>
 8002976:	e00c      	b.n	8002992 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800297c:	f043 0220 	orr.w	r2, r3, #32
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 800298a:	e002      	b.n	8002992 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800298c:	bf00      	nop
 800298e:	e000      	b.n	8002992 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002990:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800299a:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 800299e:	4618      	mov	r0, r3
 80029a0:	37d8      	adds	r7, #216	; 0xd8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	50000700 	.word	0x50000700
 80029ac:	c3210000 	.word	0xc3210000
 80029b0:	90c00010 	.word	0x90c00010
 80029b4:	50000600 	.word	0x50000600
 80029b8:	50000100 	.word	0x50000100
 80029bc:	50000300 	.word	0x50000300
 80029c0:	20000000 	.word	0x20000000
 80029c4:	053e2d63 	.word	0x053e2d63
 80029c8:	c7520000 	.word	0xc7520000
 80029cc:	50000500 	.word	0x50000500
 80029d0:	cb840000 	.word	0xcb840000

080029d4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80029d4:	b580      	push	{r7, lr}
 80029d6:	b084      	sub	sp, #16
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 80029dc:	2300      	movs	r3, #0
 80029de:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4618      	mov	r0, r3
 80029e6:	f7fe fe3d 	bl	8001664 <LL_ADC_IsEnabled>
 80029ea:	4603      	mov	r3, r0
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d176      	bne.n	8002ade <ADC_Enable+0x10a>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	689a      	ldr	r2, [r3, #8]
 80029f6:	4b3c      	ldr	r3, [pc, #240]	; (8002ae8 <ADC_Enable+0x114>)
 80029f8:	4013      	ands	r3, r2
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00d      	beq.n	8002a1a <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002a02:	f043 0210 	orr.w	r2, r3, #16
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8002a16:	2301      	movs	r3, #1
 8002a18:	e062      	b.n	8002ae0 <ADC_Enable+0x10c>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	4618      	mov	r0, r3
 8002a20:	f7fe fdf8 	bl	8001614 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a2c:	d004      	beq.n	8002a38 <ADC_Enable+0x64>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4a2e      	ldr	r2, [pc, #184]	; (8002aec <ADC_Enable+0x118>)
 8002a34:	4293      	cmp	r3, r2
 8002a36:	d101      	bne.n	8002a3c <ADC_Enable+0x68>
 8002a38:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <ADC_Enable+0x11c>)
 8002a3a:	e000      	b.n	8002a3e <ADC_Enable+0x6a>
 8002a3c:	4b2d      	ldr	r3, [pc, #180]	; (8002af4 <ADC_Enable+0x120>)
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7fe fc30 	bl	80012a4 <LL_ADC_GetCommonPathInternalCh>
 8002a44:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002a46:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d013      	beq.n	8002a76 <ADC_Enable+0xa2>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002a4e:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <ADC_Enable+0x124>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	099b      	lsrs	r3, r3, #6
 8002a54:	4a29      	ldr	r2, [pc, #164]	; (8002afc <ADC_Enable+0x128>)
 8002a56:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5a:	099b      	lsrs	r3, r3, #6
 8002a5c:	1c5a      	adds	r2, r3, #1
 8002a5e:	4613      	mov	r3, r2
 8002a60:	005b      	lsls	r3, r3, #1
 8002a62:	4413      	add	r3, r2
 8002a64:	009b      	lsls	r3, r3, #2
 8002a66:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a68:	e002      	b.n	8002a70 <ADC_Enable+0x9c>
      {
        wait_loop_index--;
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	3b01      	subs	r3, #1
 8002a6e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d1f9      	bne.n	8002a6a <ADC_Enable+0x96>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002a76:	f7fe fbe3 	bl	8001240 <HAL_GetTick>
 8002a7a:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002a7c:	e028      	b.n	8002ad0 <ADC_Enable+0xfc>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4618      	mov	r0, r3
 8002a84:	f7fe fdee 	bl	8001664 <LL_ADC_IsEnabled>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d104      	bne.n	8002a98 <ADC_Enable+0xc4>
      {
        LL_ADC_Enable(hadc->Instance);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe fdbe 	bl	8001614 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002a98:	f7fe fbd2 	bl	8001240 <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d914      	bls.n	8002ad0 <ADC_Enable+0xfc>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d00d      	beq.n	8002ad0 <ADC_Enable+0xfc>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ab8:	f043 0210 	orr.w	r2, r3, #16
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ac4:	f043 0201 	orr.w	r2, r3, #1
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e007      	b.n	8002ae0 <ADC_Enable+0x10c>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f003 0301 	and.w	r3, r3, #1
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d1cf      	bne.n	8002a7e <ADC_Enable+0xaa>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002ade:	2300      	movs	r3, #0
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	3710      	adds	r7, #16
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bd80      	pop	{r7, pc}
 8002ae8:	8000003f 	.word	0x8000003f
 8002aec:	50000100 	.word	0x50000100
 8002af0:	50000300 	.word	0x50000300
 8002af4:	50000700 	.word	0x50000700
 8002af8:	20000000 	.word	0x20000000
 8002afc:	053e2d63 	.word	0x053e2d63

08002b00 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8002b00:	b580      	push	{r7, lr}
 8002b02:	b084      	sub	sp, #16
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f7fe fdbc 	bl	800168a <LL_ADC_IsDisableOngoing>
 8002b12:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f7fe fda3 	bl	8001664 <LL_ADC_IsEnabled>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d047      	beq.n	8002bb4 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	d144      	bne.n	8002bb4 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689b      	ldr	r3, [r3, #8]
 8002b30:	f003 030d 	and.w	r3, r3, #13
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	d10c      	bne.n	8002b52 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	4618      	mov	r0, r3
 8002b3e:	f7fe fd7d 	bl	800163c <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	2203      	movs	r2, #3
 8002b48:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe fb79 	bl	8001240 <HAL_GetTick>
 8002b4e:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b50:	e029      	b.n	8002ba6 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b56:	f043 0210 	orr.w	r2, r3, #16
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b62:	f043 0201 	orr.w	r2, r3, #1
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	e023      	b.n	8002bb6 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002b6e:	f7fe fb67 	bl	8001240 <HAL_GetTick>
 8002b72:	4602      	mov	r2, r0
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	1ad3      	subs	r3, r2, r3
 8002b78:	2b02      	cmp	r3, #2
 8002b7a:	d914      	bls.n	8002ba6 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	f003 0301 	and.w	r3, r3, #1
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d00d      	beq.n	8002ba6 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b8e:	f043 0210 	orr.w	r2, r3, #16
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002b9a:	f043 0201 	orr.w	r2, r3, #1
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e007      	b.n	8002bb6 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	f003 0301 	and.w	r3, r3, #1
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d1dc      	bne.n	8002b6e <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002bb4:	2300      	movs	r3, #0
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3710      	adds	r7, #16
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}

08002bbe <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8002bbe:	b580      	push	{r7, lr}
 8002bc0:	b084      	sub	sp, #16
 8002bc2:	af00      	add	r7, sp, #0
 8002bc4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bca:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bd0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d14b      	bne.n	8002c70 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bdc:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f003 0308 	and.w	r3, r3, #8
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d021      	beq.n	8002c36 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	4618      	mov	r0, r3
 8002bf8:	f7fe fc00 	bl	80013fc <LL_ADC_REG_IsTriggerSourceSWStart>
 8002bfc:	4603      	mov	r3, r0
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d032      	beq.n	8002c68 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d12b      	bne.n	8002c68 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c14:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c20:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d11f      	bne.n	8002c68 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c2c:	f043 0201 	orr.w	r2, r3, #1
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	65da      	str	r2, [r3, #92]	; 0x5c
 8002c34:	e018      	b.n	8002c68 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	68db      	ldr	r3, [r3, #12]
 8002c3c:	f003 0302 	and.w	r3, r3, #2
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d111      	bne.n	8002c68 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c48:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c54:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d105      	bne.n	8002c68 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c60:	f043 0201 	orr.w	r2, r3, #1
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002c68:	68f8      	ldr	r0, [r7, #12]
 8002c6a:	f7ff fa4b 	bl	8002104 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8002c6e:	e00e      	b.n	8002c8e <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c74:	f003 0310 	and.w	r3, r3, #16
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d003      	beq.n	8002c84 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8002c7c:	68f8      	ldr	r0, [r7, #12]
 8002c7e:	f7ff fa5f 	bl	8002140 <HAL_ADC_ErrorCallback>
}
 8002c82:	e004      	b.n	8002c8e <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002c88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	4798      	blx	r3
}
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}

08002c96 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b084      	sub	sp, #16
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f7ff fa37 	bl	8002118 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002caa:	bf00      	nop
 8002cac:	3710      	adds	r7, #16
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	bd80      	pop	{r7, pc}

08002cb2 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8002cb2:	b580      	push	{r7, lr}
 8002cb4:	b084      	sub	sp, #16
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cbe:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cc4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002cd0:	f043 0204 	orr.w	r2, r3, #4
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f7ff fa31 	bl	8002140 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8002cde:	bf00      	nop
 8002ce0:	3710      	adds	r7, #16
 8002ce2:	46bd      	mov	sp, r7
 8002ce4:	bd80      	pop	{r7, pc}

08002ce6 <LL_ADC_IsEnabled>:
{
 8002ce6:	b480      	push	{r7}
 8002ce8:	b083      	sub	sp, #12
 8002cea:	af00      	add	r7, sp, #0
 8002cec:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	689b      	ldr	r3, [r3, #8]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d101      	bne.n	8002cfe <LL_ADC_IsEnabled+0x18>
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e000      	b.n	8002d00 <LL_ADC_IsEnabled+0x1a>
 8002cfe:	2300      	movs	r3, #0
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	370c      	adds	r7, #12
 8002d04:	46bd      	mov	sp, r7
 8002d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d0a:	4770      	bx	lr

08002d0c <LL_ADC_StartCalibration>:
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b083      	sub	sp, #12
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
 8002d14:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	689b      	ldr	r3, [r3, #8]
 8002d1a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8002d1e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002d28:	4313      	orrs	r3, r2
 8002d2a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	609a      	str	r2, [r3, #8]
}
 8002d32:	bf00      	nop
 8002d34:	370c      	adds	r7, #12
 8002d36:	46bd      	mov	sp, r7
 8002d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3c:	4770      	bx	lr

08002d3e <LL_ADC_IsCalibrationOnGoing>:
{
 8002d3e:	b480      	push	{r7}
 8002d40:	b083      	sub	sp, #12
 8002d42:	af00      	add	r7, sp, #0
 8002d44:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002d4e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002d52:	d101      	bne.n	8002d58 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8002d54:	2301      	movs	r3, #1
 8002d56:	e000      	b.n	8002d5a <LL_ADC_IsCalibrationOnGoing+0x1c>
 8002d58:	2300      	movs	r3, #0
}
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	370c      	adds	r7, #12
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d64:	4770      	bx	lr

08002d66 <LL_ADC_REG_IsConversionOngoing>:
{
 8002d66:	b480      	push	{r7}
 8002d68:	b083      	sub	sp, #12
 8002d6a:	af00      	add	r7, sp, #0
 8002d6c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f003 0304 	and.w	r3, r3, #4
 8002d76:	2b04      	cmp	r3, #4
 8002d78:	d101      	bne.n	8002d7e <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	e000      	b.n	8002d80 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d7e:	2300      	movs	r3, #0
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_ADCEx_Calibration_Start+0x1c>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e04d      	b.n	8002e44 <HAL_ADCEx_Calibration_Start+0xb8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8002db0:	6878      	ldr	r0, [r7, #4]
 8002db2:	f7ff fea5 	bl	8002b00 <ADC_Disable>
 8002db6:	4603      	mov	r3, r0
 8002db8:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8002dba:	7bfb      	ldrb	r3, [r7, #15]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d136      	bne.n	8002e2e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc4:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002dc8:	f023 0302 	bic.w	r3, r3, #2
 8002dcc:	f043 0202 	orr.w	r2, r3, #2
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	6839      	ldr	r1, [r7, #0]
 8002dda:	4618      	mov	r0, r3
 8002ddc:	f7ff ff96 	bl	8002d0c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002de0:	e014      	b.n	8002e0c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8002de2:	68bb      	ldr	r3, [r7, #8]
 8002de4:	3301      	adds	r3, #1
 8002de6:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8002de8:	68bb      	ldr	r3, [r7, #8]
 8002dea:	4a18      	ldr	r2, [pc, #96]	; (8002e4c <HAL_ADCEx_Calibration_Start+0xc0>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d90d      	bls.n	8002e0c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002df4:	f023 0312 	bic.w	r3, r3, #18
 8002df8:	f043 0210 	orr.w	r2, r3, #16
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	2200      	movs	r2, #0
 8002e04:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e01b      	b.n	8002e44 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f7ff ff94 	bl	8002d3e <LL_ADC_IsCalibrationOnGoing>
 8002e16:	4603      	mov	r3, r0
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d1e2      	bne.n	8002de2 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e20:	f023 0303 	bic.w	r3, r3, #3
 8002e24:	f043 0201 	orr.w	r2, r3, #1
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	65da      	str	r2, [r3, #92]	; 0x5c
 8002e2c:	e005      	b.n	8002e3a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e32:	f043 0210 	orr.w	r2, r3, #16
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002e42:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e44:	4618      	mov	r0, r3
 8002e46:	3710      	adds	r7, #16
 8002e48:	46bd      	mov	sp, r7
 8002e4a:	bd80      	pop	{r7, pc}
 8002e4c:	0004de01 	.word	0x0004de01

08002e50 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002e50:	b480      	push	{r7}
 8002e52:	b083      	sub	sp, #12
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8002e58:	bf00      	nop
 8002e5a:	370c      	adds	r7, #12
 8002e5c:	46bd      	mov	sp, r7
 8002e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e62:	4770      	bx	lr

08002e64 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8002e64:	b480      	push	{r7}
 8002e66:	b083      	sub	sp, #12
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002e6c:	bf00      	nop
 8002e6e:	370c      	adds	r7, #12
 8002e70:	46bd      	mov	sp, r7
 8002e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e76:	4770      	bx	lr

08002e78 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b083      	sub	sp, #12
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002e80:	bf00      	nop
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr

08002e8c <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e9e:	4770      	bx	lr

08002ea0 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	b083      	sub	sp, #12
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002ea8:	bf00      	nop
 8002eaa:	370c      	adds	r7, #12
 8002eac:	46bd      	mov	sp, r7
 8002eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb2:	4770      	bx	lr

08002eb4 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8002eb4:	b590      	push	{r4, r7, lr}
 8002eb6:	b0a1      	sub	sp, #132	; 0x84
 8002eb8:	af00      	add	r7, sp, #0
 8002eba:	6078      	str	r0, [r7, #4]
 8002ebc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002eca:	2b01      	cmp	r3, #1
 8002ecc:	d101      	bne.n	8002ed2 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002ece:	2302      	movs	r3, #2
 8002ed0:	e0e7      	b.n	80030a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8002eda:	2300      	movs	r3, #0
 8002edc:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8002ede:	2300      	movs	r3, #0
 8002ee0:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eea:	d102      	bne.n	8002ef2 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002eec:	4b6f      	ldr	r3, [pc, #444]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002eee:	60bb      	str	r3, [r7, #8]
 8002ef0:	e009      	b.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4a6e      	ldr	r2, [pc, #440]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ef8:	4293      	cmp	r3, r2
 8002efa:	d102      	bne.n	8002f02 <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002efc:	4b6d      	ldr	r3, [pc, #436]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002efe:	60bb      	str	r3, [r7, #8]
 8002f00:	e001      	b.n	8002f06 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002f02:	2300      	movs	r3, #0
 8002f04:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 8002f06:	68bb      	ldr	r3, [r7, #8]
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d10b      	bne.n	8002f24 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f10:	f043 0220 	orr.w	r2, r3, #32
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	2200      	movs	r2, #0
 8002f1c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8002f20:	2301      	movs	r3, #1
 8002f22:	e0be      	b.n	80030a2 <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7ff ff1d 	bl	8002d66 <LL_ADC_REG_IsConversionOngoing>
 8002f2c:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7ff ff17 	bl	8002d66 <LL_ADC_REG_IsConversionOngoing>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	f040 80a0 	bne.w	8003080 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 8002f40:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	f040 809c 	bne.w	8003080 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f50:	d004      	beq.n	8002f5c <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a55      	ldr	r2, [pc, #340]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d101      	bne.n	8002f60 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002f5c:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8002f5e:	e000      	b.n	8002f62 <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002f60:	4b56      	ldr	r3, [pc, #344]	; (80030bc <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8002f62:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d04b      	beq.n	8003004 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002f6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f6e:	689b      	ldr	r3, [r3, #8]
 8002f70:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6859      	ldr	r1, [r3, #4]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002f7e:	035b      	lsls	r3, r3, #13
 8002f80:	430b      	orrs	r3, r1
 8002f82:	431a      	orrs	r2, r3
 8002f84:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002f86:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f90:	d004      	beq.n	8002f9c <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a45      	ldr	r2, [pc, #276]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002f98:	4293      	cmp	r3, r2
 8002f9a:	d10f      	bne.n	8002fbc <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002f9c:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002fa0:	f7ff fea1 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002fa4:	4604      	mov	r4, r0
 8002fa6:	4841      	ldr	r0, [pc, #260]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002fa8:	f7ff fe9d 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002fac:	4603      	mov	r3, r0
 8002fae:	4323      	orrs	r3, r4
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	bf0c      	ite	eq
 8002fb4:	2301      	moveq	r3, #1
 8002fb6:	2300      	movne	r3, #0
 8002fb8:	b2db      	uxtb	r3, r3
 8002fba:	e012      	b.n	8002fe2 <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002fbc:	483c      	ldr	r0, [pc, #240]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002fbe:	f7ff fe92 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002fc2:	4604      	mov	r4, r0
 8002fc4:	483b      	ldr	r0, [pc, #236]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002fc6:	f7ff fe8e 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002fca:	4603      	mov	r3, r0
 8002fcc:	431c      	orrs	r4, r3
 8002fce:	483c      	ldr	r0, [pc, #240]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002fd0:	f7ff fe89 	bl	8002ce6 <LL_ADC_IsEnabled>
 8002fd4:	4603      	mov	r3, r0
 8002fd6:	4323      	orrs	r3, r4
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	bf0c      	ite	eq
 8002fdc:	2301      	moveq	r3, #1
 8002fde:	2300      	movne	r3, #0
 8002fe0:	b2db      	uxtb	r3, r3
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d056      	beq.n	8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002fe8:	689b      	ldr	r3, [r3, #8]
 8002fea:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002fee:	f023 030f 	bic.w	r3, r3, #15
 8002ff2:	683a      	ldr	r2, [r7, #0]
 8002ff4:	6811      	ldr	r1, [r2, #0]
 8002ff6:	683a      	ldr	r2, [r7, #0]
 8002ff8:	6892      	ldr	r2, [r2, #8]
 8002ffa:	430a      	orrs	r2, r1
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003000:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003002:	e047      	b.n	8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003004:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800300c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800300e:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003018:	d004      	beq.n	8003024 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a23      	ldr	r2, [pc, #140]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003020:	4293      	cmp	r3, r2
 8003022:	d10f      	bne.n	8003044 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003024:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003028:	f7ff fe5d 	bl	8002ce6 <LL_ADC_IsEnabled>
 800302c:	4604      	mov	r4, r0
 800302e:	481f      	ldr	r0, [pc, #124]	; (80030ac <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003030:	f7ff fe59 	bl	8002ce6 <LL_ADC_IsEnabled>
 8003034:	4603      	mov	r3, r0
 8003036:	4323      	orrs	r3, r4
 8003038:	2b00      	cmp	r3, #0
 800303a:	bf0c      	ite	eq
 800303c:	2301      	moveq	r3, #1
 800303e:	2300      	movne	r3, #0
 8003040:	b2db      	uxtb	r3, r3
 8003042:	e012      	b.n	800306a <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003044:	481a      	ldr	r0, [pc, #104]	; (80030b0 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003046:	f7ff fe4e 	bl	8002ce6 <LL_ADC_IsEnabled>
 800304a:	4604      	mov	r4, r0
 800304c:	4819      	ldr	r0, [pc, #100]	; (80030b4 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800304e:	f7ff fe4a 	bl	8002ce6 <LL_ADC_IsEnabled>
 8003052:	4603      	mov	r3, r0
 8003054:	431c      	orrs	r4, r3
 8003056:	481a      	ldr	r0, [pc, #104]	; (80030c0 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003058:	f7ff fe45 	bl	8002ce6 <LL_ADC_IsEnabled>
 800305c:	4603      	mov	r3, r0
 800305e:	4323      	orrs	r3, r4
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf0c      	ite	eq
 8003064:	2301      	moveq	r3, #1
 8003066:	2300      	movne	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	2b00      	cmp	r3, #0
 800306c:	d012      	beq.n	8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800306e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003070:	689b      	ldr	r3, [r3, #8]
 8003072:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003076:	f023 030f 	bic.w	r3, r3, #15
 800307a:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800307c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800307e:	e009      	b.n	8003094 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003084:	f043 0220 	orr.w	r2, r3, #32
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003092:	e000      	b.n	8003096 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003094:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	2200      	movs	r2, #0
 800309a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 800309e:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	3784      	adds	r7, #132	; 0x84
 80030a6:	46bd      	mov	sp, r7
 80030a8:	bd90      	pop	{r4, r7, pc}
 80030aa:	bf00      	nop
 80030ac:	50000100 	.word	0x50000100
 80030b0:	50000400 	.word	0x50000400
 80030b4:	50000500 	.word	0x50000500
 80030b8:	50000300 	.word	0x50000300
 80030bc:	50000700 	.word	0x50000700
 80030c0:	50000600 	.word	0x50000600

080030c4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80030c4:	b480      	push	{r7}
 80030c6:	b085      	sub	sp, #20
 80030c8:	af00      	add	r7, sp, #0
 80030ca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f003 0307 	and.w	r3, r3, #7
 80030d2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80030d4:	4b0c      	ldr	r3, [pc, #48]	; (8003108 <__NVIC_SetPriorityGrouping+0x44>)
 80030d6:	68db      	ldr	r3, [r3, #12]
 80030d8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80030da:	68ba      	ldr	r2, [r7, #8]
 80030dc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80030e0:	4013      	ands	r3, r2
 80030e2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80030ec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80030f0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80030f6:	4a04      	ldr	r2, [pc, #16]	; (8003108 <__NVIC_SetPriorityGrouping+0x44>)
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	60d3      	str	r3, [r2, #12]
}
 80030fc:	bf00      	nop
 80030fe:	3714      	adds	r7, #20
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr
 8003108:	e000ed00 	.word	0xe000ed00

0800310c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800310c:	b480      	push	{r7}
 800310e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003110:	4b04      	ldr	r3, [pc, #16]	; (8003124 <__NVIC_GetPriorityGrouping+0x18>)
 8003112:	68db      	ldr	r3, [r3, #12]
 8003114:	0a1b      	lsrs	r3, r3, #8
 8003116:	f003 0307 	and.w	r3, r3, #7
}
 800311a:	4618      	mov	r0, r3
 800311c:	46bd      	mov	sp, r7
 800311e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003122:	4770      	bx	lr
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003128:	b480      	push	{r7}
 800312a:	b083      	sub	sp, #12
 800312c:	af00      	add	r7, sp, #0
 800312e:	4603      	mov	r3, r0
 8003130:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003136:	2b00      	cmp	r3, #0
 8003138:	db0b      	blt.n	8003152 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800313a:	79fb      	ldrb	r3, [r7, #7]
 800313c:	f003 021f 	and.w	r2, r3, #31
 8003140:	4907      	ldr	r1, [pc, #28]	; (8003160 <__NVIC_EnableIRQ+0x38>)
 8003142:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003146:	095b      	lsrs	r3, r3, #5
 8003148:	2001      	movs	r0, #1
 800314a:	fa00 f202 	lsl.w	r2, r0, r2
 800314e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003152:	bf00      	nop
 8003154:	370c      	adds	r7, #12
 8003156:	46bd      	mov	sp, r7
 8003158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800315c:	4770      	bx	lr
 800315e:	bf00      	nop
 8003160:	e000e100 	.word	0xe000e100

08003164 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003164:	b480      	push	{r7}
 8003166:	b083      	sub	sp, #12
 8003168:	af00      	add	r7, sp, #0
 800316a:	4603      	mov	r3, r0
 800316c:	6039      	str	r1, [r7, #0]
 800316e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003170:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003174:	2b00      	cmp	r3, #0
 8003176:	db0a      	blt.n	800318e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	b2da      	uxtb	r2, r3
 800317c:	490c      	ldr	r1, [pc, #48]	; (80031b0 <__NVIC_SetPriority+0x4c>)
 800317e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003182:	0112      	lsls	r2, r2, #4
 8003184:	b2d2      	uxtb	r2, r2
 8003186:	440b      	add	r3, r1
 8003188:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800318c:	e00a      	b.n	80031a4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800318e:	683b      	ldr	r3, [r7, #0]
 8003190:	b2da      	uxtb	r2, r3
 8003192:	4908      	ldr	r1, [pc, #32]	; (80031b4 <__NVIC_SetPriority+0x50>)
 8003194:	79fb      	ldrb	r3, [r7, #7]
 8003196:	f003 030f 	and.w	r3, r3, #15
 800319a:	3b04      	subs	r3, #4
 800319c:	0112      	lsls	r2, r2, #4
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	440b      	add	r3, r1
 80031a2:	761a      	strb	r2, [r3, #24]
}
 80031a4:	bf00      	nop
 80031a6:	370c      	adds	r7, #12
 80031a8:	46bd      	mov	sp, r7
 80031aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ae:	4770      	bx	lr
 80031b0:	e000e100 	.word	0xe000e100
 80031b4:	e000ed00 	.word	0xe000ed00

080031b8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b089      	sub	sp, #36	; 0x24
 80031bc:	af00      	add	r7, sp, #0
 80031be:	60f8      	str	r0, [r7, #12]
 80031c0:	60b9      	str	r1, [r7, #8]
 80031c2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f003 0307 	and.w	r3, r3, #7
 80031ca:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	f1c3 0307 	rsb	r3, r3, #7
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	bf28      	it	cs
 80031d6:	2304      	movcs	r3, #4
 80031d8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80031da:	69fb      	ldr	r3, [r7, #28]
 80031dc:	3304      	adds	r3, #4
 80031de:	2b06      	cmp	r3, #6
 80031e0:	d902      	bls.n	80031e8 <NVIC_EncodePriority+0x30>
 80031e2:	69fb      	ldr	r3, [r7, #28]
 80031e4:	3b03      	subs	r3, #3
 80031e6:	e000      	b.n	80031ea <NVIC_EncodePriority+0x32>
 80031e8:	2300      	movs	r3, #0
 80031ea:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80031ec:	f04f 32ff 	mov.w	r2, #4294967295
 80031f0:	69bb      	ldr	r3, [r7, #24]
 80031f2:	fa02 f303 	lsl.w	r3, r2, r3
 80031f6:	43da      	mvns	r2, r3
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	401a      	ands	r2, r3
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003200:	f04f 31ff 	mov.w	r1, #4294967295
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	fa01 f303 	lsl.w	r3, r1, r3
 800320a:	43d9      	mvns	r1, r3
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003210:	4313      	orrs	r3, r2
         );
}
 8003212:	4618      	mov	r0, r3
 8003214:	3724      	adds	r7, #36	; 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
	...

08003220 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003220:	b580      	push	{r7, lr}
 8003222:	b082      	sub	sp, #8
 8003224:	af00      	add	r7, sp, #0
 8003226:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	3b01      	subs	r3, #1
 800322c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003230:	d301      	bcc.n	8003236 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003232:	2301      	movs	r3, #1
 8003234:	e00f      	b.n	8003256 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003236:	4a0a      	ldr	r2, [pc, #40]	; (8003260 <SysTick_Config+0x40>)
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	3b01      	subs	r3, #1
 800323c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800323e:	210f      	movs	r1, #15
 8003240:	f04f 30ff 	mov.w	r0, #4294967295
 8003244:	f7ff ff8e 	bl	8003164 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003248:	4b05      	ldr	r3, [pc, #20]	; (8003260 <SysTick_Config+0x40>)
 800324a:	2200      	movs	r2, #0
 800324c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800324e:	4b04      	ldr	r3, [pc, #16]	; (8003260 <SysTick_Config+0x40>)
 8003250:	2207      	movs	r2, #7
 8003252:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003254:	2300      	movs	r3, #0
}
 8003256:	4618      	mov	r0, r3
 8003258:	3708      	adds	r7, #8
 800325a:	46bd      	mov	sp, r7
 800325c:	bd80      	pop	{r7, pc}
 800325e:	bf00      	nop
 8003260:	e000e010 	.word	0xe000e010

08003264 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003264:	b580      	push	{r7, lr}
 8003266:	b082      	sub	sp, #8
 8003268:	af00      	add	r7, sp, #0
 800326a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800326c:	6878      	ldr	r0, [r7, #4]
 800326e:	f7ff ff29 	bl	80030c4 <__NVIC_SetPriorityGrouping>
}
 8003272:	bf00      	nop
 8003274:	3708      	adds	r7, #8
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}

0800327a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800327a:	b580      	push	{r7, lr}
 800327c:	b086      	sub	sp, #24
 800327e:	af00      	add	r7, sp, #0
 8003280:	4603      	mov	r3, r0
 8003282:	60b9      	str	r1, [r7, #8]
 8003284:	607a      	str	r2, [r7, #4]
 8003286:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8003288:	f7ff ff40 	bl	800310c <__NVIC_GetPriorityGrouping>
 800328c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800328e:	687a      	ldr	r2, [r7, #4]
 8003290:	68b9      	ldr	r1, [r7, #8]
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	f7ff ff90 	bl	80031b8 <NVIC_EncodePriority>
 8003298:	4602      	mov	r2, r0
 800329a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800329e:	4611      	mov	r1, r2
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7ff ff5f 	bl	8003164 <__NVIC_SetPriority>
}
 80032a6:	bf00      	nop
 80032a8:	3718      	adds	r7, #24
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}

080032ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80032ae:	b580      	push	{r7, lr}
 80032b0:	b082      	sub	sp, #8
 80032b2:	af00      	add	r7, sp, #0
 80032b4:	4603      	mov	r3, r0
 80032b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80032b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032bc:	4618      	mov	r0, r3
 80032be:	f7ff ff33 	bl	8003128 <__NVIC_EnableIRQ>
}
 80032c2:	bf00      	nop
 80032c4:	3708      	adds	r7, #8
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f7ff ffa4 	bl	8003220 <SysTick_Config>
 80032d8:	4603      	mov	r3, r0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3708      	adds	r7, #8
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
	...

080032e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80032f2:	2301      	movs	r3, #1
 80032f4:	e08d      	b.n	8003412 <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	461a      	mov	r2, r3
 80032fc:	4b47      	ldr	r3, [pc, #284]	; (800341c <HAL_DMA_Init+0x138>)
 80032fe:	429a      	cmp	r2, r3
 8003300:	d80f      	bhi.n	8003322 <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	461a      	mov	r2, r3
 8003308:	4b45      	ldr	r3, [pc, #276]	; (8003420 <HAL_DMA_Init+0x13c>)
 800330a:	4413      	add	r3, r2
 800330c:	4a45      	ldr	r2, [pc, #276]	; (8003424 <HAL_DMA_Init+0x140>)
 800330e:	fba2 2303 	umull	r2, r3, r2, r3
 8003312:	091b      	lsrs	r3, r3, #4
 8003314:	009a      	lsls	r2, r3, #2
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	4a42      	ldr	r2, [pc, #264]	; (8003428 <HAL_DMA_Init+0x144>)
 800331e:	641a      	str	r2, [r3, #64]	; 0x40
 8003320:	e00e      	b.n	8003340 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	461a      	mov	r2, r3
 8003328:	4b40      	ldr	r3, [pc, #256]	; (800342c <HAL_DMA_Init+0x148>)
 800332a:	4413      	add	r3, r2
 800332c:	4a3d      	ldr	r2, [pc, #244]	; (8003424 <HAL_DMA_Init+0x140>)
 800332e:	fba2 2303 	umull	r2, r3, r2, r3
 8003332:	091b      	lsrs	r3, r3, #4
 8003334:	009a      	lsls	r2, r3, #2
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a3c      	ldr	r2, [pc, #240]	; (8003430 <HAL_DMA_Init+0x14c>)
 800333e:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 8003356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800335a:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003364:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	691b      	ldr	r3, [r3, #16]
 800336a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003370:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800337c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a1b      	ldr	r3, [r3, #32]
 8003382:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003384:	68fa      	ldr	r2, [r7, #12]
 8003386:	4313      	orrs	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	68fa      	ldr	r2, [r7, #12]
 8003390:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8003392:	6878      	ldr	r0, [r7, #4]
 8003394:	f000 f9b6 	bl	8003704 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	689b      	ldr	r3, [r3, #8]
 800339c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80033a0:	d102      	bne.n	80033a8 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2200      	movs	r2, #0
 80033a6:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	685a      	ldr	r2, [r3, #4]
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80033b0:	b2d2      	uxtb	r2, r2
 80033b2:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80033b8:	687a      	ldr	r2, [r7, #4]
 80033ba:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80033bc:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d010      	beq.n	80033e8 <HAL_DMA_Init+0x104>
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d80c      	bhi.n	80033e8 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80033ce:	6878      	ldr	r0, [r7, #4]
 80033d0:	f000 f9d6 	bl	8003780 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80033d8:	2200      	movs	r2, #0
 80033da:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80033e0:	687a      	ldr	r2, [r7, #4]
 80033e2:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80033e4:	605a      	str	r2, [r3, #4]
 80033e6:	e008      	b.n	80033fa <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	2200      	movs	r2, #0
 80033ec:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2200      	movs	r2, #0
 80033f2:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	2200      	movs	r2, #0
 80033fe:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2201      	movs	r2, #1
 8003404:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003410:	2300      	movs	r3, #0
}
 8003412:	4618      	mov	r0, r3
 8003414:	3710      	adds	r7, #16
 8003416:	46bd      	mov	sp, r7
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	40020407 	.word	0x40020407
 8003420:	bffdfff8 	.word	0xbffdfff8
 8003424:	cccccccd 	.word	0xcccccccd
 8003428:	40020000 	.word	0x40020000
 800342c:	bffdfbf8 	.word	0xbffdfbf8
 8003430:	40020400 	.word	0x40020400

08003434 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 8003434:	b580      	push	{r7, lr}
 8003436:	b086      	sub	sp, #24
 8003438:	af00      	add	r7, sp, #0
 800343a:	60f8      	str	r0, [r7, #12]
 800343c:	60b9      	str	r1, [r7, #8]
 800343e:	607a      	str	r2, [r7, #4]
 8003440:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003442:	2300      	movs	r3, #0
 8003444:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800344c:	2b01      	cmp	r3, #1
 800344e:	d101      	bne.n	8003454 <HAL_DMA_Start_IT+0x20>
 8003450:	2302      	movs	r3, #2
 8003452:	e066      	b.n	8003522 <HAL_DMA_Start_IT+0xee>
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d155      	bne.n	8003514 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2202      	movs	r2, #2
 800346c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	2200      	movs	r2, #0
 8003474:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	681a      	ldr	r2, [r3, #0]
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f022 0201 	bic.w	r2, r2, #1
 8003484:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003486:	683b      	ldr	r3, [r7, #0]
 8003488:	687a      	ldr	r2, [r7, #4]
 800348a:	68b9      	ldr	r1, [r7, #8]
 800348c:	68f8      	ldr	r0, [r7, #12]
 800348e:	f000 f8fb 	bl	8003688 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003496:	2b00      	cmp	r3, #0
 8003498:	d008      	beq.n	80034ac <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	681a      	ldr	r2, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f042 020e 	orr.w	r2, r2, #14
 80034a8:	601a      	str	r2, [r3, #0]
 80034aa:	e00f      	b.n	80034cc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	681a      	ldr	r2, [r3, #0]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f022 0204 	bic.w	r2, r2, #4
 80034ba:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	f042 020a 	orr.w	r2, r2, #10
 80034ca:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d007      	beq.n	80034ea <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034de:	681a      	ldr	r2, [r3, #0]
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80034e4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80034e8:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d007      	beq.n	8003502 <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034f6:	681a      	ldr	r2, [r3, #0]
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80034fc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003500:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f042 0201 	orr.w	r2, r2, #1
 8003510:	601a      	str	r2, [r3, #0]
 8003512:	e005      	b.n	8003520 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2200      	movs	r2, #0
 8003518:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 800351c:	2302      	movs	r3, #2
 800351e:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8003520:	7dfb      	ldrb	r3, [r7, #23]
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}

0800352a <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800352a:	b580      	push	{r7, lr}
 800352c:	b084      	sub	sp, #16
 800352e:	af00      	add	r7, sp, #0
 8003530:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003546:	f003 031f 	and.w	r3, r3, #31
 800354a:	2204      	movs	r2, #4
 800354c:	409a      	lsls	r2, r3
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	4013      	ands	r3, r2
 8003552:	2b00      	cmp	r3, #0
 8003554:	d026      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x7a>
 8003556:	68bb      	ldr	r3, [r7, #8]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d021      	beq.n	80035a4 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 0320 	and.w	r3, r3, #32
 800356a:	2b00      	cmp	r3, #0
 800356c:	d107      	bne.n	800357e <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	681a      	ldr	r2, [r3, #0]
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0204 	bic.w	r2, r2, #4
 800357c:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003582:	f003 021f 	and.w	r2, r3, #31
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800358a:	2104      	movs	r1, #4
 800358c:	fa01 f202 	lsl.w	r2, r1, r2
 8003590:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003596:	2b00      	cmp	r3, #0
 8003598:	d071      	beq.n	800367e <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80035a2:	e06c      	b.n	800367e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	f003 031f 	and.w	r3, r3, #31
 80035ac:	2202      	movs	r2, #2
 80035ae:	409a      	lsls	r2, r3
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	4013      	ands	r3, r2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d02e      	beq.n	8003616 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	f003 0302 	and.w	r3, r3, #2
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d029      	beq.n	8003616 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0320 	and.w	r3, r3, #32
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d10b      	bne.n	80035e8 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	681a      	ldr	r2, [r3, #0]
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f022 020a 	bic.w	r2, r2, #10
 80035de:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	2201      	movs	r2, #1
 80035e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035ec:	f003 021f 	and.w	r2, r3, #31
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035f4:	2102      	movs	r1, #2
 80035f6:	fa01 f202 	lsl.w	r2, r1, r2
 80035fa:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	2200      	movs	r2, #0
 8003600:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003608:	2b00      	cmp	r3, #0
 800360a:	d038      	beq.n	800367e <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8003614:	e033      	b.n	800367e <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800361a:	f003 031f 	and.w	r3, r3, #31
 800361e:	2208      	movs	r2, #8
 8003620:	409a      	lsls	r2, r3
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	4013      	ands	r3, r2
 8003626:	2b00      	cmp	r3, #0
 8003628:	d02a      	beq.n	8003680 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	f003 0308 	and.w	r3, r3, #8
 8003630:	2b00      	cmp	r3, #0
 8003632:	d025      	beq.n	8003680 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	681a      	ldr	r2, [r3, #0]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	681b      	ldr	r3, [r3, #0]
 800363e:	f022 020e 	bic.w	r2, r2, #14
 8003642:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003648:	f003 021f 	and.w	r2, r3, #31
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003650:	2101      	movs	r1, #1
 8003652:	fa01 f202 	lsl.w	r2, r1, r2
 8003656:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2201      	movs	r2, #1
 800365c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	2201      	movs	r2, #1
 8003662:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	2200      	movs	r2, #0
 800366a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003672:	2b00      	cmp	r3, #0
 8003674:	d004      	beq.n	8003680 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800367a:	6878      	ldr	r0, [r7, #4]
 800367c:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800367e:	bf00      	nop
 8003680:	bf00      	nop
}
 8003682:	3710      	adds	r7, #16
 8003684:	46bd      	mov	sp, r7
 8003686:	bd80      	pop	{r7, pc}

08003688 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003688:	b480      	push	{r7}
 800368a:	b085      	sub	sp, #20
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
 8003694:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800369a:	68fa      	ldr	r2, [r7, #12]
 800369c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 800369e:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d004      	beq.n	80036b2 <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80036ac:	68fa      	ldr	r2, [r7, #12]
 80036ae:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80036b0:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036b6:	f003 021f 	and.w	r2, r3, #31
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036be:	2101      	movs	r1, #1
 80036c0:	fa01 f202 	lsl.w	r2, r1, r2
 80036c4:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	683a      	ldr	r2, [r7, #0]
 80036cc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	689b      	ldr	r3, [r3, #8]
 80036d2:	2b10      	cmp	r3, #16
 80036d4:	d108      	bne.n	80036e8 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	687a      	ldr	r2, [r7, #4]
 80036dc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	68ba      	ldr	r2, [r7, #8]
 80036e4:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80036e6:	e007      	b.n	80036f8 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68ba      	ldr	r2, [r7, #8]
 80036ee:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	687a      	ldr	r2, [r7, #4]
 80036f6:	60da      	str	r2, [r3, #12]
}
 80036f8:	bf00      	nop
 80036fa:	3714      	adds	r7, #20
 80036fc:	46bd      	mov	sp, r7
 80036fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003702:	4770      	bx	lr

08003704 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003704:	b480      	push	{r7}
 8003706:	b087      	sub	sp, #28
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	461a      	mov	r2, r3
 8003712:	4b16      	ldr	r3, [pc, #88]	; (800376c <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8003714:	429a      	cmp	r2, r3
 8003716:	d802      	bhi.n	800371e <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8003718:	4b15      	ldr	r3, [pc, #84]	; (8003770 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 800371a:	617b      	str	r3, [r7, #20]
 800371c:	e001      	b.n	8003722 <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800371e:	4b15      	ldr	r3, [pc, #84]	; (8003774 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8003720:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	b2db      	uxtb	r3, r3
 800372c:	3b08      	subs	r3, #8
 800372e:	4a12      	ldr	r2, [pc, #72]	; (8003778 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8003730:	fba2 2303 	umull	r2, r3, r2, r3
 8003734:	091b      	lsrs	r3, r3, #4
 8003736:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800373c:	089b      	lsrs	r3, r3, #2
 800373e:	009a      	lsls	r2, r3, #2
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	4413      	add	r3, r2
 8003744:	461a      	mov	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	4a0b      	ldr	r2, [pc, #44]	; (800377c <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800374e:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f003 031f 	and.w	r3, r3, #31
 8003756:	2201      	movs	r2, #1
 8003758:	409a      	lsls	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800375e:	bf00      	nop
 8003760:	371c      	adds	r7, #28
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40020407 	.word	0x40020407
 8003770:	40020800 	.word	0x40020800
 8003774:	40020820 	.word	0x40020820
 8003778:	cccccccd 	.word	0xcccccccd
 800377c:	40020880 	.word	0x40020880

08003780 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	b2db      	uxtb	r3, r3
 800378e:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8003790:	68fa      	ldr	r2, [r7, #12]
 8003792:	4b0b      	ldr	r3, [pc, #44]	; (80037c0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003794:	4413      	add	r3, r2
 8003796:	009b      	lsls	r3, r3, #2
 8003798:	461a      	mov	r2, r3
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a08      	ldr	r2, [pc, #32]	; (80037c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80037a2:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	3b01      	subs	r3, #1
 80037a8:	f003 031f 	and.w	r3, r3, #31
 80037ac:	2201      	movs	r2, #1
 80037ae:	409a      	lsls	r2, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr
 80037c0:	1000823f 	.word	0x1000823f
 80037c4:	40020940 	.word	0x40020940

080037c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80037c8:	b480      	push	{r7}
 80037ca:	b087      	sub	sp, #28
 80037cc:	af00      	add	r7, sp, #0
 80037ce:	6078      	str	r0, [r7, #4]
 80037d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80037d2:	2300      	movs	r3, #0
 80037d4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80037d6:	e15a      	b.n	8003a8e <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	2101      	movs	r1, #1
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	fa01 f303 	lsl.w	r3, r1, r3
 80037e4:	4013      	ands	r3, r2
 80037e6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	f000 814c 	beq.w	8003a88 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	685b      	ldr	r3, [r3, #4]
 80037f4:	f003 0303 	and.w	r3, r3, #3
 80037f8:	2b01      	cmp	r3, #1
 80037fa:	d005      	beq.n	8003808 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	685b      	ldr	r3, [r3, #4]
 8003800:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003804:	2b02      	cmp	r3, #2
 8003806:	d130      	bne.n	800386a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	689b      	ldr	r3, [r3, #8]
 800380c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	005b      	lsls	r3, r3, #1
 8003812:	2203      	movs	r2, #3
 8003814:	fa02 f303 	lsl.w	r3, r2, r3
 8003818:	43db      	mvns	r3, r3
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	4013      	ands	r3, r2
 800381e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	68da      	ldr	r2, [r3, #12]
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	005b      	lsls	r3, r3, #1
 8003828:	fa02 f303 	lsl.w	r3, r2, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4313      	orrs	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800383e:	2201      	movs	r2, #1
 8003840:	697b      	ldr	r3, [r7, #20]
 8003842:	fa02 f303 	lsl.w	r3, r2, r3
 8003846:	43db      	mvns	r3, r3
 8003848:	693a      	ldr	r2, [r7, #16]
 800384a:	4013      	ands	r3, r2
 800384c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800384e:	683b      	ldr	r3, [r7, #0]
 8003850:	685b      	ldr	r3, [r3, #4]
 8003852:	091b      	lsrs	r3, r3, #4
 8003854:	f003 0201 	and.w	r2, r3, #1
 8003858:	697b      	ldr	r3, [r7, #20]
 800385a:	fa02 f303 	lsl.w	r3, r2, r3
 800385e:	693a      	ldr	r2, [r7, #16]
 8003860:	4313      	orrs	r3, r2
 8003862:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	693a      	ldr	r2, [r7, #16]
 8003868:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	f003 0303 	and.w	r3, r3, #3
 8003872:	2b03      	cmp	r3, #3
 8003874:	d017      	beq.n	80038a6 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	68db      	ldr	r3, [r3, #12]
 800387a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800387c:	697b      	ldr	r3, [r7, #20]
 800387e:	005b      	lsls	r3, r3, #1
 8003880:	2203      	movs	r2, #3
 8003882:	fa02 f303 	lsl.w	r3, r2, r3
 8003886:	43db      	mvns	r3, r3
 8003888:	693a      	ldr	r2, [r7, #16]
 800388a:	4013      	ands	r3, r2
 800388c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800388e:	683b      	ldr	r3, [r7, #0]
 8003890:	689a      	ldr	r2, [r3, #8]
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	005b      	lsls	r3, r3, #1
 8003896:	fa02 f303 	lsl.w	r3, r2, r3
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	685b      	ldr	r3, [r3, #4]
 80038aa:	f003 0303 	and.w	r3, r3, #3
 80038ae:	2b02      	cmp	r3, #2
 80038b0:	d123      	bne.n	80038fa <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038b2:	697b      	ldr	r3, [r7, #20]
 80038b4:	08da      	lsrs	r2, r3, #3
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	3208      	adds	r2, #8
 80038ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038be:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038c0:	697b      	ldr	r3, [r7, #20]
 80038c2:	f003 0307 	and.w	r3, r3, #7
 80038c6:	009b      	lsls	r3, r3, #2
 80038c8:	220f      	movs	r2, #15
 80038ca:	fa02 f303 	lsl.w	r3, r2, r3
 80038ce:	43db      	mvns	r3, r3
 80038d0:	693a      	ldr	r2, [r7, #16]
 80038d2:	4013      	ands	r3, r2
 80038d4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	691a      	ldr	r2, [r3, #16]
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	f003 0307 	and.w	r3, r3, #7
 80038e0:	009b      	lsls	r3, r3, #2
 80038e2:	fa02 f303 	lsl.w	r3, r2, r3
 80038e6:	693a      	ldr	r2, [r7, #16]
 80038e8:	4313      	orrs	r3, r2
 80038ea:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	08da      	lsrs	r2, r3, #3
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	3208      	adds	r2, #8
 80038f4:	6939      	ldr	r1, [r7, #16]
 80038f6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	005b      	lsls	r3, r3, #1
 8003904:	2203      	movs	r2, #3
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	693a      	ldr	r2, [r7, #16]
 800390e:	4013      	ands	r3, r2
 8003910:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f003 0203 	and.w	r2, r3, #3
 800391a:	697b      	ldr	r3, [r7, #20]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fa02 f303 	lsl.w	r3, r2, r3
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	4313      	orrs	r3, r2
 8003926:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	693a      	ldr	r2, [r7, #16]
 800392c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	685b      	ldr	r3, [r3, #4]
 8003932:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003936:	2b00      	cmp	r3, #0
 8003938:	f000 80a6 	beq.w	8003a88 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800393c:	4b5b      	ldr	r3, [pc, #364]	; (8003aac <HAL_GPIO_Init+0x2e4>)
 800393e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003940:	4a5a      	ldr	r2, [pc, #360]	; (8003aac <HAL_GPIO_Init+0x2e4>)
 8003942:	f043 0301 	orr.w	r3, r3, #1
 8003946:	6613      	str	r3, [r2, #96]	; 0x60
 8003948:	4b58      	ldr	r3, [pc, #352]	; (8003aac <HAL_GPIO_Init+0x2e4>)
 800394a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800394c:	f003 0301 	and.w	r3, r3, #1
 8003950:	60bb      	str	r3, [r7, #8]
 8003952:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003954:	4a56      	ldr	r2, [pc, #344]	; (8003ab0 <HAL_GPIO_Init+0x2e8>)
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	089b      	lsrs	r3, r3, #2
 800395a:	3302      	adds	r3, #2
 800395c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003960:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 0303 	and.w	r3, r3, #3
 8003968:	009b      	lsls	r3, r3, #2
 800396a:	220f      	movs	r2, #15
 800396c:	fa02 f303 	lsl.w	r3, r2, r3
 8003970:	43db      	mvns	r3, r3
 8003972:	693a      	ldr	r2, [r7, #16]
 8003974:	4013      	ands	r3, r2
 8003976:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800397e:	d01f      	beq.n	80039c0 <HAL_GPIO_Init+0x1f8>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	4a4c      	ldr	r2, [pc, #304]	; (8003ab4 <HAL_GPIO_Init+0x2ec>)
 8003984:	4293      	cmp	r3, r2
 8003986:	d019      	beq.n	80039bc <HAL_GPIO_Init+0x1f4>
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	4a4b      	ldr	r2, [pc, #300]	; (8003ab8 <HAL_GPIO_Init+0x2f0>)
 800398c:	4293      	cmp	r3, r2
 800398e:	d013      	beq.n	80039b8 <HAL_GPIO_Init+0x1f0>
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	4a4a      	ldr	r2, [pc, #296]	; (8003abc <HAL_GPIO_Init+0x2f4>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d00d      	beq.n	80039b4 <HAL_GPIO_Init+0x1ec>
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	4a49      	ldr	r2, [pc, #292]	; (8003ac0 <HAL_GPIO_Init+0x2f8>)
 800399c:	4293      	cmp	r3, r2
 800399e:	d007      	beq.n	80039b0 <HAL_GPIO_Init+0x1e8>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	4a48      	ldr	r2, [pc, #288]	; (8003ac4 <HAL_GPIO_Init+0x2fc>)
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d101      	bne.n	80039ac <HAL_GPIO_Init+0x1e4>
 80039a8:	2305      	movs	r3, #5
 80039aa:	e00a      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039ac:	2306      	movs	r3, #6
 80039ae:	e008      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039b0:	2304      	movs	r3, #4
 80039b2:	e006      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039b4:	2303      	movs	r3, #3
 80039b6:	e004      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039b8:	2302      	movs	r3, #2
 80039ba:	e002      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039bc:	2301      	movs	r3, #1
 80039be:	e000      	b.n	80039c2 <HAL_GPIO_Init+0x1fa>
 80039c0:	2300      	movs	r3, #0
 80039c2:	697a      	ldr	r2, [r7, #20]
 80039c4:	f002 0203 	and.w	r2, r2, #3
 80039c8:	0092      	lsls	r2, r2, #2
 80039ca:	4093      	lsls	r3, r2
 80039cc:	693a      	ldr	r2, [r7, #16]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039d2:	4937      	ldr	r1, [pc, #220]	; (8003ab0 <HAL_GPIO_Init+0x2e8>)
 80039d4:	697b      	ldr	r3, [r7, #20]
 80039d6:	089b      	lsrs	r3, r3, #2
 80039d8:	3302      	adds	r3, #2
 80039da:	693a      	ldr	r2, [r7, #16]
 80039dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039e0:	4b39      	ldr	r3, [pc, #228]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 80039e2:	689b      	ldr	r3, [r3, #8]
 80039e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	43db      	mvns	r3, r3
 80039ea:	693a      	ldr	r2, [r7, #16]
 80039ec:	4013      	ands	r3, r2
 80039ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d003      	beq.n	8003a04 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80039fc:	693a      	ldr	r2, [r7, #16]
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	4313      	orrs	r3, r2
 8003a02:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a04:	4a30      	ldr	r2, [pc, #192]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a0a:	4b2f      	ldr	r3, [pc, #188]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a0c:	68db      	ldr	r3, [r3, #12]
 8003a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	43db      	mvns	r3, r3
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4013      	ands	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	685b      	ldr	r3, [r3, #4]
 8003a1e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d003      	beq.n	8003a2e <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003a26:	693a      	ldr	r2, [r7, #16]
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a2e:	4a26      	ldr	r2, [pc, #152]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a30:	693b      	ldr	r3, [r7, #16]
 8003a32:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a34:	4b24      	ldr	r3, [pc, #144]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a36:	685b      	ldr	r3, [r3, #4]
 8003a38:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	43db      	mvns	r3, r3
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	4013      	ands	r3, r2
 8003a42:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	685b      	ldr	r3, [r3, #4]
 8003a48:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d003      	beq.n	8003a58 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003a50:	693a      	ldr	r2, [r7, #16]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	4313      	orrs	r3, r2
 8003a56:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a58:	4a1b      	ldr	r2, [pc, #108]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a5a:	693b      	ldr	r3, [r7, #16]
 8003a5c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a5e:	4b1a      	ldr	r3, [pc, #104]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	43db      	mvns	r3, r3
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	4013      	ands	r3, r2
 8003a6c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	685b      	ldr	r3, [r3, #4]
 8003a72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d003      	beq.n	8003a82 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003a7a:	693a      	ldr	r2, [r7, #16]
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	4313      	orrs	r3, r2
 8003a80:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a82:	4a11      	ldr	r2, [pc, #68]	; (8003ac8 <HAL_GPIO_Init+0x300>)
 8003a84:	693b      	ldr	r3, [r7, #16]
 8003a86:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	681a      	ldr	r2, [r3, #0]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	fa22 f303 	lsr.w	r3, r2, r3
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	f47f ae9d 	bne.w	80037d8 <HAL_GPIO_Init+0x10>
  }
}
 8003a9e:	bf00      	nop
 8003aa0:	bf00      	nop
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	40010000 	.word	0x40010000
 8003ab4:	48000400 	.word	0x48000400
 8003ab8:	48000800 	.word	0x48000800
 8003abc:	48000c00 	.word	0x48000c00
 8003ac0:	48001000 	.word	0x48001000
 8003ac4:	48001400 	.word	0x48001400
 8003ac8:	40010400 	.word	0x40010400

08003acc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003acc:	b480      	push	{r7}
 8003ace:	b083      	sub	sp, #12
 8003ad0:	af00      	add	r7, sp, #0
 8003ad2:	6078      	str	r0, [r7, #4]
 8003ad4:	460b      	mov	r3, r1
 8003ad6:	807b      	strh	r3, [r7, #2]
 8003ad8:	4613      	mov	r3, r2
 8003ada:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003adc:	787b      	ldrb	r3, [r7, #1]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003ae2:	887a      	ldrh	r2, [r7, #2]
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003ae8:	e002      	b.n	8003af0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	629a      	str	r2, [r3, #40]	; 0x28
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afa:	4770      	bx	lr

08003afc <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	b082      	sub	sp, #8
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	4603      	mov	r3, r0
 8003b04:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003b06:	4b08      	ldr	r3, [pc, #32]	; (8003b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b08:	695a      	ldr	r2, [r3, #20]
 8003b0a:	88fb      	ldrh	r3, [r7, #6]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d006      	beq.n	8003b20 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b12:	4a05      	ldr	r2, [pc, #20]	; (8003b28 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b14:	88fb      	ldrh	r3, [r7, #6]
 8003b16:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b18:	88fb      	ldrh	r3, [r7, #6]
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	f000 f806 	bl	8003b2c <HAL_GPIO_EXTI_Callback>
  }
}
 8003b20:	bf00      	nop
 8003b22:	3708      	adds	r7, #8
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40010400 	.word	0x40010400

08003b2c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	b083      	sub	sp, #12
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	4603      	mov	r3, r0
 8003b34:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003b36:	bf00      	nop
 8003b38:	370c      	adds	r7, #12
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b40:	4770      	bx	lr
	...

08003b44 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b085      	sub	sp, #20
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d141      	bne.n	8003bd6 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b52:	4b4b      	ldr	r3, [pc, #300]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003b5a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b5e:	d131      	bne.n	8003bc4 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b60:	4b47      	ldr	r3, [pc, #284]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b62:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003b66:	4a46      	ldr	r2, [pc, #280]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b68:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b6c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b70:	4b43      	ldr	r3, [pc, #268]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003b78:	4a41      	ldr	r2, [pc, #260]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b7e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b80:	4b40      	ldr	r3, [pc, #256]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	2232      	movs	r2, #50	; 0x32
 8003b86:	fb02 f303 	mul.w	r3, r2, r3
 8003b8a:	4a3f      	ldr	r2, [pc, #252]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003b8c:	fba2 2303 	umull	r2, r3, r2, r3
 8003b90:	0c9b      	lsrs	r3, r3, #18
 8003b92:	3301      	adds	r3, #1
 8003b94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b96:	e002      	b.n	8003b9e <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	3b01      	subs	r3, #1
 8003b9c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b9e:	4b38      	ldr	r3, [pc, #224]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ba0:	695b      	ldr	r3, [r3, #20]
 8003ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ba6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003baa:	d102      	bne.n	8003bb2 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f2      	bne.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003bb2:	4b33      	ldr	r3, [pc, #204]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bb4:	695b      	ldr	r3, [r3, #20]
 8003bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bbe:	d158      	bne.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003bc0:	2303      	movs	r3, #3
 8003bc2:	e057      	b.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bc4:	4b2e      	ldr	r3, [pc, #184]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bc6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bca:	4a2d      	ldr	r2, [pc, #180]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003bd0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003bd4:	e04d      	b.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003bdc:	d141      	bne.n	8003c62 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bde:	4b28      	ldr	r3, [pc, #160]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003be6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003bea:	d131      	bne.n	8003c50 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bec:	4b24      	ldr	r3, [pc, #144]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bee:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003bf2:	4a23      	ldr	r2, [pc, #140]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bf4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bf8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003bfc:	4b20      	ldr	r3, [pc, #128]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c04:	4a1e      	ldr	r2, [pc, #120]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c06:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c0a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c0c:	4b1d      	ldr	r3, [pc, #116]	; (8003c84 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	2232      	movs	r2, #50	; 0x32
 8003c12:	fb02 f303 	mul.w	r3, r2, r3
 8003c16:	4a1c      	ldr	r2, [pc, #112]	; (8003c88 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c18:	fba2 2303 	umull	r2, r3, r2, r3
 8003c1c:	0c9b      	lsrs	r3, r3, #18
 8003c1e:	3301      	adds	r3, #1
 8003c20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c22:	e002      	b.n	8003c2a <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	3b01      	subs	r3, #1
 8003c28:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c2a:	4b15      	ldr	r3, [pc, #84]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c2c:	695b      	ldr	r3, [r3, #20]
 8003c2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c36:	d102      	bne.n	8003c3e <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d1f2      	bne.n	8003c24 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c3e:	4b10      	ldr	r3, [pc, #64]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c40:	695b      	ldr	r3, [r3, #20]
 8003c42:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003c46:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c4a:	d112      	bne.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c4c:	2303      	movs	r3, #3
 8003c4e:	e011      	b.n	8003c74 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c52:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003c56:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c58:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c5c:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003c60:	e007      	b.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c62:	4b07      	ldr	r3, [pc, #28]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003c6a:	4a05      	ldr	r2, [pc, #20]	; (8003c80 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c6c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c70:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c72:	2300      	movs	r3, #0
}
 8003c74:	4618      	mov	r0, r3
 8003c76:	3714      	adds	r7, #20
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr
 8003c80:	40007000 	.word	0x40007000
 8003c84:	20000000 	.word	0x20000000
 8003c88:	431bde83 	.word	0x431bde83

08003c8c <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c92:	689b      	ldr	r3, [r3, #8]
 8003c94:	4a04      	ldr	r2, [pc, #16]	; (8003ca8 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c96:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003c9a:	6093      	str	r3, [r2, #8]
}
 8003c9c:	bf00      	nop
 8003c9e:	46bd      	mov	sp, r7
 8003ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop
 8003ca8:	40007000 	.word	0x40007000

08003cac <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b088      	sub	sp, #32
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d101      	bne.n	8003cbe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e2fe      	b.n	80042bc <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0301 	and.w	r3, r3, #1
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d075      	beq.n	8003db6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003cca:	4b97      	ldr	r3, [pc, #604]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	f003 030c 	and.w	r3, r3, #12
 8003cd2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003cd4:	4b94      	ldr	r3, [pc, #592]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003cd6:	68db      	ldr	r3, [r3, #12]
 8003cd8:	f003 0303 	and.w	r3, r3, #3
 8003cdc:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003cde:	69bb      	ldr	r3, [r7, #24]
 8003ce0:	2b0c      	cmp	r3, #12
 8003ce2:	d102      	bne.n	8003cea <HAL_RCC_OscConfig+0x3e>
 8003ce4:	697b      	ldr	r3, [r7, #20]
 8003ce6:	2b03      	cmp	r3, #3
 8003ce8:	d002      	beq.n	8003cf0 <HAL_RCC_OscConfig+0x44>
 8003cea:	69bb      	ldr	r3, [r7, #24]
 8003cec:	2b08      	cmp	r3, #8
 8003cee:	d10b      	bne.n	8003d08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003cf0:	4b8d      	ldr	r3, [pc, #564]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d05b      	beq.n	8003db4 <HAL_RCC_OscConfig+0x108>
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	2b00      	cmp	r3, #0
 8003d02:	d157      	bne.n	8003db4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d04:	2301      	movs	r3, #1
 8003d06:	e2d9      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d10:	d106      	bne.n	8003d20 <HAL_RCC_OscConfig+0x74>
 8003d12:	4b85      	ldr	r3, [pc, #532]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a84      	ldr	r2, [pc, #528]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d1c:	6013      	str	r3, [r2, #0]
 8003d1e:	e01d      	b.n	8003d5c <HAL_RCC_OscConfig+0xb0>
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d28:	d10c      	bne.n	8003d44 <HAL_RCC_OscConfig+0x98>
 8003d2a:	4b7f      	ldr	r3, [pc, #508]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a7e      	ldr	r2, [pc, #504]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d30:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	4b7c      	ldr	r3, [pc, #496]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a7b      	ldr	r2, [pc, #492]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d3c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d40:	6013      	str	r3, [r2, #0]
 8003d42:	e00b      	b.n	8003d5c <HAL_RCC_OscConfig+0xb0>
 8003d44:	4b78      	ldr	r3, [pc, #480]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	4a77      	ldr	r2, [pc, #476]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d4a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d4e:	6013      	str	r3, [r2, #0]
 8003d50:	4b75      	ldr	r3, [pc, #468]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a74      	ldr	r2, [pc, #464]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d56:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	685b      	ldr	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d013      	beq.n	8003d8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d64:	f7fd fa6c 	bl	8001240 <HAL_GetTick>
 8003d68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d6a:	e008      	b.n	8003d7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d6c:	f7fd fa68 	bl	8001240 <HAL_GetTick>
 8003d70:	4602      	mov	r2, r0
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	1ad3      	subs	r3, r2, r3
 8003d76:	2b64      	cmp	r3, #100	; 0x64
 8003d78:	d901      	bls.n	8003d7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e29e      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003d7e:	4b6a      	ldr	r3, [pc, #424]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d0f0      	beq.n	8003d6c <HAL_RCC_OscConfig+0xc0>
 8003d8a:	e014      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003d8c:	f7fd fa58 	bl	8001240 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003d94:	f7fd fa54 	bl	8001240 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b64      	cmp	r3, #100	; 0x64
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e28a      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003da6:	4b60      	ldr	r3, [pc, #384]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0xe8>
 8003db2:	e000      	b.n	8003db6 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003db4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f003 0302 	and.w	r3, r3, #2
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d075      	beq.n	8003eae <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003dc2:	4b59      	ldr	r3, [pc, #356]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	f003 030c 	and.w	r3, r3, #12
 8003dca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003dcc:	4b56      	ldr	r3, [pc, #344]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003dce:	68db      	ldr	r3, [r3, #12]
 8003dd0:	f003 0303 	and.w	r3, r3, #3
 8003dd4:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	2b0c      	cmp	r3, #12
 8003dda:	d102      	bne.n	8003de2 <HAL_RCC_OscConfig+0x136>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	2b02      	cmp	r3, #2
 8003de0:	d002      	beq.n	8003de8 <HAL_RCC_OscConfig+0x13c>
 8003de2:	69bb      	ldr	r3, [r7, #24]
 8003de4:	2b04      	cmp	r3, #4
 8003de6:	d11f      	bne.n	8003e28 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003de8:	4b4f      	ldr	r3, [pc, #316]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d005      	beq.n	8003e00 <HAL_RCC_OscConfig+0x154>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d101      	bne.n	8003e00 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e25d      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e00:	4b49      	ldr	r3, [pc, #292]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e02:	685b      	ldr	r3, [r3, #4]
 8003e04:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	691b      	ldr	r3, [r3, #16]
 8003e0c:	061b      	lsls	r3, r3, #24
 8003e0e:	4946      	ldr	r1, [pc, #280]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e10:	4313      	orrs	r3, r2
 8003e12:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003e14:	4b45      	ldr	r3, [pc, #276]	; (8003f2c <HAL_RCC_OscConfig+0x280>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4618      	mov	r0, r3
 8003e1a:	f7fd f9c5 	bl	80011a8 <HAL_InitTick>
 8003e1e:	4603      	mov	r3, r0
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d043      	beq.n	8003eac <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e249      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	68db      	ldr	r3, [r3, #12]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d023      	beq.n	8003e78 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e30:	4b3d      	ldr	r3, [pc, #244]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	4a3c      	ldr	r2, [pc, #240]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e36:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e3a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3c:	f7fd fa00 	bl	8001240 <HAL_GetTick>
 8003e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e42:	e008      	b.n	8003e56 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e44:	f7fd f9fc 	bl	8001240 <HAL_GetTick>
 8003e48:	4602      	mov	r2, r0
 8003e4a:	693b      	ldr	r3, [r7, #16]
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	2b02      	cmp	r3, #2
 8003e50:	d901      	bls.n	8003e56 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003e52:	2303      	movs	r3, #3
 8003e54:	e232      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003e56:	4b34      	ldr	r3, [pc, #208]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d0f0      	beq.n	8003e44 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e62:	4b31      	ldr	r3, [pc, #196]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e64:	685b      	ldr	r3, [r3, #4]
 8003e66:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	691b      	ldr	r3, [r3, #16]
 8003e6e:	061b      	lsls	r3, r3, #24
 8003e70:	492d      	ldr	r1, [pc, #180]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e72:	4313      	orrs	r3, r2
 8003e74:	604b      	str	r3, [r1, #4]
 8003e76:	e01a      	b.n	8003eae <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e78:	4b2b      	ldr	r3, [pc, #172]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a2a      	ldr	r2, [pc, #168]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003e7e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003e82:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e84:	f7fd f9dc 	bl	8001240 <HAL_GetTick>
 8003e88:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e8a:	e008      	b.n	8003e9e <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003e8c:	f7fd f9d8 	bl	8001240 <HAL_GetTick>
 8003e90:	4602      	mov	r2, r0
 8003e92:	693b      	ldr	r3, [r7, #16]
 8003e94:	1ad3      	subs	r3, r2, r3
 8003e96:	2b02      	cmp	r3, #2
 8003e98:	d901      	bls.n	8003e9e <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003e9a:	2303      	movs	r3, #3
 8003e9c:	e20e      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003e9e:	4b22      	ldr	r3, [pc, #136]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d1f0      	bne.n	8003e8c <HAL_RCC_OscConfig+0x1e0>
 8003eaa:	e000      	b.n	8003eae <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003eac:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	f003 0308 	and.w	r3, r3, #8
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d041      	beq.n	8003f3e <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d01c      	beq.n	8003efc <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003ec2:	4b19      	ldr	r3, [pc, #100]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003ec4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ec8:	4a17      	ldr	r2, [pc, #92]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003eca:	f043 0301 	orr.w	r3, r3, #1
 8003ece:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ed2:	f7fd f9b5 	bl	8001240 <HAL_GetTick>
 8003ed6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003ed8:	e008      	b.n	8003eec <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003eda:	f7fd f9b1 	bl	8001240 <HAL_GetTick>
 8003ede:	4602      	mov	r2, r0
 8003ee0:	693b      	ldr	r3, [r7, #16]
 8003ee2:	1ad3      	subs	r3, r2, r3
 8003ee4:	2b02      	cmp	r3, #2
 8003ee6:	d901      	bls.n	8003eec <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003ee8:	2303      	movs	r3, #3
 8003eea:	e1e7      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003eec:	4b0e      	ldr	r3, [pc, #56]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003eee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d0ef      	beq.n	8003eda <HAL_RCC_OscConfig+0x22e>
 8003efa:	e020      	b.n	8003f3e <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003efc:	4b0a      	ldr	r3, [pc, #40]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003efe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f02:	4a09      	ldr	r2, [pc, #36]	; (8003f28 <HAL_RCC_OscConfig+0x27c>)
 8003f04:	f023 0301 	bic.w	r3, r3, #1
 8003f08:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f0c:	f7fd f998 	bl	8001240 <HAL_GetTick>
 8003f10:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f12:	e00d      	b.n	8003f30 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f14:	f7fd f994 	bl	8001240 <HAL_GetTick>
 8003f18:	4602      	mov	r2, r0
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	1ad3      	subs	r3, r2, r3
 8003f1e:	2b02      	cmp	r3, #2
 8003f20:	d906      	bls.n	8003f30 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003f22:	2303      	movs	r3, #3
 8003f24:	e1ca      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
 8003f26:	bf00      	nop
 8003f28:	40021000 	.word	0x40021000
 8003f2c:	20000004 	.word	0x20000004
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003f30:	4b8c      	ldr	r3, [pc, #560]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f32:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003f36:	f003 0302 	and.w	r3, r3, #2
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1ea      	bne.n	8003f14 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f003 0304 	and.w	r3, r3, #4
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	f000 80a6 	beq.w	8004098 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f4c:	2300      	movs	r3, #0
 8003f4e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003f50:	4b84      	ldr	r3, [pc, #528]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d101      	bne.n	8003f60 <HAL_RCC_OscConfig+0x2b4>
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	e000      	b.n	8003f62 <HAL_RCC_OscConfig+0x2b6>
 8003f60:	2300      	movs	r3, #0
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d00d      	beq.n	8003f82 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f66:	4b7f      	ldr	r3, [pc, #508]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f6a:	4a7e      	ldr	r2, [pc, #504]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f70:	6593      	str	r3, [r2, #88]	; 0x58
 8003f72:	4b7c      	ldr	r3, [pc, #496]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003f74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f7a:	60fb      	str	r3, [r7, #12]
 8003f7c:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003f82:	4b79      	ldr	r3, [pc, #484]	; (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d118      	bne.n	8003fc0 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003f8e:	4b76      	ldr	r3, [pc, #472]	; (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a75      	ldr	r2, [pc, #468]	; (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003f94:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f98:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f9a:	f7fd f951 	bl	8001240 <HAL_GetTick>
 8003f9e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fa0:	e008      	b.n	8003fb4 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fa2:	f7fd f94d 	bl	8001240 <HAL_GetTick>
 8003fa6:	4602      	mov	r2, r0
 8003fa8:	693b      	ldr	r3, [r7, #16]
 8003faa:	1ad3      	subs	r3, r2, r3
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d901      	bls.n	8003fb4 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003fb0:	2303      	movs	r3, #3
 8003fb2:	e183      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003fb4:	4b6c      	ldr	r3, [pc, #432]	; (8004168 <HAL_RCC_OscConfig+0x4bc>)
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d0f0      	beq.n	8003fa2 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	689b      	ldr	r3, [r3, #8]
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d108      	bne.n	8003fda <HAL_RCC_OscConfig+0x32e>
 8003fc8:	4b66      	ldr	r3, [pc, #408]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fce:	4a65      	ldr	r2, [pc, #404]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fd0:	f043 0301 	orr.w	r3, r3, #1
 8003fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003fd8:	e024      	b.n	8004024 <HAL_RCC_OscConfig+0x378>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	2b05      	cmp	r3, #5
 8003fe0:	d110      	bne.n	8004004 <HAL_RCC_OscConfig+0x358>
 8003fe2:	4b60      	ldr	r3, [pc, #384]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fe4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003fe8:	4a5e      	ldr	r2, [pc, #376]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003fea:	f043 0304 	orr.w	r3, r3, #4
 8003fee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ff2:	4b5c      	ldr	r3, [pc, #368]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ff8:	4a5a      	ldr	r2, [pc, #360]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8003ffa:	f043 0301 	orr.w	r3, r3, #1
 8003ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004002:	e00f      	b.n	8004024 <HAL_RCC_OscConfig+0x378>
 8004004:	4b57      	ldr	r3, [pc, #348]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004006:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800400a:	4a56      	ldr	r2, [pc, #344]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800400c:	f023 0301 	bic.w	r3, r3, #1
 8004010:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004014:	4b53      	ldr	r3, [pc, #332]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004016:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800401a:	4a52      	ldr	r2, [pc, #328]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800401c:	f023 0304 	bic.w	r3, r3, #4
 8004020:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d016      	beq.n	800405a <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800402c:	f7fd f908 	bl	8001240 <HAL_GetTick>
 8004030:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004032:	e00a      	b.n	800404a <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004034:	f7fd f904 	bl	8001240 <HAL_GetTick>
 8004038:	4602      	mov	r2, r0
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	1ad3      	subs	r3, r2, r3
 800403e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004042:	4293      	cmp	r3, r2
 8004044:	d901      	bls.n	800404a <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8004046:	2303      	movs	r3, #3
 8004048:	e138      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800404a:	4b46      	ldr	r3, [pc, #280]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800404c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d0ed      	beq.n	8004034 <HAL_RCC_OscConfig+0x388>
 8004058:	e015      	b.n	8004086 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800405a:	f7fd f8f1 	bl	8001240 <HAL_GetTick>
 800405e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004060:	e00a      	b.n	8004078 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004062:	f7fd f8ed 	bl	8001240 <HAL_GetTick>
 8004066:	4602      	mov	r2, r0
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	1ad3      	subs	r3, r2, r3
 800406c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e121      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004078:	4b3a      	ldr	r3, [pc, #232]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800407a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800407e:	f003 0302 	and.w	r3, r3, #2
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1ed      	bne.n	8004062 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004086:	7ffb      	ldrb	r3, [r7, #31]
 8004088:	2b01      	cmp	r3, #1
 800408a:	d105      	bne.n	8004098 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800408c:	4b35      	ldr	r3, [pc, #212]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800408e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004090:	4a34      	ldr	r2, [pc, #208]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004092:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004096:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f003 0320 	and.w	r3, r3, #32
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d03c      	beq.n	800411e <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	699b      	ldr	r3, [r3, #24]
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d01c      	beq.n	80040e6 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80040ac:	4b2d      	ldr	r3, [pc, #180]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040b2:	4a2c      	ldr	r2, [pc, #176]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040b4:	f043 0301 	orr.w	r3, r3, #1
 80040b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040bc:	f7fd f8c0 	bl	8001240 <HAL_GetTick>
 80040c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040c2:	e008      	b.n	80040d6 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040c4:	f7fd f8bc 	bl	8001240 <HAL_GetTick>
 80040c8:	4602      	mov	r2, r0
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	1ad3      	subs	r3, r2, r3
 80040ce:	2b02      	cmp	r3, #2
 80040d0:	d901      	bls.n	80040d6 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80040d2:	2303      	movs	r3, #3
 80040d4:	e0f2      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80040d6:	4b23      	ldr	r3, [pc, #140]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040dc:	f003 0302 	and.w	r3, r3, #2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d0ef      	beq.n	80040c4 <HAL_RCC_OscConfig+0x418>
 80040e4:	e01b      	b.n	800411e <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80040e6:	4b1f      	ldr	r3, [pc, #124]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80040ec:	4a1d      	ldr	r2, [pc, #116]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040f6:	f7fd f8a3 	bl	8001240 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80040fe:	f7fd f89f 	bl	8001240 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e0d5      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004110:	4b14      	ldr	r3, [pc, #80]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004112:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004116:	f003 0302 	and.w	r3, r3, #2
 800411a:	2b00      	cmp	r3, #0
 800411c:	d1ef      	bne.n	80040fe <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	69db      	ldr	r3, [r3, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	f000 80c9 	beq.w	80042ba <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004128:	4b0e      	ldr	r3, [pc, #56]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 800412a:	689b      	ldr	r3, [r3, #8]
 800412c:	f003 030c 	and.w	r3, r3, #12
 8004130:	2b0c      	cmp	r3, #12
 8004132:	f000 8083 	beq.w	800423c <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	69db      	ldr	r3, [r3, #28]
 800413a:	2b02      	cmp	r3, #2
 800413c:	d15e      	bne.n	80041fc <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800413e:	4b09      	ldr	r3, [pc, #36]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	4a08      	ldr	r2, [pc, #32]	; (8004164 <HAL_RCC_OscConfig+0x4b8>)
 8004144:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004148:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800414a:	f7fd f879 	bl	8001240 <HAL_GetTick>
 800414e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004150:	e00c      	b.n	800416c <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004152:	f7fd f875 	bl	8001240 <HAL_GetTick>
 8004156:	4602      	mov	r2, r0
 8004158:	693b      	ldr	r3, [r7, #16]
 800415a:	1ad3      	subs	r3, r2, r3
 800415c:	2b02      	cmp	r3, #2
 800415e:	d905      	bls.n	800416c <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004160:	2303      	movs	r3, #3
 8004162:	e0ab      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
 8004164:	40021000 	.word	0x40021000
 8004168:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800416c:	4b55      	ldr	r3, [pc, #340]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004174:	2b00      	cmp	r3, #0
 8004176:	d1ec      	bne.n	8004152 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004178:	4b52      	ldr	r3, [pc, #328]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 800417a:	68da      	ldr	r2, [r3, #12]
 800417c:	4b52      	ldr	r3, [pc, #328]	; (80042c8 <HAL_RCC_OscConfig+0x61c>)
 800417e:	4013      	ands	r3, r2
 8004180:	687a      	ldr	r2, [r7, #4]
 8004182:	6a11      	ldr	r1, [r2, #32]
 8004184:	687a      	ldr	r2, [r7, #4]
 8004186:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004188:	3a01      	subs	r2, #1
 800418a:	0112      	lsls	r2, r2, #4
 800418c:	4311      	orrs	r1, r2
 800418e:	687a      	ldr	r2, [r7, #4]
 8004190:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8004192:	0212      	lsls	r2, r2, #8
 8004194:	4311      	orrs	r1, r2
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800419a:	0852      	lsrs	r2, r2, #1
 800419c:	3a01      	subs	r2, #1
 800419e:	0552      	lsls	r2, r2, #21
 80041a0:	4311      	orrs	r1, r2
 80041a2:	687a      	ldr	r2, [r7, #4]
 80041a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80041a6:	0852      	lsrs	r2, r2, #1
 80041a8:	3a01      	subs	r2, #1
 80041aa:	0652      	lsls	r2, r2, #25
 80041ac:	4311      	orrs	r1, r2
 80041ae:	687a      	ldr	r2, [r7, #4]
 80041b0:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80041b2:	06d2      	lsls	r2, r2, #27
 80041b4:	430a      	orrs	r2, r1
 80041b6:	4943      	ldr	r1, [pc, #268]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80041bc:	4b41      	ldr	r3, [pc, #260]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	4a40      	ldr	r2, [pc, #256]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041c6:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80041c8:	4b3e      	ldr	r3, [pc, #248]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041ca:	68db      	ldr	r3, [r3, #12]
 80041cc:	4a3d      	ldr	r2, [pc, #244]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80041d2:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041d4:	f7fd f834 	bl	8001240 <HAL_GetTick>
 80041d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041da:	e008      	b.n	80041ee <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80041dc:	f7fd f830 	bl	8001240 <HAL_GetTick>
 80041e0:	4602      	mov	r2, r0
 80041e2:	693b      	ldr	r3, [r7, #16]
 80041e4:	1ad3      	subs	r3, r2, r3
 80041e6:	2b02      	cmp	r3, #2
 80041e8:	d901      	bls.n	80041ee <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80041ea:	2303      	movs	r3, #3
 80041ec:	e066      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80041ee:	4b35      	ldr	r3, [pc, #212]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d0f0      	beq.n	80041dc <HAL_RCC_OscConfig+0x530>
 80041fa:	e05e      	b.n	80042ba <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80041fc:	4b31      	ldr	r3, [pc, #196]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	4a30      	ldr	r2, [pc, #192]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 8004202:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004206:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004208:	f7fd f81a 	bl	8001240 <HAL_GetTick>
 800420c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800420e:	e008      	b.n	8004222 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004210:	f7fd f816 	bl	8001240 <HAL_GetTick>
 8004214:	4602      	mov	r2, r0
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	1ad3      	subs	r3, r2, r3
 800421a:	2b02      	cmp	r3, #2
 800421c:	d901      	bls.n	8004222 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 800421e:	2303      	movs	r3, #3
 8004220:	e04c      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004222:	4b28      	ldr	r3, [pc, #160]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800422a:	2b00      	cmp	r3, #0
 800422c:	d1f0      	bne.n	8004210 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800422e:	4b25      	ldr	r3, [pc, #148]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 8004230:	68da      	ldr	r2, [r3, #12]
 8004232:	4924      	ldr	r1, [pc, #144]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 8004234:	4b25      	ldr	r3, [pc, #148]	; (80042cc <HAL_RCC_OscConfig+0x620>)
 8004236:	4013      	ands	r3, r2
 8004238:	60cb      	str	r3, [r1, #12]
 800423a:	e03e      	b.n	80042ba <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	69db      	ldr	r3, [r3, #28]
 8004240:	2b01      	cmp	r3, #1
 8004242:	d101      	bne.n	8004248 <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e039      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8004248:	4b1e      	ldr	r3, [pc, #120]	; (80042c4 <HAL_RCC_OscConfig+0x618>)
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	f003 0203 	and.w	r2, r3, #3
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6a1b      	ldr	r3, [r3, #32]
 8004258:	429a      	cmp	r2, r3
 800425a:	d12c      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	3b01      	subs	r3, #1
 8004268:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800426a:	429a      	cmp	r2, r3
 800426c:	d123      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800426e:	697b      	ldr	r3, [r7, #20]
 8004270:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004278:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800427a:	429a      	cmp	r2, r3
 800427c:	d11b      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004288:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800428a:	429a      	cmp	r2, r3
 800428c:	d113      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800428e:	697b      	ldr	r3, [r7, #20]
 8004290:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004298:	085b      	lsrs	r3, r3, #1
 800429a:	3b01      	subs	r3, #1
 800429c:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800429e:	429a      	cmp	r2, r3
 80042a0:	d109      	bne.n	80042b6 <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80042a2:	697b      	ldr	r3, [r7, #20]
 80042a4:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042ac:	085b      	lsrs	r3, r3, #1
 80042ae:	3b01      	subs	r3, #1
 80042b0:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80042b2:	429a      	cmp	r2, r3
 80042b4:	d001      	beq.n	80042ba <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3720      	adds	r7, #32
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}
 80042c4:	40021000 	.word	0x40021000
 80042c8:	019f800c 	.word	0x019f800c
 80042cc:	feeefffc 	.word	0xfeeefffc

080042d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80042da:	2300      	movs	r3, #0
 80042dc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d101      	bne.n	80042e8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80042e4:	2301      	movs	r3, #1
 80042e6:	e11e      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80042e8:	4b91      	ldr	r3, [pc, #580]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f003 030f 	and.w	r3, r3, #15
 80042f0:	683a      	ldr	r2, [r7, #0]
 80042f2:	429a      	cmp	r2, r3
 80042f4:	d910      	bls.n	8004318 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042f6:	4b8e      	ldr	r3, [pc, #568]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f023 020f 	bic.w	r2, r3, #15
 80042fe:	498c      	ldr	r1, [pc, #560]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004300:	683b      	ldr	r3, [r7, #0]
 8004302:	4313      	orrs	r3, r2
 8004304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004306:	4b8a      	ldr	r3, [pc, #552]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 030f 	and.w	r3, r3, #15
 800430e:	683a      	ldr	r2, [r7, #0]
 8004310:	429a      	cmp	r2, r3
 8004312:	d001      	beq.n	8004318 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e106      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f003 0301 	and.w	r3, r3, #1
 8004320:	2b00      	cmp	r3, #0
 8004322:	d073      	beq.n	800440c <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	2b03      	cmp	r3, #3
 800432a:	d129      	bne.n	8004380 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800432c:	4b81      	ldr	r3, [pc, #516]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004334:	2b00      	cmp	r3, #0
 8004336:	d101      	bne.n	800433c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8004338:	2301      	movs	r3, #1
 800433a:	e0f4      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 800433c:	f000 f99e 	bl	800467c <RCC_GetSysClockFreqFromPLLSource>
 8004340:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004342:	693b      	ldr	r3, [r7, #16]
 8004344:	4a7c      	ldr	r2, [pc, #496]	; (8004538 <HAL_RCC_ClockConfig+0x268>)
 8004346:	4293      	cmp	r3, r2
 8004348:	d93f      	bls.n	80043ca <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800434a:	4b7a      	ldr	r3, [pc, #488]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800434c:	689b      	ldr	r3, [r3, #8]
 800434e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004352:	2b00      	cmp	r3, #0
 8004354:	d009      	beq.n	800436a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800435e:	2b00      	cmp	r3, #0
 8004360:	d033      	beq.n	80043ca <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8004366:	2b00      	cmp	r3, #0
 8004368:	d12f      	bne.n	80043ca <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800436a:	4b72      	ldr	r3, [pc, #456]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004372:	4a70      	ldr	r2, [pc, #448]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004378:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800437a:	2380      	movs	r3, #128	; 0x80
 800437c:	617b      	str	r3, [r7, #20]
 800437e:	e024      	b.n	80043ca <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	2b02      	cmp	r3, #2
 8004386:	d107      	bne.n	8004398 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004388:	4b6a      	ldr	r3, [pc, #424]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004390:	2b00      	cmp	r3, #0
 8004392:	d109      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004394:	2301      	movs	r3, #1
 8004396:	e0c6      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004398:	4b66      	ldr	r3, [pc, #408]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d101      	bne.n	80043a8 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80043a4:	2301      	movs	r3, #1
 80043a6:	e0be      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80043a8:	f000 f8ce 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80043ac:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80043ae:	693b      	ldr	r3, [r7, #16]
 80043b0:	4a61      	ldr	r2, [pc, #388]	; (8004538 <HAL_RCC_ClockConfig+0x268>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d909      	bls.n	80043ca <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80043b6:	4b5f      	ldr	r3, [pc, #380]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043b8:	689b      	ldr	r3, [r3, #8]
 80043ba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043be:	4a5d      	ldr	r2, [pc, #372]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80043c4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80043c6:	2380      	movs	r3, #128	; 0x80
 80043c8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80043ca:	4b5a      	ldr	r3, [pc, #360]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043cc:	689b      	ldr	r3, [r3, #8]
 80043ce:	f023 0203 	bic.w	r2, r3, #3
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	4957      	ldr	r1, [pc, #348]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043d8:	4313      	orrs	r3, r2
 80043da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043dc:	f7fc ff30 	bl	8001240 <HAL_GetTick>
 80043e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043e2:	e00a      	b.n	80043fa <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80043e4:	f7fc ff2c 	bl	8001240 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d901      	bls.n	80043fa <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80043f6:	2303      	movs	r3, #3
 80043f8:	e095      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80043fa:	4b4e      	ldr	r3, [pc, #312]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80043fc:	689b      	ldr	r3, [r3, #8]
 80043fe:	f003 020c 	and.w	r2, r3, #12
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	685b      	ldr	r3, [r3, #4]
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	429a      	cmp	r2, r3
 800440a:	d1eb      	bne.n	80043e4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f003 0302 	and.w	r3, r3, #2
 8004414:	2b00      	cmp	r3, #0
 8004416:	d023      	beq.n	8004460 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f003 0304 	and.w	r3, r3, #4
 8004420:	2b00      	cmp	r3, #0
 8004422:	d005      	beq.n	8004430 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004424:	4b43      	ldr	r3, [pc, #268]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004426:	689b      	ldr	r3, [r3, #8]
 8004428:	4a42      	ldr	r2, [pc, #264]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800442a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800442e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	f003 0308 	and.w	r3, r3, #8
 8004438:	2b00      	cmp	r3, #0
 800443a:	d007      	beq.n	800444c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 800443c:	4b3d      	ldr	r3, [pc, #244]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800443e:	689b      	ldr	r3, [r3, #8]
 8004440:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004444:	4a3b      	ldr	r2, [pc, #236]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004446:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800444a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800444c:	4b39      	ldr	r3, [pc, #228]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800444e:	689b      	ldr	r3, [r3, #8]
 8004450:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	689b      	ldr	r3, [r3, #8]
 8004458:	4936      	ldr	r1, [pc, #216]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800445a:	4313      	orrs	r3, r2
 800445c:	608b      	str	r3, [r1, #8]
 800445e:	e008      	b.n	8004472 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004460:	697b      	ldr	r3, [r7, #20]
 8004462:	2b80      	cmp	r3, #128	; 0x80
 8004464:	d105      	bne.n	8004472 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004466:	4b33      	ldr	r3, [pc, #204]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	4a32      	ldr	r2, [pc, #200]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 800446c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004470:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004472:	4b2f      	ldr	r3, [pc, #188]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f003 030f 	and.w	r3, r3, #15
 800447a:	683a      	ldr	r2, [r7, #0]
 800447c:	429a      	cmp	r2, r3
 800447e:	d21d      	bcs.n	80044bc <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004480:	4b2b      	ldr	r3, [pc, #172]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f023 020f 	bic.w	r2, r3, #15
 8004488:	4929      	ldr	r1, [pc, #164]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	4313      	orrs	r3, r2
 800448e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004490:	f7fc fed6 	bl	8001240 <HAL_GetTick>
 8004494:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004496:	e00a      	b.n	80044ae <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004498:	f7fc fed2 	bl	8001240 <HAL_GetTick>
 800449c:	4602      	mov	r2, r0
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	1ad3      	subs	r3, r2, r3
 80044a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d901      	bls.n	80044ae <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80044aa:	2303      	movs	r3, #3
 80044ac:	e03b      	b.n	8004526 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80044ae:	4b20      	ldr	r3, [pc, #128]	; (8004530 <HAL_RCC_ClockConfig+0x260>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 030f 	and.w	r3, r3, #15
 80044b6:	683a      	ldr	r2, [r7, #0]
 80044b8:	429a      	cmp	r2, r3
 80044ba:	d1ed      	bne.n	8004498 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	f003 0304 	and.w	r3, r3, #4
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d008      	beq.n	80044da <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80044c8:	4b1a      	ldr	r3, [pc, #104]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	68db      	ldr	r3, [r3, #12]
 80044d4:	4917      	ldr	r1, [pc, #92]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044d6:	4313      	orrs	r3, r2
 80044d8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f003 0308 	and.w	r3, r3, #8
 80044e2:	2b00      	cmp	r3, #0
 80044e4:	d009      	beq.n	80044fa <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044e6:	4b13      	ldr	r3, [pc, #76]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044e8:	689b      	ldr	r3, [r3, #8]
 80044ea:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	691b      	ldr	r3, [r3, #16]
 80044f2:	00db      	lsls	r3, r3, #3
 80044f4:	490f      	ldr	r1, [pc, #60]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80044fa:	f000 f825 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 80044fe:	4602      	mov	r2, r0
 8004500:	4b0c      	ldr	r3, [pc, #48]	; (8004534 <HAL_RCC_ClockConfig+0x264>)
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	091b      	lsrs	r3, r3, #4
 8004506:	f003 030f 	and.w	r3, r3, #15
 800450a:	490c      	ldr	r1, [pc, #48]	; (800453c <HAL_RCC_ClockConfig+0x26c>)
 800450c:	5ccb      	ldrb	r3, [r1, r3]
 800450e:	f003 031f 	and.w	r3, r3, #31
 8004512:	fa22 f303 	lsr.w	r3, r2, r3
 8004516:	4a0a      	ldr	r2, [pc, #40]	; (8004540 <HAL_RCC_ClockConfig+0x270>)
 8004518:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800451a:	4b0a      	ldr	r3, [pc, #40]	; (8004544 <HAL_RCC_ClockConfig+0x274>)
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fc fe42 	bl	80011a8 <HAL_InitTick>
 8004524:	4603      	mov	r3, r0
}
 8004526:	4618      	mov	r0, r3
 8004528:	3718      	adds	r7, #24
 800452a:	46bd      	mov	sp, r7
 800452c:	bd80      	pop	{r7, pc}
 800452e:	bf00      	nop
 8004530:	40022000 	.word	0x40022000
 8004534:	40021000 	.word	0x40021000
 8004538:	04c4b400 	.word	0x04c4b400
 800453c:	08006fb8 	.word	0x08006fb8
 8004540:	20000000 	.word	0x20000000
 8004544:	20000004 	.word	0x20000004

08004548 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004548:	b480      	push	{r7}
 800454a:	b087      	sub	sp, #28
 800454c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800454e:	4b2c      	ldr	r3, [pc, #176]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f003 030c 	and.w	r3, r3, #12
 8004556:	2b04      	cmp	r3, #4
 8004558:	d102      	bne.n	8004560 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800455a:	4b2a      	ldr	r3, [pc, #168]	; (8004604 <HAL_RCC_GetSysClockFreq+0xbc>)
 800455c:	613b      	str	r3, [r7, #16]
 800455e:	e047      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004560:	4b27      	ldr	r3, [pc, #156]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004562:	689b      	ldr	r3, [r3, #8]
 8004564:	f003 030c 	and.w	r3, r3, #12
 8004568:	2b08      	cmp	r3, #8
 800456a:	d102      	bne.n	8004572 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 800456c:	4b26      	ldr	r3, [pc, #152]	; (8004608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800456e:	613b      	str	r3, [r7, #16]
 8004570:	e03e      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004572:	4b23      	ldr	r3, [pc, #140]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004574:	689b      	ldr	r3, [r3, #8]
 8004576:	f003 030c 	and.w	r3, r3, #12
 800457a:	2b0c      	cmp	r3, #12
 800457c:	d136      	bne.n	80045ec <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800457e:	4b20      	ldr	r3, [pc, #128]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004580:	68db      	ldr	r3, [r3, #12]
 8004582:	f003 0303 	and.w	r3, r3, #3
 8004586:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004588:	4b1d      	ldr	r3, [pc, #116]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 800458a:	68db      	ldr	r3, [r3, #12]
 800458c:	091b      	lsrs	r3, r3, #4
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	3301      	adds	r3, #1
 8004594:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	2b03      	cmp	r3, #3
 800459a:	d10c      	bne.n	80045b6 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800459c:	4a1a      	ldr	r2, [pc, #104]	; (8004608 <HAL_RCC_GetSysClockFreq+0xc0>)
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80045a4:	4a16      	ldr	r2, [pc, #88]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045a6:	68d2      	ldr	r2, [r2, #12]
 80045a8:	0a12      	lsrs	r2, r2, #8
 80045aa:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045ae:	fb02 f303 	mul.w	r3, r2, r3
 80045b2:	617b      	str	r3, [r7, #20]
      break;
 80045b4:	e00c      	b.n	80045d0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80045b6:	4a13      	ldr	r2, [pc, #76]	; (8004604 <HAL_RCC_GetSysClockFreq+0xbc>)
 80045b8:	68bb      	ldr	r3, [r7, #8]
 80045ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80045be:	4a10      	ldr	r2, [pc, #64]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045c0:	68d2      	ldr	r2, [r2, #12]
 80045c2:	0a12      	lsrs	r2, r2, #8
 80045c4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80045c8:	fb02 f303 	mul.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
      break;
 80045ce:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80045d0:	4b0b      	ldr	r3, [pc, #44]	; (8004600 <HAL_RCC_GetSysClockFreq+0xb8>)
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	0e5b      	lsrs	r3, r3, #25
 80045d6:	f003 0303 	and.w	r3, r3, #3
 80045da:	3301      	adds	r3, #1
 80045dc:	005b      	lsls	r3, r3, #1
 80045de:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80045e0:	697a      	ldr	r2, [r7, #20]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80045e8:	613b      	str	r3, [r7, #16]
 80045ea:	e001      	b.n	80045f0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80045ec:	2300      	movs	r3, #0
 80045ee:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80045f0:	693b      	ldr	r3, [r7, #16]
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40021000 	.word	0x40021000
 8004604:	00f42400 	.word	0x00f42400
 8004608:	016e3600 	.word	0x016e3600

0800460c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800460c:	b480      	push	{r7}
 800460e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004610:	4b03      	ldr	r3, [pc, #12]	; (8004620 <HAL_RCC_GetHCLKFreq+0x14>)
 8004612:	681b      	ldr	r3, [r3, #0]
}
 8004614:	4618      	mov	r0, r3
 8004616:	46bd      	mov	sp, r7
 8004618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461c:	4770      	bx	lr
 800461e:	bf00      	nop
 8004620:	20000000 	.word	0x20000000

08004624 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004628:	f7ff fff0 	bl	800460c <HAL_RCC_GetHCLKFreq>
 800462c:	4602      	mov	r2, r0
 800462e:	4b06      	ldr	r3, [pc, #24]	; (8004648 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004630:	689b      	ldr	r3, [r3, #8]
 8004632:	0a1b      	lsrs	r3, r3, #8
 8004634:	f003 0307 	and.w	r3, r3, #7
 8004638:	4904      	ldr	r1, [pc, #16]	; (800464c <HAL_RCC_GetPCLK1Freq+0x28>)
 800463a:	5ccb      	ldrb	r3, [r1, r3]
 800463c:	f003 031f 	and.w	r3, r3, #31
 8004640:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004644:	4618      	mov	r0, r3
 8004646:	bd80      	pop	{r7, pc}
 8004648:	40021000 	.word	0x40021000
 800464c:	08006fc8 	.word	0x08006fc8

08004650 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004650:	b580      	push	{r7, lr}
 8004652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004654:	f7ff ffda 	bl	800460c <HAL_RCC_GetHCLKFreq>
 8004658:	4602      	mov	r2, r0
 800465a:	4b06      	ldr	r3, [pc, #24]	; (8004674 <HAL_RCC_GetPCLK2Freq+0x24>)
 800465c:	689b      	ldr	r3, [r3, #8]
 800465e:	0adb      	lsrs	r3, r3, #11
 8004660:	f003 0307 	and.w	r3, r3, #7
 8004664:	4904      	ldr	r1, [pc, #16]	; (8004678 <HAL_RCC_GetPCLK2Freq+0x28>)
 8004666:	5ccb      	ldrb	r3, [r1, r3]
 8004668:	f003 031f 	and.w	r3, r3, #31
 800466c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004670:	4618      	mov	r0, r3
 8004672:	bd80      	pop	{r7, pc}
 8004674:	40021000 	.word	0x40021000
 8004678:	08006fc8 	.word	0x08006fc8

0800467c <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004682:	4b1e      	ldr	r3, [pc, #120]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004684:	68db      	ldr	r3, [r3, #12]
 8004686:	f003 0303 	and.w	r3, r3, #3
 800468a:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800468c:	4b1b      	ldr	r3, [pc, #108]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800468e:	68db      	ldr	r3, [r3, #12]
 8004690:	091b      	lsrs	r3, r3, #4
 8004692:	f003 030f 	and.w	r3, r3, #15
 8004696:	3301      	adds	r3, #1
 8004698:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	2b03      	cmp	r3, #3
 800469e:	d10c      	bne.n	80046ba <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046a0:	4a17      	ldr	r2, [pc, #92]	; (8004700 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80046a8:	4a14      	ldr	r2, [pc, #80]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046aa:	68d2      	ldr	r2, [r2, #12]
 80046ac:	0a12      	lsrs	r2, r2, #8
 80046ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046b2:	fb02 f303 	mul.w	r3, r2, r3
 80046b6:	617b      	str	r3, [r7, #20]
    break;
 80046b8:	e00c      	b.n	80046d4 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80046ba:	4a12      	ldr	r2, [pc, #72]	; (8004704 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	fbb2 f3f3 	udiv	r3, r2, r3
 80046c2:	4a0e      	ldr	r2, [pc, #56]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046c4:	68d2      	ldr	r2, [r2, #12]
 80046c6:	0a12      	lsrs	r2, r2, #8
 80046c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80046cc:	fb02 f303 	mul.w	r3, r2, r3
 80046d0:	617b      	str	r3, [r7, #20]
    break;
 80046d2:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046d4:	4b09      	ldr	r3, [pc, #36]	; (80046fc <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	0e5b      	lsrs	r3, r3, #25
 80046da:	f003 0303 	and.w	r3, r3, #3
 80046de:	3301      	adds	r3, #1
 80046e0:	005b      	lsls	r3, r3, #1
 80046e2:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046ec:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 80046ee:	687b      	ldr	r3, [r7, #4]
}
 80046f0:	4618      	mov	r0, r3
 80046f2:	371c      	adds	r7, #28
 80046f4:	46bd      	mov	sp, r7
 80046f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fa:	4770      	bx	lr
 80046fc:	40021000 	.word	0x40021000
 8004700:	016e3600 	.word	0x016e3600
 8004704:	00f42400 	.word	0x00f42400

08004708 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b086      	sub	sp, #24
 800470c:	af00      	add	r7, sp, #0
 800470e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004710:	2300      	movs	r3, #0
 8004712:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004714:	2300      	movs	r3, #0
 8004716:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004720:	2b00      	cmp	r3, #0
 8004722:	f000 8098 	beq.w	8004856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004726:	2300      	movs	r3, #0
 8004728:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800472a:	4b43      	ldr	r3, [pc, #268]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800472c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800472e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004732:	2b00      	cmp	r3, #0
 8004734:	d10d      	bne.n	8004752 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004736:	4b40      	ldr	r3, [pc, #256]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004738:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800473a:	4a3f      	ldr	r2, [pc, #252]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800473c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004740:	6593      	str	r3, [r2, #88]	; 0x58
 8004742:	4b3d      	ldr	r3, [pc, #244]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004744:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004746:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800474a:	60bb      	str	r3, [r7, #8]
 800474c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800474e:	2301      	movs	r3, #1
 8004750:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004752:	4b3a      	ldr	r3, [pc, #232]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	4a39      	ldr	r2, [pc, #228]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004758:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800475c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800475e:	f7fc fd6f 	bl	8001240 <HAL_GetTick>
 8004762:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004764:	e009      	b.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004766:	f7fc fd6b 	bl	8001240 <HAL_GetTick>
 800476a:	4602      	mov	r2, r0
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	1ad3      	subs	r3, r2, r3
 8004770:	2b02      	cmp	r3, #2
 8004772:	d902      	bls.n	800477a <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8004774:	2303      	movs	r3, #3
 8004776:	74fb      	strb	r3, [r7, #19]
        break;
 8004778:	e005      	b.n	8004786 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800477a:	4b30      	ldr	r3, [pc, #192]	; (800483c <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004782:	2b00      	cmp	r3, #0
 8004784:	d0ef      	beq.n	8004766 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8004786:	7cfb      	ldrb	r3, [r7, #19]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d159      	bne.n	8004840 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800478c:	4b2a      	ldr	r3, [pc, #168]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800478e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004792:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004796:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004798:	697b      	ldr	r3, [r7, #20]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d01e      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d019      	beq.n	80047dc <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80047a8:	4b23      	ldr	r3, [pc, #140]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047b2:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80047b4:	4b20      	ldr	r3, [pc, #128]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	4a1f      	ldr	r2, [pc, #124]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80047c0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80047c4:	4b1c      	ldr	r3, [pc, #112]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ca:	4a1b      	ldr	r2, [pc, #108]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80047d0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80047d4:	4a18      	ldr	r2, [pc, #96]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80047d6:	697b      	ldr	r3, [r7, #20]
 80047d8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80047dc:	697b      	ldr	r3, [r7, #20]
 80047de:	f003 0301 	and.w	r3, r3, #1
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d016      	beq.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80047e6:	f7fc fd2b 	bl	8001240 <HAL_GetTick>
 80047ea:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80047ec:	e00b      	b.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80047ee:	f7fc fd27 	bl	8001240 <HAL_GetTick>
 80047f2:	4602      	mov	r2, r0
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	1ad3      	subs	r3, r2, r3
 80047f8:	f241 3288 	movw	r2, #5000	; 0x1388
 80047fc:	4293      	cmp	r3, r2
 80047fe:	d902      	bls.n	8004806 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004800:	2303      	movs	r3, #3
 8004802:	74fb      	strb	r3, [r7, #19]
            break;
 8004804:	e006      	b.n	8004814 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004806:	4b0c      	ldr	r3, [pc, #48]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004808:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800480c:	f003 0302 	and.w	r3, r3, #2
 8004810:	2b00      	cmp	r3, #0
 8004812:	d0ec      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004814:	7cfb      	ldrb	r3, [r7, #19]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d10b      	bne.n	8004832 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800481a:	4b07      	ldr	r3, [pc, #28]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800481c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004820:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004828:	4903      	ldr	r1, [pc, #12]	; (8004838 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800482a:	4313      	orrs	r3, r2
 800482c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8004830:	e008      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004832:	7cfb      	ldrb	r3, [r7, #19]
 8004834:	74bb      	strb	r3, [r7, #18]
 8004836:	e005      	b.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004838:	40021000 	.word	0x40021000
 800483c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004840:	7cfb      	ldrb	r3, [r7, #19]
 8004842:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004844:	7c7b      	ldrb	r3, [r7, #17]
 8004846:	2b01      	cmp	r3, #1
 8004848:	d105      	bne.n	8004856 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800484a:	4ba7      	ldr	r3, [pc, #668]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800484c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800484e:	4aa6      	ldr	r2, [pc, #664]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004850:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004854:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f003 0301 	and.w	r3, r3, #1
 800485e:	2b00      	cmp	r3, #0
 8004860:	d00a      	beq.n	8004878 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004862:	4ba1      	ldr	r3, [pc, #644]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004864:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004868:	f023 0203 	bic.w	r2, r3, #3
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	685b      	ldr	r3, [r3, #4]
 8004870:	499d      	ldr	r1, [pc, #628]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004872:	4313      	orrs	r3, r2
 8004874:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	f003 0302 	and.w	r3, r3, #2
 8004880:	2b00      	cmp	r3, #0
 8004882:	d00a      	beq.n	800489a <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004884:	4b98      	ldr	r3, [pc, #608]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004886:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800488a:	f023 020c 	bic.w	r2, r3, #12
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	4995      	ldr	r1, [pc, #596]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004894:	4313      	orrs	r3, r2
 8004896:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f003 0304 	and.w	r3, r3, #4
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80048a6:	4b90      	ldr	r3, [pc, #576]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048a8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ac:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	68db      	ldr	r3, [r3, #12]
 80048b4:	498c      	ldr	r1, [pc, #560]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048b6:	4313      	orrs	r3, r2
 80048b8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	f003 0308 	and.w	r3, r3, #8
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d00a      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048c8:	4b87      	ldr	r3, [pc, #540]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048ce:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	691b      	ldr	r3, [r3, #16]
 80048d6:	4984      	ldr	r1, [pc, #528]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048d8:	4313      	orrs	r3, r2
 80048da:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	681b      	ldr	r3, [r3, #0]
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00a      	beq.n	8004900 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80048ea:	4b7f      	ldr	r3, [pc, #508]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048f0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	695b      	ldr	r3, [r3, #20]
 80048f8:	497b      	ldr	r1, [pc, #492]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80048fa:	4313      	orrs	r3, r2
 80048fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f003 0320 	and.w	r3, r3, #32
 8004908:	2b00      	cmp	r3, #0
 800490a:	d00a      	beq.n	8004922 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800490c:	4b76      	ldr	r3, [pc, #472]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800490e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004912:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	699b      	ldr	r3, [r3, #24]
 800491a:	4973      	ldr	r1, [pc, #460]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800491c:	4313      	orrs	r3, r2
 800491e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800492a:	2b00      	cmp	r3, #0
 800492c:	d00a      	beq.n	8004944 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800492e:	4b6e      	ldr	r3, [pc, #440]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004930:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004934:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	69db      	ldr	r3, [r3, #28]
 800493c:	496a      	ldr	r1, [pc, #424]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800493e:	4313      	orrs	r3, r2
 8004940:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800494c:	2b00      	cmp	r3, #0
 800494e:	d00a      	beq.n	8004966 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004950:	4b65      	ldr	r3, [pc, #404]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004952:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004956:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6a1b      	ldr	r3, [r3, #32]
 800495e:	4962      	ldr	r1, [pc, #392]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004960:	4313      	orrs	r3, r2
 8004962:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496e:	2b00      	cmp	r3, #0
 8004970:	d00a      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004972:	4b5d      	ldr	r3, [pc, #372]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004974:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004978:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004980:	4959      	ldr	r1, [pc, #356]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004982:	4313      	orrs	r3, r2
 8004984:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d00a      	beq.n	80049aa <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004994:	4b54      	ldr	r3, [pc, #336]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004996:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800499a:	f023 0203 	bic.w	r2, r3, #3
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049a2:	4951      	ldr	r1, [pc, #324]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049a4:	4313      	orrs	r3, r2
 80049a6:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d00a      	beq.n	80049cc <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80049b6:	4b4c      	ldr	r3, [pc, #304]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049bc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049c4:	4948      	ldr	r1, [pc, #288]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049c6:	4313      	orrs	r3, r2
 80049c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80049d4:	2b00      	cmp	r3, #0
 80049d6:	d015      	beq.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80049d8:	4b43      	ldr	r3, [pc, #268]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80049de:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049e6:	4940      	ldr	r1, [pc, #256]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049e8:	4313      	orrs	r3, r2
 80049ea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80049f2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049f6:	d105      	bne.n	8004a04 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80049f8:	4b3b      	ldr	r3, [pc, #236]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	4a3a      	ldr	r2, [pc, #232]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80049fe:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a02:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d015      	beq.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004a10:	4b35      	ldr	r3, [pc, #212]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a16:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1e:	4932      	ldr	r1, [pc, #200]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a20:	4313      	orrs	r3, r2
 8004a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a2e:	d105      	bne.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a30:	4b2d      	ldr	r3, [pc, #180]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	4a2c      	ldr	r2, [pc, #176]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a36:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a3a:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d015      	beq.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004a48:	4b27      	ldr	r3, [pc, #156]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a4e:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a56:	4924      	ldr	r1, [pc, #144]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a62:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004a66:	d105      	bne.n	8004a74 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004a68:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6a:	68db      	ldr	r3, [r3, #12]
 8004a6c:	4a1e      	ldr	r2, [pc, #120]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a6e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004a72:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d015      	beq.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004a80:	4b19      	ldr	r3, [pc, #100]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004a86:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a8e:	4916      	ldr	r1, [pc, #88]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004a90:	4313      	orrs	r3, r2
 8004a92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a9a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004a9e:	d105      	bne.n	8004aac <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aa0:	4b11      	ldr	r3, [pc, #68]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	4a10      	ldr	r2, [pc, #64]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aa6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004aaa:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d019      	beq.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004ab8:	4b0b      	ldr	r3, [pc, #44]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004aba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004abe:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac6:	4908      	ldr	r1, [pc, #32]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ac8:	4313      	orrs	r3, r2
 8004aca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ad2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004ad6:	d109      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004ad8:	4b03      	ldr	r3, [pc, #12]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	4a02      	ldr	r2, [pc, #8]	; (8004ae8 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004ade:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004ae2:	60d3      	str	r3, [r2, #12]
 8004ae4:	e002      	b.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8004ae6:	bf00      	nop
 8004ae8:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d015      	beq.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004af8:	4b29      	ldr	r3, [pc, #164]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004afa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004afe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b06:	4926      	ldr	r1, [pc, #152]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b12:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004b16:	d105      	bne.n	8004b24 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b18:	4b21      	ldr	r3, [pc, #132]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b1a:	68db      	ldr	r3, [r3, #12]
 8004b1c:	4a20      	ldr	r2, [pc, #128]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b22:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d015      	beq.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004b30:	4b1b      	ldr	r3, [pc, #108]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004b36:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b3e:	4918      	ldr	r1, [pc, #96]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b40:	4313      	orrs	r3, r2
 8004b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b4e:	d105      	bne.n	8004b5c <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004b50:	4b13      	ldr	r3, [pc, #76]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b52:	68db      	ldr	r3, [r3, #12]
 8004b54:	4a12      	ldr	r2, [pc, #72]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b56:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5a:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d015      	beq.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004b68:	4b0d      	ldr	r3, [pc, #52]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b6a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004b6e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b76:	490a      	ldr	r1, [pc, #40]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b82:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b86:	d105      	bne.n	8004b94 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b88:	4b05      	ldr	r3, [pc, #20]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b8a:	68db      	ldr	r3, [r3, #12]
 8004b8c:	4a04      	ldr	r2, [pc, #16]	; (8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004b8e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004b92:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004b94:	7cbb      	ldrb	r3, [r7, #18]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3718      	adds	r7, #24
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40021000 	.word	0x40021000

08004ba4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b082      	sub	sp, #8
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d101      	bne.n	8004bb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004bb2:	2301      	movs	r3, #1
 8004bb4:	e049      	b.n	8004c4a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d106      	bne.n	8004bd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	2200      	movs	r2, #0
 8004bc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004bca:	6878      	ldr	r0, [r7, #4]
 8004bcc:	f7fc f9c4 	bl	8000f58 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2202      	movs	r2, #2
 8004bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681a      	ldr	r2, [r3, #0]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	3304      	adds	r3, #4
 8004be0:	4619      	mov	r1, r3
 8004be2:	4610      	mov	r0, r2
 8004be4:	f000 fdc6 	bl	8005774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2201      	movs	r2, #1
 8004bec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	2201      	movs	r2, #1
 8004bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2201      	movs	r2, #1
 8004bfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2201      	movs	r2, #1
 8004c04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	2201      	movs	r2, #1
 8004c0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	2201      	movs	r2, #1
 8004c14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2201      	movs	r2, #1
 8004c1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2201      	movs	r2, #1
 8004c2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2201      	movs	r2, #1
 8004c34:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004c48:	2300      	movs	r3, #0
}
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	3708      	adds	r7, #8
 8004c4e:	46bd      	mov	sp, r7
 8004c50:	bd80      	pop	{r7, pc}
	...

08004c54 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b085      	sub	sp, #20
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c62:	b2db      	uxtb	r3, r3
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	d001      	beq.n	8004c6c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	e04c      	b.n	8004d06 <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2202      	movs	r2, #2
 8004c70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	4a26      	ldr	r2, [pc, #152]	; (8004d14 <HAL_TIM_Base_Start+0xc0>)
 8004c7a:	4293      	cmp	r3, r2
 8004c7c:	d022      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c86:	d01d      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	4a22      	ldr	r2, [pc, #136]	; (8004d18 <HAL_TIM_Base_Start+0xc4>)
 8004c8e:	4293      	cmp	r3, r2
 8004c90:	d018      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	4a21      	ldr	r2, [pc, #132]	; (8004d1c <HAL_TIM_Base_Start+0xc8>)
 8004c98:	4293      	cmp	r3, r2
 8004c9a:	d013      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4a1f      	ldr	r2, [pc, #124]	; (8004d20 <HAL_TIM_Base_Start+0xcc>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d00e      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4a1e      	ldr	r2, [pc, #120]	; (8004d24 <HAL_TIM_Base_Start+0xd0>)
 8004cac:	4293      	cmp	r3, r2
 8004cae:	d009      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	4a1c      	ldr	r2, [pc, #112]	; (8004d28 <HAL_TIM_Base_Start+0xd4>)
 8004cb6:	4293      	cmp	r3, r2
 8004cb8:	d004      	beq.n	8004cc4 <HAL_TIM_Base_Start+0x70>
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	4a1b      	ldr	r2, [pc, #108]	; (8004d2c <HAL_TIM_Base_Start+0xd8>)
 8004cc0:	4293      	cmp	r3, r2
 8004cc2:	d115      	bne.n	8004cf0 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689a      	ldr	r2, [r3, #8]
 8004cca:	4b19      	ldr	r3, [pc, #100]	; (8004d30 <HAL_TIM_Base_Start+0xdc>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2b06      	cmp	r3, #6
 8004cd4:	d015      	beq.n	8004d02 <HAL_TIM_Base_Start+0xae>
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004cdc:	d011      	beq.n	8004d02 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	681a      	ldr	r2, [r3, #0]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f042 0201 	orr.w	r2, r2, #1
 8004cec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004cee:	e008      	b.n	8004d02 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	681a      	ldr	r2, [r3, #0]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	601a      	str	r2, [r3, #0]
 8004d00:	e000      	b.n	8004d04 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d02:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d04:	2300      	movs	r3, #0
}
 8004d06:	4618      	mov	r0, r3
 8004d08:	3714      	adds	r7, #20
 8004d0a:	46bd      	mov	sp, r7
 8004d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d10:	4770      	bx	lr
 8004d12:	bf00      	nop
 8004d14:	40012c00 	.word	0x40012c00
 8004d18:	40000400 	.word	0x40000400
 8004d1c:	40000800 	.word	0x40000800
 8004d20:	40000c00 	.word	0x40000c00
 8004d24:	40013400 	.word	0x40013400
 8004d28:	40014000 	.word	0x40014000
 8004d2c:	40015000 	.word	0x40015000
 8004d30:	00010007 	.word	0x00010007

08004d34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b082      	sub	sp, #8
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d101      	bne.n	8004d46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d42:	2301      	movs	r3, #1
 8004d44:	e049      	b.n	8004dda <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d4c:	b2db      	uxtb	r3, r3
 8004d4e:	2b00      	cmp	r3, #0
 8004d50:	d106      	bne.n	8004d60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2200      	movs	r2, #0
 8004d56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d5a:	6878      	ldr	r0, [r7, #4]
 8004d5c:	f000 f841 	bl	8004de2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	2202      	movs	r2, #2
 8004d64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681a      	ldr	r2, [r3, #0]
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	3304      	adds	r3, #4
 8004d70:	4619      	mov	r1, r3
 8004d72:	4610      	mov	r0, r2
 8004d74:	f000 fcfe 	bl	8005774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2201      	movs	r2, #1
 8004d7c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	2201      	movs	r2, #1
 8004d84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2201      	movs	r2, #1
 8004d8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	2201      	movs	r2, #1
 8004d94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2201      	movs	r2, #1
 8004d9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	2201      	movs	r2, #1
 8004da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	2201      	movs	r2, #1
 8004dac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2201      	movs	r2, #1
 8004db4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	2201      	movs	r2, #1
 8004dbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2201      	movs	r2, #1
 8004dc4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004dd8:	2300      	movs	r3, #0
}
 8004dda:	4618      	mov	r0, r3
 8004ddc:	3708      	adds	r7, #8
 8004dde:	46bd      	mov	sp, r7
 8004de0:	bd80      	pop	{r7, pc}

08004de2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004de2:	b480      	push	{r7}
 8004de4:	b083      	sub	sp, #12
 8004de6:	af00      	add	r7, sp, #0
 8004de8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004dea:	bf00      	nop
 8004dec:	370c      	adds	r7, #12
 8004dee:	46bd      	mov	sp, r7
 8004df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004df4:	4770      	bx	lr
	...

08004df8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004df8:	b580      	push	{r7, lr}
 8004dfa:	b084      	sub	sp, #16
 8004dfc:	af00      	add	r7, sp, #0
 8004dfe:	6078      	str	r0, [r7, #4]
 8004e00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e02:	683b      	ldr	r3, [r7, #0]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d109      	bne.n	8004e1c <HAL_TIM_PWM_Start+0x24>
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b01      	cmp	r3, #1
 8004e12:	bf14      	ite	ne
 8004e14:	2301      	movne	r3, #1
 8004e16:	2300      	moveq	r3, #0
 8004e18:	b2db      	uxtb	r3, r3
 8004e1a:	e03c      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	2b04      	cmp	r3, #4
 8004e20:	d109      	bne.n	8004e36 <HAL_TIM_PWM_Start+0x3e>
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e28:	b2db      	uxtb	r3, r3
 8004e2a:	2b01      	cmp	r3, #1
 8004e2c:	bf14      	ite	ne
 8004e2e:	2301      	movne	r3, #1
 8004e30:	2300      	moveq	r3, #0
 8004e32:	b2db      	uxtb	r3, r3
 8004e34:	e02f      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e36:	683b      	ldr	r3, [r7, #0]
 8004e38:	2b08      	cmp	r3, #8
 8004e3a:	d109      	bne.n	8004e50 <HAL_TIM_PWM_Start+0x58>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e42:	b2db      	uxtb	r3, r3
 8004e44:	2b01      	cmp	r3, #1
 8004e46:	bf14      	ite	ne
 8004e48:	2301      	movne	r3, #1
 8004e4a:	2300      	moveq	r3, #0
 8004e4c:	b2db      	uxtb	r3, r3
 8004e4e:	e022      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e50:	683b      	ldr	r3, [r7, #0]
 8004e52:	2b0c      	cmp	r3, #12
 8004e54:	d109      	bne.n	8004e6a <HAL_TIM_PWM_Start+0x72>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e5c:	b2db      	uxtb	r3, r3
 8004e5e:	2b01      	cmp	r3, #1
 8004e60:	bf14      	ite	ne
 8004e62:	2301      	movne	r3, #1
 8004e64:	2300      	moveq	r3, #0
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	e015      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	2b10      	cmp	r3, #16
 8004e6e:	d109      	bne.n	8004e84 <HAL_TIM_PWM_Start+0x8c>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004e76:	b2db      	uxtb	r3, r3
 8004e78:	2b01      	cmp	r3, #1
 8004e7a:	bf14      	ite	ne
 8004e7c:	2301      	movne	r3, #1
 8004e7e:	2300      	moveq	r3, #0
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	e008      	b.n	8004e96 <HAL_TIM_PWM_Start+0x9e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	2b01      	cmp	r3, #1
 8004e8e:	bf14      	ite	ne
 8004e90:	2301      	movne	r3, #1
 8004e92:	2300      	moveq	r3, #0
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d001      	beq.n	8004e9e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004e9a:	2301      	movs	r3, #1
 8004e9c:	e0a6      	b.n	8004fec <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d104      	bne.n	8004eae <HAL_TIM_PWM_Start+0xb6>
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2202      	movs	r2, #2
 8004ea8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eac:	e023      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004eae:	683b      	ldr	r3, [r7, #0]
 8004eb0:	2b04      	cmp	r3, #4
 8004eb2:	d104      	bne.n	8004ebe <HAL_TIM_PWM_Start+0xc6>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2202      	movs	r2, #2
 8004eb8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ebc:	e01b      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	2b08      	cmp	r3, #8
 8004ec2:	d104      	bne.n	8004ece <HAL_TIM_PWM_Start+0xd6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2202      	movs	r2, #2
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ecc:	e013      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	2b0c      	cmp	r3, #12
 8004ed2:	d104      	bne.n	8004ede <HAL_TIM_PWM_Start+0xe6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2202      	movs	r2, #2
 8004ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004edc:	e00b      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004ede:	683b      	ldr	r3, [r7, #0]
 8004ee0:	2b10      	cmp	r3, #16
 8004ee2:	d104      	bne.n	8004eee <HAL_TIM_PWM_Start+0xf6>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2202      	movs	r2, #2
 8004ee8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004eec:	e003      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xfe>
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	2202      	movs	r2, #2
 8004ef2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ef6:	687b      	ldr	r3, [r7, #4]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	2201      	movs	r2, #1
 8004efc:	6839      	ldr	r1, [r7, #0]
 8004efe:	4618      	mov	r0, r3
 8004f00:	f001 f8b2 	bl	8006068 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a3a      	ldr	r2, [pc, #232]	; (8004ff4 <HAL_TIM_PWM_Start+0x1fc>)
 8004f0a:	4293      	cmp	r3, r2
 8004f0c:	d018      	beq.n	8004f40 <HAL_TIM_PWM_Start+0x148>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a39      	ldr	r2, [pc, #228]	; (8004ff8 <HAL_TIM_PWM_Start+0x200>)
 8004f14:	4293      	cmp	r3, r2
 8004f16:	d013      	beq.n	8004f40 <HAL_TIM_PWM_Start+0x148>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	4a37      	ldr	r2, [pc, #220]	; (8004ffc <HAL_TIM_PWM_Start+0x204>)
 8004f1e:	4293      	cmp	r3, r2
 8004f20:	d00e      	beq.n	8004f40 <HAL_TIM_PWM_Start+0x148>
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a36      	ldr	r2, [pc, #216]	; (8005000 <HAL_TIM_PWM_Start+0x208>)
 8004f28:	4293      	cmp	r3, r2
 8004f2a:	d009      	beq.n	8004f40 <HAL_TIM_PWM_Start+0x148>
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	4a34      	ldr	r2, [pc, #208]	; (8005004 <HAL_TIM_PWM_Start+0x20c>)
 8004f32:	4293      	cmp	r3, r2
 8004f34:	d004      	beq.n	8004f40 <HAL_TIM_PWM_Start+0x148>
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	4a33      	ldr	r2, [pc, #204]	; (8005008 <HAL_TIM_PWM_Start+0x210>)
 8004f3c:	4293      	cmp	r3, r2
 8004f3e:	d101      	bne.n	8004f44 <HAL_TIM_PWM_Start+0x14c>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <HAL_TIM_PWM_Start+0x14e>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d007      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f58:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a25      	ldr	r2, [pc, #148]	; (8004ff4 <HAL_TIM_PWM_Start+0x1fc>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d022      	beq.n	8004faa <HAL_TIM_PWM_Start+0x1b2>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f6c:	d01d      	beq.n	8004faa <HAL_TIM_PWM_Start+0x1b2>
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	4a26      	ldr	r2, [pc, #152]	; (800500c <HAL_TIM_PWM_Start+0x214>)
 8004f74:	4293      	cmp	r3, r2
 8004f76:	d018      	beq.n	8004faa <HAL_TIM_PWM_Start+0x1b2>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a24      	ldr	r2, [pc, #144]	; (8005010 <HAL_TIM_PWM_Start+0x218>)
 8004f7e:	4293      	cmp	r3, r2
 8004f80:	d013      	beq.n	8004faa <HAL_TIM_PWM_Start+0x1b2>
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	4a23      	ldr	r2, [pc, #140]	; (8005014 <HAL_TIM_PWM_Start+0x21c>)
 8004f88:	4293      	cmp	r3, r2
 8004f8a:	d00e      	beq.n	8004faa <HAL_TIM_PWM_Start+0x1b2>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	4a19      	ldr	r2, [pc, #100]	; (8004ff8 <HAL_TIM_PWM_Start+0x200>)
 8004f92:	4293      	cmp	r3, r2
 8004f94:	d009      	beq.n	8004faa <HAL_TIM_PWM_Start+0x1b2>
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	4a18      	ldr	r2, [pc, #96]	; (8004ffc <HAL_TIM_PWM_Start+0x204>)
 8004f9c:	4293      	cmp	r3, r2
 8004f9e:	d004      	beq.n	8004faa <HAL_TIM_PWM_Start+0x1b2>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	4a18      	ldr	r2, [pc, #96]	; (8005008 <HAL_TIM_PWM_Start+0x210>)
 8004fa6:	4293      	cmp	r3, r2
 8004fa8:	d115      	bne.n	8004fd6 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	689a      	ldr	r2, [r3, #8]
 8004fb0:	4b19      	ldr	r3, [pc, #100]	; (8005018 <HAL_TIM_PWM_Start+0x220>)
 8004fb2:	4013      	ands	r3, r2
 8004fb4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fb6:	68fb      	ldr	r3, [r7, #12]
 8004fb8:	2b06      	cmp	r3, #6
 8004fba:	d015      	beq.n	8004fe8 <HAL_TIM_PWM_Start+0x1f0>
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004fc2:	d011      	beq.n	8004fe8 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0201 	orr.w	r2, r2, #1
 8004fd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fd4:	e008      	b.n	8004fe8 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	681a      	ldr	r2, [r3, #0]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	f042 0201 	orr.w	r2, r2, #1
 8004fe4:	601a      	str	r2, [r3, #0]
 8004fe6:	e000      	b.n	8004fea <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004fe8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004fea:	2300      	movs	r3, #0
}
 8004fec:	4618      	mov	r0, r3
 8004fee:	3710      	adds	r7, #16
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	bd80      	pop	{r7, pc}
 8004ff4:	40012c00 	.word	0x40012c00
 8004ff8:	40013400 	.word	0x40013400
 8004ffc:	40014000 	.word	0x40014000
 8005000:	40014400 	.word	0x40014400
 8005004:	40014800 	.word	0x40014800
 8005008:	40015000 	.word	0x40015000
 800500c:	40000400 	.word	0x40000400
 8005010:	40000800 	.word	0x40000800
 8005014:	40000c00 	.word	0x40000c00
 8005018:	00010007 	.word	0x00010007

0800501c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800501c:	b580      	push	{r7, lr}
 800501e:	b084      	sub	sp, #16
 8005020:	af00      	add	r7, sp, #0
 8005022:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	68db      	ldr	r3, [r3, #12]
 800502a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	691b      	ldr	r3, [r3, #16]
 8005032:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	f003 0302 	and.w	r3, r3, #2
 800503a:	2b00      	cmp	r3, #0
 800503c:	d020      	beq.n	8005080 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	f003 0302 	and.w	r3, r3, #2
 8005044:	2b00      	cmp	r3, #0
 8005046:	d01b      	beq.n	8005080 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	f06f 0202 	mvn.w	r2, #2
 8005050:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2201      	movs	r2, #1
 8005056:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	699b      	ldr	r3, [r3, #24]
 800505e:	f003 0303 	and.w	r3, r3, #3
 8005062:	2b00      	cmp	r3, #0
 8005064:	d003      	beq.n	800506e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005066:	6878      	ldr	r0, [r7, #4]
 8005068:	f000 fb66 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 800506c:	e005      	b.n	800507a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800506e:	6878      	ldr	r0, [r7, #4]
 8005070:	f000 fb58 	bl	8005724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005074:	6878      	ldr	r0, [r7, #4]
 8005076:	f000 fb69 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	2200      	movs	r2, #0
 800507e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0304 	and.w	r3, r3, #4
 8005086:	2b00      	cmp	r3, #0
 8005088:	d020      	beq.n	80050cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0204 	mvn.w	r2, #4
 800509c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2202      	movs	r2, #2
 80050a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fb40 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fb32 	bl	8005724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fb43 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0308 	and.w	r3, r3, #8
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d020      	beq.n	8005118 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0308 	and.w	r3, r3, #8
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0208 	mvn.w	r2, #8
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2204      	movs	r2, #4
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	69db      	ldr	r3, [r3, #28]
 80050f6:	f003 0303 	and.w	r3, r3, #3
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fb1a 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fb0c 	bl	8005724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fb1d 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0310 	and.w	r3, r3, #16
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0310 	and.w	r3, r3, #16
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0210 	mvn.w	r2, #16
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2208      	movs	r2, #8
 800513a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 faf4 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fae6 	bl	8005724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 faf7 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0301 	and.w	r3, r3, #1
 800516a:	2b00      	cmp	r3, #0
 800516c:	d00c      	beq.n	8005188 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0301 	and.w	r3, r3, #1
 8005174:	2b00      	cmp	r3, #0
 8005176:	d007      	beq.n	8005188 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0201 	mvn.w	r2, #1
 8005180:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f000 fac4 	bl	8005710 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800518e:	2b00      	cmp	r3, #0
 8005190:	d104      	bne.n	800519c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005198:	2b00      	cmp	r3, #0
 800519a:	d00c      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d007      	beq.n	80051b6 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 80051ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051b0:	6878      	ldr	r0, [r7, #4]
 80051b2:	f001 f81f 	bl	80061f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80051b6:	68bb      	ldr	r3, [r7, #8]
 80051b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d00c      	beq.n	80051da <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d007      	beq.n	80051da <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80051d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80051d4:	6878      	ldr	r0, [r7, #4]
 80051d6:	f001 f817 	bl	8006208 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80051da:	68bb      	ldr	r3, [r7, #8]
 80051dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00c      	beq.n	80051fe <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d007      	beq.n	80051fe <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80051f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80051f8:	6878      	ldr	r0, [r7, #4]
 80051fa:	f000 fab1 	bl	8005760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80051fe:	68bb      	ldr	r3, [r7, #8]
 8005200:	f003 0320 	and.w	r3, r3, #32
 8005204:	2b00      	cmp	r3, #0
 8005206:	d00c      	beq.n	8005222 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	f003 0320 	and.w	r3, r3, #32
 800520e:	2b00      	cmp	r3, #0
 8005210:	d007      	beq.n	8005222 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f06f 0220 	mvn.w	r2, #32
 800521a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800521c:	6878      	ldr	r0, [r7, #4]
 800521e:	f000 ffdf 	bl	80061e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005222:	68bb      	ldr	r3, [r7, #8]
 8005224:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005228:	2b00      	cmp	r3, #0
 800522a:	d00c      	beq.n	8005246 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005232:	2b00      	cmp	r3, #0
 8005234:	d007      	beq.n	8005246 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800523e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8005240:	6878      	ldr	r0, [r7, #4]
 8005242:	f000 ffeb 	bl	800621c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005246:	68bb      	ldr	r3, [r7, #8]
 8005248:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d00c      	beq.n	800526a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d007      	beq.n	800526a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 8005262:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8005264:	6878      	ldr	r0, [r7, #4]
 8005266:	f000 ffe3 	bl	8006230 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 800526a:	68bb      	ldr	r3, [r7, #8]
 800526c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005270:	2b00      	cmp	r3, #0
 8005272:	d00c      	beq.n	800528e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800527a:	2b00      	cmp	r3, #0
 800527c:	d007      	beq.n	800528e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8005286:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8005288:	6878      	ldr	r0, [r7, #4]
 800528a:	f000 ffdb 	bl	8006244 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00c      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d007      	beq.n	80052b2 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	681b      	ldr	r3, [r3, #0]
 80052a6:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80052aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80052ac:	6878      	ldr	r0, [r7, #4]
 80052ae:	f000 ffd3 	bl	8006258 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052b2:	bf00      	nop
 80052b4:	3710      	adds	r7, #16
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}
	...

080052bc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	b086      	sub	sp, #24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	60f8      	str	r0, [r7, #12]
 80052c4:	60b9      	str	r1, [r7, #8]
 80052c6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80052c8:	2300      	movs	r3, #0
 80052ca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80052d2:	2b01      	cmp	r3, #1
 80052d4:	d101      	bne.n	80052da <HAL_TIM_PWM_ConfigChannel+0x1e>
 80052d6:	2302      	movs	r3, #2
 80052d8:	e0ff      	b.n	80054da <HAL_TIM_PWM_ConfigChannel+0x21e>
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2201      	movs	r2, #1
 80052de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	2b14      	cmp	r3, #20
 80052e6:	f200 80f0 	bhi.w	80054ca <HAL_TIM_PWM_ConfigChannel+0x20e>
 80052ea:	a201      	add	r2, pc, #4	; (adr r2, 80052f0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80052ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80052f0:	08005345 	.word	0x08005345
 80052f4:	080054cb 	.word	0x080054cb
 80052f8:	080054cb 	.word	0x080054cb
 80052fc:	080054cb 	.word	0x080054cb
 8005300:	08005385 	.word	0x08005385
 8005304:	080054cb 	.word	0x080054cb
 8005308:	080054cb 	.word	0x080054cb
 800530c:	080054cb 	.word	0x080054cb
 8005310:	080053c7 	.word	0x080053c7
 8005314:	080054cb 	.word	0x080054cb
 8005318:	080054cb 	.word	0x080054cb
 800531c:	080054cb 	.word	0x080054cb
 8005320:	08005407 	.word	0x08005407
 8005324:	080054cb 	.word	0x080054cb
 8005328:	080054cb 	.word	0x080054cb
 800532c:	080054cb 	.word	0x080054cb
 8005330:	08005449 	.word	0x08005449
 8005334:	080054cb 	.word	0x080054cb
 8005338:	080054cb 	.word	0x080054cb
 800533c:	080054cb 	.word	0x080054cb
 8005340:	08005489 	.word	0x08005489
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	68b9      	ldr	r1, [r7, #8]
 800534a:	4618      	mov	r0, r3
 800534c:	f000 fac6 	bl	80058dc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	699a      	ldr	r2, [r3, #24]
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f042 0208 	orr.w	r2, r2, #8
 800535e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699a      	ldr	r2, [r3, #24]
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f022 0204 	bic.w	r2, r2, #4
 800536e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	6999      	ldr	r1, [r3, #24]
 8005376:	68bb      	ldr	r3, [r7, #8]
 8005378:	691a      	ldr	r2, [r3, #16]
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	430a      	orrs	r2, r1
 8005380:	619a      	str	r2, [r3, #24]
      break;
 8005382:	e0a5      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005384:	68fb      	ldr	r3, [r7, #12]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	68b9      	ldr	r1, [r7, #8]
 800538a:	4618      	mov	r0, r3
 800538c:	f000 fb40 	bl	8005a10 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	699a      	ldr	r2, [r3, #24]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800539e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	699a      	ldr	r2, [r3, #24]
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	681b      	ldr	r3, [r3, #0]
 80053aa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6999      	ldr	r1, [r3, #24]
 80053b6:	68bb      	ldr	r3, [r7, #8]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	021a      	lsls	r2, r3, #8
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	430a      	orrs	r2, r1
 80053c2:	619a      	str	r2, [r3, #24]
      break;
 80053c4:	e084      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	68b9      	ldr	r1, [r7, #8]
 80053cc:	4618      	mov	r0, r3
 80053ce:	f000 fbb3 	bl	8005b38 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	69da      	ldr	r2, [r3, #28]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f042 0208 	orr.w	r2, r2, #8
 80053e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	69da      	ldr	r2, [r3, #28]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	f022 0204 	bic.w	r2, r2, #4
 80053f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	69d9      	ldr	r1, [r3, #28]
 80053f8:	68bb      	ldr	r3, [r7, #8]
 80053fa:	691a      	ldr	r2, [r3, #16]
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	430a      	orrs	r2, r1
 8005402:	61da      	str	r2, [r3, #28]
      break;
 8005404:	e064      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68b9      	ldr	r1, [r7, #8]
 800540c:	4618      	mov	r0, r3
 800540e:	f000 fc25 	bl	8005c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	69da      	ldr	r2, [r3, #28]
 8005418:	68fb      	ldr	r3, [r7, #12]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005420:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	69da      	ldr	r2, [r3, #28]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005430:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	69d9      	ldr	r1, [r3, #28]
 8005438:	68bb      	ldr	r3, [r7, #8]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	021a      	lsls	r2, r3, #8
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	430a      	orrs	r2, r1
 8005444:	61da      	str	r2, [r3, #28]
      break;
 8005446:	e043      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68b9      	ldr	r1, [r7, #8]
 800544e:	4618      	mov	r0, r3
 8005450:	f000 fc98 	bl	8005d84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f042 0208 	orr.w	r2, r2, #8
 8005462:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f022 0204 	bic.w	r2, r2, #4
 8005472:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	6d19      	ldr	r1, [r3, #80]	; 0x50
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	691a      	ldr	r2, [r3, #16]
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	430a      	orrs	r2, r1
 8005484:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8005486:	e023      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	4618      	mov	r0, r3
 8005490:	f000 fce2 	bl	8005e58 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80054a2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80054aa:	68fb      	ldr	r3, [r7, #12]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054b2:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80054ba:	68bb      	ldr	r3, [r7, #8]
 80054bc:	691b      	ldr	r3, [r3, #16]
 80054be:	021a      	lsls	r2, r3, #8
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	430a      	orrs	r2, r1
 80054c6:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80054c8:	e002      	b.n	80054d0 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80054ca:	2301      	movs	r3, #1
 80054cc:	75fb      	strb	r3, [r7, #23]
      break;
 80054ce:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	2200      	movs	r2, #0
 80054d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80054d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80054da:	4618      	mov	r0, r3
 80054dc:	3718      	adds	r7, #24
 80054de:	46bd      	mov	sp, r7
 80054e0:	bd80      	pop	{r7, pc}
 80054e2:	bf00      	nop

080054e4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80054f8:	2b01      	cmp	r3, #1
 80054fa:	d101      	bne.n	8005500 <HAL_TIM_ConfigClockSource+0x1c>
 80054fc:	2302      	movs	r3, #2
 80054fe:	e0f6      	b.n	80056ee <HAL_TIM_ConfigClockSource+0x20a>
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	2202      	movs	r2, #2
 800550c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005510:	687b      	ldr	r3, [r7, #4]
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	689b      	ldr	r3, [r3, #8]
 8005516:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 800551e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005522:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005524:	68bb      	ldr	r3, [r7, #8]
 8005526:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800552a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	68ba      	ldr	r2, [r7, #8]
 8005532:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005534:	683b      	ldr	r3, [r7, #0]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	4a6f      	ldr	r2, [pc, #444]	; (80056f8 <HAL_TIM_ConfigClockSource+0x214>)
 800553a:	4293      	cmp	r3, r2
 800553c:	f000 80c1 	beq.w	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005540:	4a6d      	ldr	r2, [pc, #436]	; (80056f8 <HAL_TIM_ConfigClockSource+0x214>)
 8005542:	4293      	cmp	r3, r2
 8005544:	f200 80c6 	bhi.w	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005548:	4a6c      	ldr	r2, [pc, #432]	; (80056fc <HAL_TIM_ConfigClockSource+0x218>)
 800554a:	4293      	cmp	r3, r2
 800554c:	f000 80b9 	beq.w	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005550:	4a6a      	ldr	r2, [pc, #424]	; (80056fc <HAL_TIM_ConfigClockSource+0x218>)
 8005552:	4293      	cmp	r3, r2
 8005554:	f200 80be 	bhi.w	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005558:	4a69      	ldr	r2, [pc, #420]	; (8005700 <HAL_TIM_ConfigClockSource+0x21c>)
 800555a:	4293      	cmp	r3, r2
 800555c:	f000 80b1 	beq.w	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005560:	4a67      	ldr	r2, [pc, #412]	; (8005700 <HAL_TIM_ConfigClockSource+0x21c>)
 8005562:	4293      	cmp	r3, r2
 8005564:	f200 80b6 	bhi.w	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005568:	4a66      	ldr	r2, [pc, #408]	; (8005704 <HAL_TIM_ConfigClockSource+0x220>)
 800556a:	4293      	cmp	r3, r2
 800556c:	f000 80a9 	beq.w	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005570:	4a64      	ldr	r2, [pc, #400]	; (8005704 <HAL_TIM_ConfigClockSource+0x220>)
 8005572:	4293      	cmp	r3, r2
 8005574:	f200 80ae 	bhi.w	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005578:	4a63      	ldr	r2, [pc, #396]	; (8005708 <HAL_TIM_ConfigClockSource+0x224>)
 800557a:	4293      	cmp	r3, r2
 800557c:	f000 80a1 	beq.w	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005580:	4a61      	ldr	r2, [pc, #388]	; (8005708 <HAL_TIM_ConfigClockSource+0x224>)
 8005582:	4293      	cmp	r3, r2
 8005584:	f200 80a6 	bhi.w	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005588:	4a60      	ldr	r2, [pc, #384]	; (800570c <HAL_TIM_ConfigClockSource+0x228>)
 800558a:	4293      	cmp	r3, r2
 800558c:	f000 8099 	beq.w	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005590:	4a5e      	ldr	r2, [pc, #376]	; (800570c <HAL_TIM_ConfigClockSource+0x228>)
 8005592:	4293      	cmp	r3, r2
 8005594:	f200 809e 	bhi.w	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005598:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 800559c:	f000 8091 	beq.w	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 80055a0:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 80055a4:	f200 8096 	bhi.w	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80055a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055ac:	f000 8089 	beq.w	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 80055b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80055b4:	f200 808e 	bhi.w	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80055b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055bc:	d03e      	beq.n	800563c <HAL_TIM_ConfigClockSource+0x158>
 80055be:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80055c2:	f200 8087 	bhi.w	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80055c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055ca:	f000 8086 	beq.w	80056da <HAL_TIM_ConfigClockSource+0x1f6>
 80055ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d2:	d87f      	bhi.n	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80055d4:	2b70      	cmp	r3, #112	; 0x70
 80055d6:	d01a      	beq.n	800560e <HAL_TIM_ConfigClockSource+0x12a>
 80055d8:	2b70      	cmp	r3, #112	; 0x70
 80055da:	d87b      	bhi.n	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80055dc:	2b60      	cmp	r3, #96	; 0x60
 80055de:	d050      	beq.n	8005682 <HAL_TIM_ConfigClockSource+0x19e>
 80055e0:	2b60      	cmp	r3, #96	; 0x60
 80055e2:	d877      	bhi.n	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80055e4:	2b50      	cmp	r3, #80	; 0x50
 80055e6:	d03c      	beq.n	8005662 <HAL_TIM_ConfigClockSource+0x17e>
 80055e8:	2b50      	cmp	r3, #80	; 0x50
 80055ea:	d873      	bhi.n	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80055ec:	2b40      	cmp	r3, #64	; 0x40
 80055ee:	d058      	beq.n	80056a2 <HAL_TIM_ConfigClockSource+0x1be>
 80055f0:	2b40      	cmp	r3, #64	; 0x40
 80055f2:	d86f      	bhi.n	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80055f4:	2b30      	cmp	r3, #48	; 0x30
 80055f6:	d064      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 80055f8:	2b30      	cmp	r3, #48	; 0x30
 80055fa:	d86b      	bhi.n	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 80055fc:	2b20      	cmp	r3, #32
 80055fe:	d060      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005600:	2b20      	cmp	r3, #32
 8005602:	d867      	bhi.n	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d05c      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 8005608:	2b10      	cmp	r3, #16
 800560a:	d05a      	beq.n	80056c2 <HAL_TIM_ConfigClockSource+0x1de>
 800560c:	e062      	b.n	80056d4 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005612:	683b      	ldr	r3, [r7, #0]
 8005614:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005616:	683b      	ldr	r3, [r7, #0]
 8005618:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800561e:	f000 fd03 	bl	8006028 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005622:	687b      	ldr	r3, [r7, #4]
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	689b      	ldr	r3, [r3, #8]
 8005628:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005630:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	68ba      	ldr	r2, [r7, #8]
 8005638:	609a      	str	r2, [r3, #8]
      break;
 800563a:	e04f      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005640:	683b      	ldr	r3, [r7, #0]
 8005642:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005648:	683b      	ldr	r3, [r7, #0]
 800564a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800564c:	f000 fcec 	bl	8006028 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	689a      	ldr	r2, [r3, #8]
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800565e:	609a      	str	r2, [r3, #8]
      break;
 8005660:	e03c      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005666:	683b      	ldr	r3, [r7, #0]
 8005668:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800566e:	461a      	mov	r2, r3
 8005670:	f000 fc5e 	bl	8005f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	2150      	movs	r1, #80	; 0x50
 800567a:	4618      	mov	r0, r3
 800567c:	f000 fcb7 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 8005680:	e02c      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800568e:	461a      	mov	r2, r3
 8005690:	f000 fc7d 	bl	8005f8e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	2160      	movs	r1, #96	; 0x60
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fca7 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 80056a0:	e01c      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ae:	461a      	mov	r2, r3
 80056b0:	f000 fc3e 	bl	8005f30 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	2140      	movs	r1, #64	; 0x40
 80056ba:	4618      	mov	r0, r3
 80056bc:	f000 fc97 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 80056c0:	e00c      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681a      	ldr	r2, [r3, #0]
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4619      	mov	r1, r3
 80056cc:	4610      	mov	r0, r2
 80056ce:	f000 fc8e 	bl	8005fee <TIM_ITRx_SetConfig>
      break;
 80056d2:	e003      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 80056d4:	2301      	movs	r3, #1
 80056d6:	73fb      	strb	r3, [r7, #15]
      break;
 80056d8:	e000      	b.n	80056dc <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 80056da:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	2201      	movs	r2, #1
 80056e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2200      	movs	r2, #0
 80056e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	00100070 	.word	0x00100070
 80056fc:	00100060 	.word	0x00100060
 8005700:	00100050 	.word	0x00100050
 8005704:	00100040 	.word	0x00100040
 8005708:	00100030 	.word	0x00100030
 800570c:	00100020 	.word	0x00100020

08005710 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005710:	b480      	push	{r7}
 8005712:	b083      	sub	sp, #12
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8005718:	bf00      	nop
 800571a:	370c      	adds	r7, #12
 800571c:	46bd      	mov	sp, r7
 800571e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005722:	4770      	bx	lr

08005724 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a4c      	ldr	r2, [pc, #304]	; (80058b8 <TIM_Base_SetConfig+0x144>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d017      	beq.n	80057bc <TIM_Base_SetConfig+0x48>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005792:	d013      	beq.n	80057bc <TIM_Base_SetConfig+0x48>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a49      	ldr	r2, [pc, #292]	; (80058bc <TIM_Base_SetConfig+0x148>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d00f      	beq.n	80057bc <TIM_Base_SetConfig+0x48>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a48      	ldr	r2, [pc, #288]	; (80058c0 <TIM_Base_SetConfig+0x14c>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d00b      	beq.n	80057bc <TIM_Base_SetConfig+0x48>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a47      	ldr	r2, [pc, #284]	; (80058c4 <TIM_Base_SetConfig+0x150>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d007      	beq.n	80057bc <TIM_Base_SetConfig+0x48>
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	4a46      	ldr	r2, [pc, #280]	; (80058c8 <TIM_Base_SetConfig+0x154>)
 80057b0:	4293      	cmp	r3, r2
 80057b2:	d003      	beq.n	80057bc <TIM_Base_SetConfig+0x48>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	4a45      	ldr	r2, [pc, #276]	; (80058cc <TIM_Base_SetConfig+0x158>)
 80057b8:	4293      	cmp	r3, r2
 80057ba:	d108      	bne.n	80057ce <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057c2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	4313      	orrs	r3, r2
 80057cc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a39      	ldr	r2, [pc, #228]	; (80058b8 <TIM_Base_SetConfig+0x144>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d023      	beq.n	800581e <TIM_Base_SetConfig+0xaa>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057dc:	d01f      	beq.n	800581e <TIM_Base_SetConfig+0xaa>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a36      	ldr	r2, [pc, #216]	; (80058bc <TIM_Base_SetConfig+0x148>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d01b      	beq.n	800581e <TIM_Base_SetConfig+0xaa>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a35      	ldr	r2, [pc, #212]	; (80058c0 <TIM_Base_SetConfig+0x14c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d017      	beq.n	800581e <TIM_Base_SetConfig+0xaa>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a34      	ldr	r2, [pc, #208]	; (80058c4 <TIM_Base_SetConfig+0x150>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d013      	beq.n	800581e <TIM_Base_SetConfig+0xaa>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a33      	ldr	r2, [pc, #204]	; (80058c8 <TIM_Base_SetConfig+0x154>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d00f      	beq.n	800581e <TIM_Base_SetConfig+0xaa>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	4a33      	ldr	r2, [pc, #204]	; (80058d0 <TIM_Base_SetConfig+0x15c>)
 8005802:	4293      	cmp	r3, r2
 8005804:	d00b      	beq.n	800581e <TIM_Base_SetConfig+0xaa>
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	4a32      	ldr	r2, [pc, #200]	; (80058d4 <TIM_Base_SetConfig+0x160>)
 800580a:	4293      	cmp	r3, r2
 800580c:	d007      	beq.n	800581e <TIM_Base_SetConfig+0xaa>
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	4a31      	ldr	r2, [pc, #196]	; (80058d8 <TIM_Base_SetConfig+0x164>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d003      	beq.n	800581e <TIM_Base_SetConfig+0xaa>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	4a2c      	ldr	r2, [pc, #176]	; (80058cc <TIM_Base_SetConfig+0x158>)
 800581a:	4293      	cmp	r3, r2
 800581c:	d108      	bne.n	8005830 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005824:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005826:	683b      	ldr	r3, [r7, #0]
 8005828:	68db      	ldr	r3, [r3, #12]
 800582a:	68fa      	ldr	r2, [r7, #12]
 800582c:	4313      	orrs	r3, r2
 800582e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	695b      	ldr	r3, [r3, #20]
 800583a:	4313      	orrs	r3, r2
 800583c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	68fa      	ldr	r2, [r7, #12]
 8005842:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	689a      	ldr	r2, [r3, #8]
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800584c:	683b      	ldr	r3, [r7, #0]
 800584e:	681a      	ldr	r2, [r3, #0]
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a18      	ldr	r2, [pc, #96]	; (80058b8 <TIM_Base_SetConfig+0x144>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d013      	beq.n	8005884 <TIM_Base_SetConfig+0x110>
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	4a1a      	ldr	r2, [pc, #104]	; (80058c8 <TIM_Base_SetConfig+0x154>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d00f      	beq.n	8005884 <TIM_Base_SetConfig+0x110>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	4a1a      	ldr	r2, [pc, #104]	; (80058d0 <TIM_Base_SetConfig+0x15c>)
 8005868:	4293      	cmp	r3, r2
 800586a:	d00b      	beq.n	8005884 <TIM_Base_SetConfig+0x110>
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	4a19      	ldr	r2, [pc, #100]	; (80058d4 <TIM_Base_SetConfig+0x160>)
 8005870:	4293      	cmp	r3, r2
 8005872:	d007      	beq.n	8005884 <TIM_Base_SetConfig+0x110>
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	4a18      	ldr	r2, [pc, #96]	; (80058d8 <TIM_Base_SetConfig+0x164>)
 8005878:	4293      	cmp	r3, r2
 800587a:	d003      	beq.n	8005884 <TIM_Base_SetConfig+0x110>
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	4a13      	ldr	r2, [pc, #76]	; (80058cc <TIM_Base_SetConfig+0x158>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d103      	bne.n	800588c <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005884:	683b      	ldr	r3, [r7, #0]
 8005886:	691a      	ldr	r2, [r3, #16]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	2201      	movs	r2, #1
 8005890:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	691b      	ldr	r3, [r3, #16]
 8005896:	f003 0301 	and.w	r3, r3, #1
 800589a:	2b01      	cmp	r3, #1
 800589c:	d105      	bne.n	80058aa <TIM_Base_SetConfig+0x136>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	691b      	ldr	r3, [r3, #16]
 80058a2:	f023 0201 	bic.w	r2, r3, #1
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	611a      	str	r2, [r3, #16]
  }
}
 80058aa:	bf00      	nop
 80058ac:	3714      	adds	r7, #20
 80058ae:	46bd      	mov	sp, r7
 80058b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b4:	4770      	bx	lr
 80058b6:	bf00      	nop
 80058b8:	40012c00 	.word	0x40012c00
 80058bc:	40000400 	.word	0x40000400
 80058c0:	40000800 	.word	0x40000800
 80058c4:	40000c00 	.word	0x40000c00
 80058c8:	40013400 	.word	0x40013400
 80058cc:	40015000 	.word	0x40015000
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40014400 	.word	0x40014400
 80058d8:	40014800 	.word	0x40014800

080058dc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058dc:	b480      	push	{r7}
 80058de:	b087      	sub	sp, #28
 80058e0:	af00      	add	r7, sp, #0
 80058e2:	6078      	str	r0, [r7, #4]
 80058e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a1b      	ldr	r3, [r3, #32]
 80058ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6a1b      	ldr	r3, [r3, #32]
 80058f0:	f023 0201 	bic.w	r2, r3, #1
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	699b      	ldr	r3, [r3, #24]
 8005902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800590a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800590e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f023 0303 	bic.w	r3, r3, #3
 8005916:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	68fa      	ldr	r2, [r7, #12]
 800591e:	4313      	orrs	r3, r2
 8005920:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005922:	697b      	ldr	r3, [r7, #20]
 8005924:	f023 0302 	bic.w	r3, r3, #2
 8005928:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	697a      	ldr	r2, [r7, #20]
 8005930:	4313      	orrs	r3, r2
 8005932:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	4a30      	ldr	r2, [pc, #192]	; (80059f8 <TIM_OC1_SetConfig+0x11c>)
 8005938:	4293      	cmp	r3, r2
 800593a:	d013      	beq.n	8005964 <TIM_OC1_SetConfig+0x88>
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a2f      	ldr	r2, [pc, #188]	; (80059fc <TIM_OC1_SetConfig+0x120>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00f      	beq.n	8005964 <TIM_OC1_SetConfig+0x88>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a2e      	ldr	r2, [pc, #184]	; (8005a00 <TIM_OC1_SetConfig+0x124>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00b      	beq.n	8005964 <TIM_OC1_SetConfig+0x88>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a2d      	ldr	r2, [pc, #180]	; (8005a04 <TIM_OC1_SetConfig+0x128>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_OC1_SetConfig+0x88>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a2c      	ldr	r2, [pc, #176]	; (8005a08 <TIM_OC1_SetConfig+0x12c>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_OC1_SetConfig+0x88>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a2b      	ldr	r2, [pc, #172]	; (8005a0c <TIM_OC1_SetConfig+0x130>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d10c      	bne.n	800597e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005964:	697b      	ldr	r3, [r7, #20]
 8005966:	f023 0308 	bic.w	r3, r3, #8
 800596a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	68db      	ldr	r3, [r3, #12]
 8005970:	697a      	ldr	r2, [r7, #20]
 8005972:	4313      	orrs	r3, r2
 8005974:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	f023 0304 	bic.w	r3, r3, #4
 800597c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	4a1d      	ldr	r2, [pc, #116]	; (80059f8 <TIM_OC1_SetConfig+0x11c>)
 8005982:	4293      	cmp	r3, r2
 8005984:	d013      	beq.n	80059ae <TIM_OC1_SetConfig+0xd2>
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	4a1c      	ldr	r2, [pc, #112]	; (80059fc <TIM_OC1_SetConfig+0x120>)
 800598a:	4293      	cmp	r3, r2
 800598c:	d00f      	beq.n	80059ae <TIM_OC1_SetConfig+0xd2>
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	4a1b      	ldr	r2, [pc, #108]	; (8005a00 <TIM_OC1_SetConfig+0x124>)
 8005992:	4293      	cmp	r3, r2
 8005994:	d00b      	beq.n	80059ae <TIM_OC1_SetConfig+0xd2>
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	4a1a      	ldr	r2, [pc, #104]	; (8005a04 <TIM_OC1_SetConfig+0x128>)
 800599a:	4293      	cmp	r3, r2
 800599c:	d007      	beq.n	80059ae <TIM_OC1_SetConfig+0xd2>
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	4a19      	ldr	r2, [pc, #100]	; (8005a08 <TIM_OC1_SetConfig+0x12c>)
 80059a2:	4293      	cmp	r3, r2
 80059a4:	d003      	beq.n	80059ae <TIM_OC1_SetConfig+0xd2>
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	4a18      	ldr	r2, [pc, #96]	; (8005a0c <TIM_OC1_SetConfig+0x130>)
 80059aa:	4293      	cmp	r3, r2
 80059ac:	d111      	bne.n	80059d2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80059ae:	693b      	ldr	r3, [r7, #16]
 80059b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80059b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80059b6:	693b      	ldr	r3, [r7, #16]
 80059b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80059be:	683b      	ldr	r3, [r7, #0]
 80059c0:	695b      	ldr	r3, [r3, #20]
 80059c2:	693a      	ldr	r2, [r7, #16]
 80059c4:	4313      	orrs	r3, r2
 80059c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80059c8:	683b      	ldr	r3, [r7, #0]
 80059ca:	699b      	ldr	r3, [r3, #24]
 80059cc:	693a      	ldr	r2, [r7, #16]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	693a      	ldr	r2, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	68fa      	ldr	r2, [r7, #12]
 80059dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	697a      	ldr	r2, [r7, #20]
 80059ea:	621a      	str	r2, [r3, #32]
}
 80059ec:	bf00      	nop
 80059ee:	371c      	adds	r7, #28
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	40012c00 	.word	0x40012c00
 80059fc:	40013400 	.word	0x40013400
 8005a00:	40014000 	.word	0x40014000
 8005a04:	40014400 	.word	0x40014400
 8005a08:	40014800 	.word	0x40014800
 8005a0c:	40015000 	.word	0x40015000

08005a10 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a10:	b480      	push	{r7}
 8005a12:	b087      	sub	sp, #28
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	6078      	str	r0, [r7, #4]
 8005a18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6a1b      	ldr	r3, [r3, #32]
 8005a1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	6a1b      	ldr	r3, [r3, #32]
 8005a24:	f023 0210 	bic.w	r2, r3, #16
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	699b      	ldr	r3, [r3, #24]
 8005a36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005a3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	021b      	lsls	r3, r3, #8
 8005a52:	68fa      	ldr	r2, [r7, #12]
 8005a54:	4313      	orrs	r3, r2
 8005a56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a58:	697b      	ldr	r3, [r7, #20]
 8005a5a:	f023 0320 	bic.w	r3, r3, #32
 8005a5e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	689b      	ldr	r3, [r3, #8]
 8005a64:	011b      	lsls	r3, r3, #4
 8005a66:	697a      	ldr	r2, [r7, #20]
 8005a68:	4313      	orrs	r3, r2
 8005a6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a2c      	ldr	r2, [pc, #176]	; (8005b20 <TIM_OC2_SetConfig+0x110>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d007      	beq.n	8005a84 <TIM_OC2_SetConfig+0x74>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a2b      	ldr	r2, [pc, #172]	; (8005b24 <TIM_OC2_SetConfig+0x114>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d003      	beq.n	8005a84 <TIM_OC2_SetConfig+0x74>
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	4a2a      	ldr	r2, [pc, #168]	; (8005b28 <TIM_OC2_SetConfig+0x118>)
 8005a80:	4293      	cmp	r3, r2
 8005a82:	d10d      	bne.n	8005aa0 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005a8a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	68db      	ldr	r3, [r3, #12]
 8005a90:	011b      	lsls	r3, r3, #4
 8005a92:	697a      	ldr	r2, [r7, #20]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a98:	697b      	ldr	r3, [r7, #20]
 8005a9a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a9e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	4a1f      	ldr	r2, [pc, #124]	; (8005b20 <TIM_OC2_SetConfig+0x110>)
 8005aa4:	4293      	cmp	r3, r2
 8005aa6:	d013      	beq.n	8005ad0 <TIM_OC2_SetConfig+0xc0>
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	4a1e      	ldr	r2, [pc, #120]	; (8005b24 <TIM_OC2_SetConfig+0x114>)
 8005aac:	4293      	cmp	r3, r2
 8005aae:	d00f      	beq.n	8005ad0 <TIM_OC2_SetConfig+0xc0>
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <TIM_OC2_SetConfig+0x11c>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d00b      	beq.n	8005ad0 <TIM_OC2_SetConfig+0xc0>
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	4a1d      	ldr	r2, [pc, #116]	; (8005b30 <TIM_OC2_SetConfig+0x120>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d007      	beq.n	8005ad0 <TIM_OC2_SetConfig+0xc0>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	4a1c      	ldr	r2, [pc, #112]	; (8005b34 <TIM_OC2_SetConfig+0x124>)
 8005ac4:	4293      	cmp	r3, r2
 8005ac6:	d003      	beq.n	8005ad0 <TIM_OC2_SetConfig+0xc0>
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	4a17      	ldr	r2, [pc, #92]	; (8005b28 <TIM_OC2_SetConfig+0x118>)
 8005acc:	4293      	cmp	r3, r2
 8005ace:	d113      	bne.n	8005af8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ad6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ad8:	693b      	ldr	r3, [r7, #16]
 8005ada:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ade:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	695b      	ldr	r3, [r3, #20]
 8005ae4:	009b      	lsls	r3, r3, #2
 8005ae6:	693a      	ldr	r2, [r7, #16]
 8005ae8:	4313      	orrs	r3, r2
 8005aea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	68fa      	ldr	r2, [r7, #12]
 8005b02:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b04:	683b      	ldr	r3, [r7, #0]
 8005b06:	685a      	ldr	r2, [r3, #4]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	697a      	ldr	r2, [r7, #20]
 8005b10:	621a      	str	r2, [r3, #32]
}
 8005b12:	bf00      	nop
 8005b14:	371c      	adds	r7, #28
 8005b16:	46bd      	mov	sp, r7
 8005b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1c:	4770      	bx	lr
 8005b1e:	bf00      	nop
 8005b20:	40012c00 	.word	0x40012c00
 8005b24:	40013400 	.word	0x40013400
 8005b28:	40015000 	.word	0x40015000
 8005b2c:	40014000 	.word	0x40014000
 8005b30:	40014400 	.word	0x40014400
 8005b34:	40014800 	.word	0x40014800

08005b38 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b38:	b480      	push	{r7}
 8005b3a:	b087      	sub	sp, #28
 8005b3c:	af00      	add	r7, sp, #0
 8005b3e:	6078      	str	r0, [r7, #4]
 8005b40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6a1b      	ldr	r3, [r3, #32]
 8005b46:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	685b      	ldr	r3, [r3, #4]
 8005b58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	69db      	ldr	r3, [r3, #28]
 8005b5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005b66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	f023 0303 	bic.w	r3, r3, #3
 8005b72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	68fa      	ldr	r2, [r7, #12]
 8005b7a:	4313      	orrs	r3, r2
 8005b7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b86:	683b      	ldr	r3, [r7, #0]
 8005b88:	689b      	ldr	r3, [r3, #8]
 8005b8a:	021b      	lsls	r3, r3, #8
 8005b8c:	697a      	ldr	r2, [r7, #20]
 8005b8e:	4313      	orrs	r3, r2
 8005b90:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	4a2b      	ldr	r2, [pc, #172]	; (8005c44 <TIM_OC3_SetConfig+0x10c>)
 8005b96:	4293      	cmp	r3, r2
 8005b98:	d007      	beq.n	8005baa <TIM_OC3_SetConfig+0x72>
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	4a2a      	ldr	r2, [pc, #168]	; (8005c48 <TIM_OC3_SetConfig+0x110>)
 8005b9e:	4293      	cmp	r3, r2
 8005ba0:	d003      	beq.n	8005baa <TIM_OC3_SetConfig+0x72>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	4a29      	ldr	r2, [pc, #164]	; (8005c4c <TIM_OC3_SetConfig+0x114>)
 8005ba6:	4293      	cmp	r3, r2
 8005ba8:	d10d      	bne.n	8005bc6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005baa:	697b      	ldr	r3, [r7, #20]
 8005bac:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005bb0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005bb2:	683b      	ldr	r3, [r7, #0]
 8005bb4:	68db      	ldr	r3, [r3, #12]
 8005bb6:	021b      	lsls	r3, r3, #8
 8005bb8:	697a      	ldr	r2, [r7, #20]
 8005bba:	4313      	orrs	r3, r2
 8005bbc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005bc4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	4a1e      	ldr	r2, [pc, #120]	; (8005c44 <TIM_OC3_SetConfig+0x10c>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d013      	beq.n	8005bf6 <TIM_OC3_SetConfig+0xbe>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	4a1d      	ldr	r2, [pc, #116]	; (8005c48 <TIM_OC3_SetConfig+0x110>)
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d00f      	beq.n	8005bf6 <TIM_OC3_SetConfig+0xbe>
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	4a1d      	ldr	r2, [pc, #116]	; (8005c50 <TIM_OC3_SetConfig+0x118>)
 8005bda:	4293      	cmp	r3, r2
 8005bdc:	d00b      	beq.n	8005bf6 <TIM_OC3_SetConfig+0xbe>
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	4a1c      	ldr	r2, [pc, #112]	; (8005c54 <TIM_OC3_SetConfig+0x11c>)
 8005be2:	4293      	cmp	r3, r2
 8005be4:	d007      	beq.n	8005bf6 <TIM_OC3_SetConfig+0xbe>
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	4a1b      	ldr	r2, [pc, #108]	; (8005c58 <TIM_OC3_SetConfig+0x120>)
 8005bea:	4293      	cmp	r3, r2
 8005bec:	d003      	beq.n	8005bf6 <TIM_OC3_SetConfig+0xbe>
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	4a16      	ldr	r2, [pc, #88]	; (8005c4c <TIM_OC3_SetConfig+0x114>)
 8005bf2:	4293      	cmp	r3, r2
 8005bf4:	d113      	bne.n	8005c1e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bf6:	693b      	ldr	r3, [r7, #16]
 8005bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bfc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c04:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	695b      	ldr	r3, [r3, #20]
 8005c0a:	011b      	lsls	r3, r3, #4
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	4313      	orrs	r3, r2
 8005c10:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005c12:	683b      	ldr	r3, [r7, #0]
 8005c14:	699b      	ldr	r3, [r3, #24]
 8005c16:	011b      	lsls	r3, r3, #4
 8005c18:	693a      	ldr	r2, [r7, #16]
 8005c1a:	4313      	orrs	r3, r2
 8005c1c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	693a      	ldr	r2, [r7, #16]
 8005c22:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	68fa      	ldr	r2, [r7, #12]
 8005c28:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	685a      	ldr	r2, [r3, #4]
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	621a      	str	r2, [r3, #32]
}
 8005c38:	bf00      	nop
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr
 8005c44:	40012c00 	.word	0x40012c00
 8005c48:	40013400 	.word	0x40013400
 8005c4c:	40015000 	.word	0x40015000
 8005c50:	40014000 	.word	0x40014000
 8005c54:	40014400 	.word	0x40014400
 8005c58:	40014800 	.word	0x40014800

08005c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005c5c:	b480      	push	{r7}
 8005c5e:	b087      	sub	sp, #28
 8005c60:	af00      	add	r7, sp, #0
 8005c62:	6078      	str	r0, [r7, #4]
 8005c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	6a1b      	ldr	r3, [r3, #32]
 8005c6a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6a1b      	ldr	r3, [r3, #32]
 8005c70:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	685b      	ldr	r3, [r3, #4]
 8005c7c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	69db      	ldr	r3, [r3, #28]
 8005c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c98:	683b      	ldr	r3, [r7, #0]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	021b      	lsls	r3, r3, #8
 8005c9e:	68fa      	ldr	r2, [r7, #12]
 8005ca0:	4313      	orrs	r3, r2
 8005ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005ca4:	697b      	ldr	r3, [r7, #20]
 8005ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005caa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	689b      	ldr	r3, [r3, #8]
 8005cb0:	031b      	lsls	r3, r3, #12
 8005cb2:	697a      	ldr	r2, [r7, #20]
 8005cb4:	4313      	orrs	r3, r2
 8005cb6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	4a2c      	ldr	r2, [pc, #176]	; (8005d6c <TIM_OC4_SetConfig+0x110>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d007      	beq.n	8005cd0 <TIM_OC4_SetConfig+0x74>
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	4a2b      	ldr	r2, [pc, #172]	; (8005d70 <TIM_OC4_SetConfig+0x114>)
 8005cc4:	4293      	cmp	r3, r2
 8005cc6:	d003      	beq.n	8005cd0 <TIM_OC4_SetConfig+0x74>
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	4a2a      	ldr	r2, [pc, #168]	; (8005d74 <TIM_OC4_SetConfig+0x118>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d10d      	bne.n	8005cec <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005cd0:	697b      	ldr	r3, [r7, #20]
 8005cd2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005cd6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005cd8:	683b      	ldr	r3, [r7, #0]
 8005cda:	68db      	ldr	r3, [r3, #12]
 8005cdc:	031b      	lsls	r3, r3, #12
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	4313      	orrs	r3, r2
 8005ce2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005cea:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	4a1f      	ldr	r2, [pc, #124]	; (8005d6c <TIM_OC4_SetConfig+0x110>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d013      	beq.n	8005d1c <TIM_OC4_SetConfig+0xc0>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	4a1e      	ldr	r2, [pc, #120]	; (8005d70 <TIM_OC4_SetConfig+0x114>)
 8005cf8:	4293      	cmp	r3, r2
 8005cfa:	d00f      	beq.n	8005d1c <TIM_OC4_SetConfig+0xc0>
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a1e      	ldr	r2, [pc, #120]	; (8005d78 <TIM_OC4_SetConfig+0x11c>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00b      	beq.n	8005d1c <TIM_OC4_SetConfig+0xc0>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4a1d      	ldr	r2, [pc, #116]	; (8005d7c <TIM_OC4_SetConfig+0x120>)
 8005d08:	4293      	cmp	r3, r2
 8005d0a:	d007      	beq.n	8005d1c <TIM_OC4_SetConfig+0xc0>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a1c      	ldr	r2, [pc, #112]	; (8005d80 <TIM_OC4_SetConfig+0x124>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d003      	beq.n	8005d1c <TIM_OC4_SetConfig+0xc0>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a17      	ldr	r2, [pc, #92]	; (8005d74 <TIM_OC4_SetConfig+0x118>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d113      	bne.n	8005d44 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005d22:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005d24:	693b      	ldr	r3, [r7, #16]
 8005d26:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005d2a:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	695b      	ldr	r3, [r3, #20]
 8005d30:	019b      	lsls	r3, r3, #6
 8005d32:	693a      	ldr	r2, [r7, #16]
 8005d34:	4313      	orrs	r3, r2
 8005d36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	699b      	ldr	r3, [r3, #24]
 8005d3c:	019b      	lsls	r3, r3, #6
 8005d3e:	693a      	ldr	r2, [r7, #16]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	693a      	ldr	r2, [r7, #16]
 8005d48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	68fa      	ldr	r2, [r7, #12]
 8005d4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005d50:	683b      	ldr	r3, [r7, #0]
 8005d52:	685a      	ldr	r2, [r3, #4]
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	697a      	ldr	r2, [r7, #20]
 8005d5c:	621a      	str	r2, [r3, #32]
}
 8005d5e:	bf00      	nop
 8005d60:	371c      	adds	r7, #28
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40012c00 	.word	0x40012c00
 8005d70:	40013400 	.word	0x40013400
 8005d74:	40015000 	.word	0x40015000
 8005d78:	40014000 	.word	0x40014000
 8005d7c:	40014400 	.word	0x40014400
 8005d80:	40014800 	.word	0x40014800

08005d84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b087      	sub	sp, #28
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	6a1b      	ldr	r3, [r3, #32]
 8005d92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	6a1b      	ldr	r3, [r3, #32]
 8005d98:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	685b      	ldr	r3, [r3, #4]
 8005da4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005db2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005db6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005db8:	683b      	ldr	r3, [r7, #0]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	68fa      	ldr	r2, [r7, #12]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005dc2:	693b      	ldr	r3, [r7, #16]
 8005dc4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005dc8:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	041b      	lsls	r3, r3, #16
 8005dd0:	693a      	ldr	r2, [r7, #16]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	4a19      	ldr	r2, [pc, #100]	; (8005e40 <TIM_OC5_SetConfig+0xbc>)
 8005dda:	4293      	cmp	r3, r2
 8005ddc:	d013      	beq.n	8005e06 <TIM_OC5_SetConfig+0x82>
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	4a18      	ldr	r2, [pc, #96]	; (8005e44 <TIM_OC5_SetConfig+0xc0>)
 8005de2:	4293      	cmp	r3, r2
 8005de4:	d00f      	beq.n	8005e06 <TIM_OC5_SetConfig+0x82>
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	4a17      	ldr	r2, [pc, #92]	; (8005e48 <TIM_OC5_SetConfig+0xc4>)
 8005dea:	4293      	cmp	r3, r2
 8005dec:	d00b      	beq.n	8005e06 <TIM_OC5_SetConfig+0x82>
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	4a16      	ldr	r2, [pc, #88]	; (8005e4c <TIM_OC5_SetConfig+0xc8>)
 8005df2:	4293      	cmp	r3, r2
 8005df4:	d007      	beq.n	8005e06 <TIM_OC5_SetConfig+0x82>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	4a15      	ldr	r2, [pc, #84]	; (8005e50 <TIM_OC5_SetConfig+0xcc>)
 8005dfa:	4293      	cmp	r3, r2
 8005dfc:	d003      	beq.n	8005e06 <TIM_OC5_SetConfig+0x82>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	4a14      	ldr	r2, [pc, #80]	; (8005e54 <TIM_OC5_SetConfig+0xd0>)
 8005e02:	4293      	cmp	r3, r2
 8005e04:	d109      	bne.n	8005e1a <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005e06:	697b      	ldr	r3, [r7, #20]
 8005e08:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005e0c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005e0e:	683b      	ldr	r3, [r7, #0]
 8005e10:	695b      	ldr	r3, [r3, #20]
 8005e12:	021b      	lsls	r3, r3, #8
 8005e14:	697a      	ldr	r2, [r7, #20]
 8005e16:	4313      	orrs	r3, r2
 8005e18:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	697a      	ldr	r2, [r7, #20]
 8005e1e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	68fa      	ldr	r2, [r7, #12]
 8005e24:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005e26:	683b      	ldr	r3, [r7, #0]
 8005e28:	685a      	ldr	r2, [r3, #4]
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	693a      	ldr	r2, [r7, #16]
 8005e32:	621a      	str	r2, [r3, #32]
}
 8005e34:	bf00      	nop
 8005e36:	371c      	adds	r7, #28
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr
 8005e40:	40012c00 	.word	0x40012c00
 8005e44:	40013400 	.word	0x40013400
 8005e48:	40014000 	.word	0x40014000
 8005e4c:	40014400 	.word	0x40014400
 8005e50:	40014800 	.word	0x40014800
 8005e54:	40015000 	.word	0x40015000

08005e58 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005e58:	b480      	push	{r7}
 8005e5a:	b087      	sub	sp, #28
 8005e5c:	af00      	add	r7, sp, #0
 8005e5e:	6078      	str	r0, [r7, #4]
 8005e60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	6a1b      	ldr	r3, [r3, #32]
 8005e66:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	685b      	ldr	r3, [r3, #4]
 8005e78:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005e86:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005e8a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e8c:	683b      	ldr	r3, [r7, #0]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	021b      	lsls	r3, r3, #8
 8005e92:	68fa      	ldr	r2, [r7, #12]
 8005e94:	4313      	orrs	r3, r2
 8005e96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e98:	693b      	ldr	r3, [r7, #16]
 8005e9a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005e9e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005ea0:	683b      	ldr	r3, [r7, #0]
 8005ea2:	689b      	ldr	r3, [r3, #8]
 8005ea4:	051b      	lsls	r3, r3, #20
 8005ea6:	693a      	ldr	r2, [r7, #16]
 8005ea8:	4313      	orrs	r3, r2
 8005eaa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4a1a      	ldr	r2, [pc, #104]	; (8005f18 <TIM_OC6_SetConfig+0xc0>)
 8005eb0:	4293      	cmp	r3, r2
 8005eb2:	d013      	beq.n	8005edc <TIM_OC6_SetConfig+0x84>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	4a19      	ldr	r2, [pc, #100]	; (8005f1c <TIM_OC6_SetConfig+0xc4>)
 8005eb8:	4293      	cmp	r3, r2
 8005eba:	d00f      	beq.n	8005edc <TIM_OC6_SetConfig+0x84>
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	4a18      	ldr	r2, [pc, #96]	; (8005f20 <TIM_OC6_SetConfig+0xc8>)
 8005ec0:	4293      	cmp	r3, r2
 8005ec2:	d00b      	beq.n	8005edc <TIM_OC6_SetConfig+0x84>
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	4a17      	ldr	r2, [pc, #92]	; (8005f24 <TIM_OC6_SetConfig+0xcc>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d007      	beq.n	8005edc <TIM_OC6_SetConfig+0x84>
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	4a16      	ldr	r2, [pc, #88]	; (8005f28 <TIM_OC6_SetConfig+0xd0>)
 8005ed0:	4293      	cmp	r3, r2
 8005ed2:	d003      	beq.n	8005edc <TIM_OC6_SetConfig+0x84>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a15      	ldr	r2, [pc, #84]	; (8005f2c <TIM_OC6_SetConfig+0xd4>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d109      	bne.n	8005ef0 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	695b      	ldr	r3, [r3, #20]
 8005ee8:	029b      	lsls	r3, r3, #10
 8005eea:	697a      	ldr	r2, [r7, #20]
 8005eec:	4313      	orrs	r3, r2
 8005eee:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	68fa      	ldr	r2, [r7, #12]
 8005efa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005efc:	683b      	ldr	r3, [r7, #0]
 8005efe:	685a      	ldr	r2, [r3, #4]
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	621a      	str	r2, [r3, #32]
}
 8005f0a:	bf00      	nop
 8005f0c:	371c      	adds	r7, #28
 8005f0e:	46bd      	mov	sp, r7
 8005f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f14:	4770      	bx	lr
 8005f16:	bf00      	nop
 8005f18:	40012c00 	.word	0x40012c00
 8005f1c:	40013400 	.word	0x40013400
 8005f20:	40014000 	.word	0x40014000
 8005f24:	40014400 	.word	0x40014400
 8005f28:	40014800 	.word	0x40014800
 8005f2c:	40015000 	.word	0x40015000

08005f30 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f30:	b480      	push	{r7}
 8005f32:	b087      	sub	sp, #28
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	6a1b      	ldr	r3, [r3, #32]
 8005f40:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	6a1b      	ldr	r3, [r3, #32]
 8005f46:	f023 0201 	bic.w	r2, r3, #1
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	699b      	ldr	r3, [r3, #24]
 8005f52:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005f54:	693b      	ldr	r3, [r7, #16]
 8005f56:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005f5a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	011b      	lsls	r3, r3, #4
 8005f60:	693a      	ldr	r2, [r7, #16]
 8005f62:	4313      	orrs	r3, r2
 8005f64:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005f66:	697b      	ldr	r3, [r7, #20]
 8005f68:	f023 030a 	bic.w	r3, r3, #10
 8005f6c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005f6e:	697a      	ldr	r2, [r7, #20]
 8005f70:	68bb      	ldr	r3, [r7, #8]
 8005f72:	4313      	orrs	r3, r2
 8005f74:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	693a      	ldr	r2, [r7, #16]
 8005f7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	697a      	ldr	r2, [r7, #20]
 8005f80:	621a      	str	r2, [r3, #32]
}
 8005f82:	bf00      	nop
 8005f84:	371c      	adds	r7, #28
 8005f86:	46bd      	mov	sp, r7
 8005f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8c:	4770      	bx	lr

08005f8e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005f8e:	b480      	push	{r7}
 8005f90:	b087      	sub	sp, #28
 8005f92:	af00      	add	r7, sp, #0
 8005f94:	60f8      	str	r0, [r7, #12]
 8005f96:	60b9      	str	r1, [r7, #8]
 8005f98:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	6a1b      	ldr	r3, [r3, #32]
 8005fa4:	f023 0210 	bic.w	r2, r3, #16
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005fac:	68fb      	ldr	r3, [r7, #12]
 8005fae:	699b      	ldr	r3, [r3, #24]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005fb2:	693b      	ldr	r3, [r7, #16]
 8005fb4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005fb8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	031b      	lsls	r3, r3, #12
 8005fbe:	693a      	ldr	r2, [r7, #16]
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005fc4:	697b      	ldr	r3, [r7, #20]
 8005fc6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005fca:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005fcc:	68bb      	ldr	r3, [r7, #8]
 8005fce:	011b      	lsls	r3, r3, #4
 8005fd0:	697a      	ldr	r2, [r7, #20]
 8005fd2:	4313      	orrs	r3, r2
 8005fd4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	693a      	ldr	r2, [r7, #16]
 8005fda:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	697a      	ldr	r2, [r7, #20]
 8005fe0:	621a      	str	r2, [r3, #32]
}
 8005fe2:	bf00      	nop
 8005fe4:	371c      	adds	r7, #28
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fec:	4770      	bx	lr

08005fee <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005fee:	b480      	push	{r7}
 8005ff0:	b085      	sub	sp, #20
 8005ff2:	af00      	add	r7, sp, #0
 8005ff4:	6078      	str	r0, [r7, #4]
 8005ff6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	689b      	ldr	r3, [r3, #8]
 8005ffc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8006004:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006008:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800600a:	683a      	ldr	r2, [r7, #0]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	4313      	orrs	r3, r2
 8006010:	f043 0307 	orr.w	r3, r3, #7
 8006014:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	68fa      	ldr	r2, [r7, #12]
 800601a:	609a      	str	r2, [r3, #8]
}
 800601c:	bf00      	nop
 800601e:	3714      	adds	r7, #20
 8006020:	46bd      	mov	sp, r7
 8006022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006026:	4770      	bx	lr

08006028 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006028:	b480      	push	{r7}
 800602a:	b087      	sub	sp, #28
 800602c:	af00      	add	r7, sp, #0
 800602e:	60f8      	str	r0, [r7, #12]
 8006030:	60b9      	str	r1, [r7, #8]
 8006032:	607a      	str	r2, [r7, #4]
 8006034:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006036:	68fb      	ldr	r3, [r7, #12]
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800603c:	697b      	ldr	r3, [r7, #20]
 800603e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006042:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	021a      	lsls	r2, r3, #8
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	431a      	orrs	r2, r3
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	4313      	orrs	r3, r2
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	4313      	orrs	r3, r2
 8006054:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	697a      	ldr	r2, [r7, #20]
 800605a:	609a      	str	r2, [r3, #8]
}
 800605c:	bf00      	nop
 800605e:	371c      	adds	r7, #28
 8006060:	46bd      	mov	sp, r7
 8006062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006066:	4770      	bx	lr

08006068 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006068:	b480      	push	{r7}
 800606a:	b087      	sub	sp, #28
 800606c:	af00      	add	r7, sp, #0
 800606e:	60f8      	str	r0, [r7, #12]
 8006070:	60b9      	str	r1, [r7, #8]
 8006072:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006074:	68bb      	ldr	r3, [r7, #8]
 8006076:	f003 031f 	and.w	r3, r3, #31
 800607a:	2201      	movs	r2, #1
 800607c:	fa02 f303 	lsl.w	r3, r2, r3
 8006080:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	6a1a      	ldr	r2, [r3, #32]
 8006086:	697b      	ldr	r3, [r7, #20]
 8006088:	43db      	mvns	r3, r3
 800608a:	401a      	ands	r2, r3
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6a1a      	ldr	r2, [r3, #32]
 8006094:	68bb      	ldr	r3, [r7, #8]
 8006096:	f003 031f 	and.w	r3, r3, #31
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	fa01 f303 	lsl.w	r3, r1, r3
 80060a0:	431a      	orrs	r2, r3
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	621a      	str	r2, [r3, #32]
}
 80060a6:	bf00      	nop
 80060a8:	371c      	adds	r7, #28
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
	...

080060b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80060b4:	b480      	push	{r7}
 80060b6:	b085      	sub	sp, #20
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060c4:	2b01      	cmp	r3, #1
 80060c6:	d101      	bne.n	80060cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80060c8:	2302      	movs	r3, #2
 80060ca:	e074      	b.n	80061b6 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	2201      	movs	r2, #1
 80060d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2202      	movs	r2, #2
 80060d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	685b      	ldr	r3, [r3, #4]
 80060e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	689b      	ldr	r3, [r3, #8]
 80060ea:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	4a34      	ldr	r2, [pc, #208]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80060f2:	4293      	cmp	r3, r2
 80060f4:	d009      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a33      	ldr	r2, [pc, #204]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d004      	beq.n	800610a <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	4a31      	ldr	r2, [pc, #196]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006106:	4293      	cmp	r3, r2
 8006108:	d108      	bne.n	800611c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006110:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	685b      	ldr	r3, [r3, #4]
 8006116:	68fa      	ldr	r2, [r7, #12]
 8006118:	4313      	orrs	r3, r2
 800611a:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006122:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006126:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006128:	683b      	ldr	r3, [r7, #0]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68fa      	ldr	r2, [r7, #12]
 800612e:	4313      	orrs	r3, r2
 8006130:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	4a21      	ldr	r2, [pc, #132]	; (80061c4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006140:	4293      	cmp	r3, r2
 8006142:	d022      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800614c:	d01d      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	4a1f      	ldr	r2, [pc, #124]	; (80061d0 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d018      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1d      	ldr	r2, [pc, #116]	; (80061d4 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800615e:	4293      	cmp	r3, r2
 8006160:	d013      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	4a1c      	ldr	r2, [pc, #112]	; (80061d8 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8006168:	4293      	cmp	r3, r2
 800616a:	d00e      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006172:	4293      	cmp	r3, r2
 8006174:	d009      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	4a18      	ldr	r2, [pc, #96]	; (80061dc <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 800617c:	4293      	cmp	r3, r2
 800617e:	d004      	beq.n	800618a <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	681b      	ldr	r3, [r3, #0]
 8006184:	4a11      	ldr	r2, [pc, #68]	; (80061cc <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006186:	4293      	cmp	r3, r2
 8006188:	d10c      	bne.n	80061a4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800618a:	68bb      	ldr	r3, [r7, #8]
 800618c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006190:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006192:	683b      	ldr	r3, [r7, #0]
 8006194:	689b      	ldr	r3, [r3, #8]
 8006196:	68ba      	ldr	r2, [r7, #8]
 8006198:	4313      	orrs	r3, r2
 800619a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	68ba      	ldr	r2, [r7, #8]
 80061a2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	2201      	movs	r2, #1
 80061a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2200      	movs	r2, #0
 80061b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80061b4:	2300      	movs	r3, #0
}
 80061b6:	4618      	mov	r0, r3
 80061b8:	3714      	adds	r7, #20
 80061ba:	46bd      	mov	sp, r7
 80061bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061c0:	4770      	bx	lr
 80061c2:	bf00      	nop
 80061c4:	40012c00 	.word	0x40012c00
 80061c8:	40013400 	.word	0x40013400
 80061cc:	40015000 	.word	0x40015000
 80061d0:	40000400 	.word	0x40000400
 80061d4:	40000800 	.word	0x40000800
 80061d8:	40000c00 	.word	0x40000c00
 80061dc:	40014000 	.word	0x40014000

080061e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80061e0:	b480      	push	{r7}
 80061e2:	b083      	sub	sp, #12
 80061e4:	af00      	add	r7, sp, #0
 80061e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80061e8:	bf00      	nop
 80061ea:	370c      	adds	r7, #12
 80061ec:	46bd      	mov	sp, r7
 80061ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f2:	4770      	bx	lr

080061f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80061f4:	b480      	push	{r7}
 80061f6:	b083      	sub	sp, #12
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80061fc:	bf00      	nop
 80061fe:	370c      	adds	r7, #12
 8006200:	46bd      	mov	sp, r7
 8006202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006206:	4770      	bx	lr

08006208 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006208:	b480      	push	{r7}
 800620a:	b083      	sub	sp, #12
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006210:	bf00      	nop
 8006212:	370c      	adds	r7, #12
 8006214:	46bd      	mov	sp, r7
 8006216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800621a:	4770      	bx	lr

0800621c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 800621c:	b480      	push	{r7}
 800621e:	b083      	sub	sp, #12
 8006220:	af00      	add	r7, sp, #0
 8006222:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8006224:	bf00      	nop
 8006226:	370c      	adds	r7, #12
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr

08006230 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006230:	b480      	push	{r7}
 8006232:	b083      	sub	sp, #12
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006238:	bf00      	nop
 800623a:	370c      	adds	r7, #12
 800623c:	46bd      	mov	sp, r7
 800623e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006242:	4770      	bx	lr

08006244 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8006244:	b480      	push	{r7}
 8006246:	b083      	sub	sp, #12
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800624c:	bf00      	nop
 800624e:	370c      	adds	r7, #12
 8006250:	46bd      	mov	sp, r7
 8006252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006256:	4770      	bx	lr

08006258 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8006258:	b480      	push	{r7}
 800625a:	b083      	sub	sp, #12
 800625c:	af00      	add	r7, sp, #0
 800625e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8006260:	bf00      	nop
 8006262:	370c      	adds	r7, #12
 8006264:	46bd      	mov	sp, r7
 8006266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626a:	4770      	bx	lr

0800626c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b082      	sub	sp, #8
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e042      	b.n	8006304 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006284:	2b00      	cmp	r3, #0
 8006286:	d106      	bne.n	8006296 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2200      	movs	r2, #0
 800628c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006290:	6878      	ldr	r0, [r7, #4]
 8006292:	f7fa fe09 	bl	8000ea8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	2224      	movs	r2, #36	; 0x24
 800629a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	f022 0201 	bic.w	r2, r2, #1
 80062ac:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d002      	beq.n	80062bc <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80062b6:	6878      	ldr	r0, [r7, #4]
 80062b8:	f000 fb24 	bl	8006904 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f825 	bl	800630c <UART_SetConfig>
 80062c2:	4603      	mov	r3, r0
 80062c4:	2b01      	cmp	r3, #1
 80062c6:	d101      	bne.n	80062cc <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 80062c8:	2301      	movs	r3, #1
 80062ca:	e01b      	b.n	8006304 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	685a      	ldr	r2, [r3, #4]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80062da:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689a      	ldr	r2, [r3, #8]
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80062ea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	681a      	ldr	r2, [r3, #0]
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	681b      	ldr	r3, [r3, #0]
 80062f6:	f042 0201 	orr.w	r2, r2, #1
 80062fa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80062fc:	6878      	ldr	r0, [r7, #4]
 80062fe:	f000 fba3 	bl	8006a48 <UART_CheckIdleState>
 8006302:	4603      	mov	r3, r0
}
 8006304:	4618      	mov	r0, r3
 8006306:	3708      	adds	r7, #8
 8006308:	46bd      	mov	sp, r7
 800630a:	bd80      	pop	{r7, pc}

0800630c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800630c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006310:	b08c      	sub	sp, #48	; 0x30
 8006312:	af00      	add	r7, sp, #0
 8006314:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006316:	2300      	movs	r3, #0
 8006318:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	689a      	ldr	r2, [r3, #8]
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	691b      	ldr	r3, [r3, #16]
 8006324:	431a      	orrs	r2, r3
 8006326:	697b      	ldr	r3, [r7, #20]
 8006328:	695b      	ldr	r3, [r3, #20]
 800632a:	431a      	orrs	r2, r3
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	69db      	ldr	r3, [r3, #28]
 8006330:	4313      	orrs	r3, r2
 8006332:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	4baa      	ldr	r3, [pc, #680]	; (80065e4 <UART_SetConfig+0x2d8>)
 800633c:	4013      	ands	r3, r2
 800633e:	697a      	ldr	r2, [r7, #20]
 8006340:	6812      	ldr	r2, [r2, #0]
 8006342:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006344:	430b      	orrs	r3, r1
 8006346:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006348:	697b      	ldr	r3, [r7, #20]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	685b      	ldr	r3, [r3, #4]
 800634e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006352:	697b      	ldr	r3, [r7, #20]
 8006354:	68da      	ldr	r2, [r3, #12]
 8006356:	697b      	ldr	r3, [r7, #20]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	430a      	orrs	r2, r1
 800635c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800635e:	697b      	ldr	r3, [r7, #20]
 8006360:	699b      	ldr	r3, [r3, #24]
 8006362:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	4a9f      	ldr	r2, [pc, #636]	; (80065e8 <UART_SetConfig+0x2dc>)
 800636a:	4293      	cmp	r3, r2
 800636c:	d004      	beq.n	8006378 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800636e:	697b      	ldr	r3, [r7, #20]
 8006370:	6a1b      	ldr	r3, [r3, #32]
 8006372:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006374:	4313      	orrs	r3, r2
 8006376:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	689b      	ldr	r3, [r3, #8]
 800637e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006382:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8006386:	697a      	ldr	r2, [r7, #20]
 8006388:	6812      	ldr	r2, [r2, #0]
 800638a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800638c:	430b      	orrs	r3, r1
 800638e:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006396:	f023 010f 	bic.w	r1, r3, #15
 800639a:	697b      	ldr	r3, [r7, #20]
 800639c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800639e:	697b      	ldr	r3, [r7, #20]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	430a      	orrs	r2, r1
 80063a4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063a6:	697b      	ldr	r3, [r7, #20]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	4a90      	ldr	r2, [pc, #576]	; (80065ec <UART_SetConfig+0x2e0>)
 80063ac:	4293      	cmp	r3, r2
 80063ae:	d125      	bne.n	80063fc <UART_SetConfig+0xf0>
 80063b0:	4b8f      	ldr	r3, [pc, #572]	; (80065f0 <UART_SetConfig+0x2e4>)
 80063b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80063b6:	f003 0303 	and.w	r3, r3, #3
 80063ba:	2b03      	cmp	r3, #3
 80063bc:	d81a      	bhi.n	80063f4 <UART_SetConfig+0xe8>
 80063be:	a201      	add	r2, pc, #4	; (adr r2, 80063c4 <UART_SetConfig+0xb8>)
 80063c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80063c4:	080063d5 	.word	0x080063d5
 80063c8:	080063e5 	.word	0x080063e5
 80063cc:	080063dd 	.word	0x080063dd
 80063d0:	080063ed 	.word	0x080063ed
 80063d4:	2301      	movs	r3, #1
 80063d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063da:	e116      	b.n	800660a <UART_SetConfig+0x2fe>
 80063dc:	2302      	movs	r3, #2
 80063de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063e2:	e112      	b.n	800660a <UART_SetConfig+0x2fe>
 80063e4:	2304      	movs	r3, #4
 80063e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063ea:	e10e      	b.n	800660a <UART_SetConfig+0x2fe>
 80063ec:	2308      	movs	r3, #8
 80063ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063f2:	e10a      	b.n	800660a <UART_SetConfig+0x2fe>
 80063f4:	2310      	movs	r3, #16
 80063f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80063fa:	e106      	b.n	800660a <UART_SetConfig+0x2fe>
 80063fc:	697b      	ldr	r3, [r7, #20]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	4a7c      	ldr	r2, [pc, #496]	; (80065f4 <UART_SetConfig+0x2e8>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d138      	bne.n	8006478 <UART_SetConfig+0x16c>
 8006406:	4b7a      	ldr	r3, [pc, #488]	; (80065f0 <UART_SetConfig+0x2e4>)
 8006408:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800640c:	f003 030c 	and.w	r3, r3, #12
 8006410:	2b0c      	cmp	r3, #12
 8006412:	d82d      	bhi.n	8006470 <UART_SetConfig+0x164>
 8006414:	a201      	add	r2, pc, #4	; (adr r2, 800641c <UART_SetConfig+0x110>)
 8006416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641a:	bf00      	nop
 800641c:	08006451 	.word	0x08006451
 8006420:	08006471 	.word	0x08006471
 8006424:	08006471 	.word	0x08006471
 8006428:	08006471 	.word	0x08006471
 800642c:	08006461 	.word	0x08006461
 8006430:	08006471 	.word	0x08006471
 8006434:	08006471 	.word	0x08006471
 8006438:	08006471 	.word	0x08006471
 800643c:	08006459 	.word	0x08006459
 8006440:	08006471 	.word	0x08006471
 8006444:	08006471 	.word	0x08006471
 8006448:	08006471 	.word	0x08006471
 800644c:	08006469 	.word	0x08006469
 8006450:	2300      	movs	r3, #0
 8006452:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006456:	e0d8      	b.n	800660a <UART_SetConfig+0x2fe>
 8006458:	2302      	movs	r3, #2
 800645a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800645e:	e0d4      	b.n	800660a <UART_SetConfig+0x2fe>
 8006460:	2304      	movs	r3, #4
 8006462:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006466:	e0d0      	b.n	800660a <UART_SetConfig+0x2fe>
 8006468:	2308      	movs	r3, #8
 800646a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800646e:	e0cc      	b.n	800660a <UART_SetConfig+0x2fe>
 8006470:	2310      	movs	r3, #16
 8006472:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006476:	e0c8      	b.n	800660a <UART_SetConfig+0x2fe>
 8006478:	697b      	ldr	r3, [r7, #20]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	4a5e      	ldr	r2, [pc, #376]	; (80065f8 <UART_SetConfig+0x2ec>)
 800647e:	4293      	cmp	r3, r2
 8006480:	d125      	bne.n	80064ce <UART_SetConfig+0x1c2>
 8006482:	4b5b      	ldr	r3, [pc, #364]	; (80065f0 <UART_SetConfig+0x2e4>)
 8006484:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006488:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800648c:	2b30      	cmp	r3, #48	; 0x30
 800648e:	d016      	beq.n	80064be <UART_SetConfig+0x1b2>
 8006490:	2b30      	cmp	r3, #48	; 0x30
 8006492:	d818      	bhi.n	80064c6 <UART_SetConfig+0x1ba>
 8006494:	2b20      	cmp	r3, #32
 8006496:	d00a      	beq.n	80064ae <UART_SetConfig+0x1a2>
 8006498:	2b20      	cmp	r3, #32
 800649a:	d814      	bhi.n	80064c6 <UART_SetConfig+0x1ba>
 800649c:	2b00      	cmp	r3, #0
 800649e:	d002      	beq.n	80064a6 <UART_SetConfig+0x19a>
 80064a0:	2b10      	cmp	r3, #16
 80064a2:	d008      	beq.n	80064b6 <UART_SetConfig+0x1aa>
 80064a4:	e00f      	b.n	80064c6 <UART_SetConfig+0x1ba>
 80064a6:	2300      	movs	r3, #0
 80064a8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064ac:	e0ad      	b.n	800660a <UART_SetConfig+0x2fe>
 80064ae:	2302      	movs	r3, #2
 80064b0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064b4:	e0a9      	b.n	800660a <UART_SetConfig+0x2fe>
 80064b6:	2304      	movs	r3, #4
 80064b8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064bc:	e0a5      	b.n	800660a <UART_SetConfig+0x2fe>
 80064be:	2308      	movs	r3, #8
 80064c0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064c4:	e0a1      	b.n	800660a <UART_SetConfig+0x2fe>
 80064c6:	2310      	movs	r3, #16
 80064c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80064cc:	e09d      	b.n	800660a <UART_SetConfig+0x2fe>
 80064ce:	697b      	ldr	r3, [r7, #20]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a4a      	ldr	r2, [pc, #296]	; (80065fc <UART_SetConfig+0x2f0>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d125      	bne.n	8006524 <UART_SetConfig+0x218>
 80064d8:	4b45      	ldr	r3, [pc, #276]	; (80065f0 <UART_SetConfig+0x2e4>)
 80064da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80064de:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80064e2:	2bc0      	cmp	r3, #192	; 0xc0
 80064e4:	d016      	beq.n	8006514 <UART_SetConfig+0x208>
 80064e6:	2bc0      	cmp	r3, #192	; 0xc0
 80064e8:	d818      	bhi.n	800651c <UART_SetConfig+0x210>
 80064ea:	2b80      	cmp	r3, #128	; 0x80
 80064ec:	d00a      	beq.n	8006504 <UART_SetConfig+0x1f8>
 80064ee:	2b80      	cmp	r3, #128	; 0x80
 80064f0:	d814      	bhi.n	800651c <UART_SetConfig+0x210>
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d002      	beq.n	80064fc <UART_SetConfig+0x1f0>
 80064f6:	2b40      	cmp	r3, #64	; 0x40
 80064f8:	d008      	beq.n	800650c <UART_SetConfig+0x200>
 80064fa:	e00f      	b.n	800651c <UART_SetConfig+0x210>
 80064fc:	2300      	movs	r3, #0
 80064fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006502:	e082      	b.n	800660a <UART_SetConfig+0x2fe>
 8006504:	2302      	movs	r3, #2
 8006506:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800650a:	e07e      	b.n	800660a <UART_SetConfig+0x2fe>
 800650c:	2304      	movs	r3, #4
 800650e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006512:	e07a      	b.n	800660a <UART_SetConfig+0x2fe>
 8006514:	2308      	movs	r3, #8
 8006516:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800651a:	e076      	b.n	800660a <UART_SetConfig+0x2fe>
 800651c:	2310      	movs	r3, #16
 800651e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006522:	e072      	b.n	800660a <UART_SetConfig+0x2fe>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a35      	ldr	r2, [pc, #212]	; (8006600 <UART_SetConfig+0x2f4>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d12a      	bne.n	8006584 <UART_SetConfig+0x278>
 800652e:	4b30      	ldr	r3, [pc, #192]	; (80065f0 <UART_SetConfig+0x2e4>)
 8006530:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006534:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006538:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800653c:	d01a      	beq.n	8006574 <UART_SetConfig+0x268>
 800653e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006542:	d81b      	bhi.n	800657c <UART_SetConfig+0x270>
 8006544:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006548:	d00c      	beq.n	8006564 <UART_SetConfig+0x258>
 800654a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800654e:	d815      	bhi.n	800657c <UART_SetConfig+0x270>
 8006550:	2b00      	cmp	r3, #0
 8006552:	d003      	beq.n	800655c <UART_SetConfig+0x250>
 8006554:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006558:	d008      	beq.n	800656c <UART_SetConfig+0x260>
 800655a:	e00f      	b.n	800657c <UART_SetConfig+0x270>
 800655c:	2300      	movs	r3, #0
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006562:	e052      	b.n	800660a <UART_SetConfig+0x2fe>
 8006564:	2302      	movs	r3, #2
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800656a:	e04e      	b.n	800660a <UART_SetConfig+0x2fe>
 800656c:	2304      	movs	r3, #4
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006572:	e04a      	b.n	800660a <UART_SetConfig+0x2fe>
 8006574:	2308      	movs	r3, #8
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800657a:	e046      	b.n	800660a <UART_SetConfig+0x2fe>
 800657c:	2310      	movs	r3, #16
 800657e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006582:	e042      	b.n	800660a <UART_SetConfig+0x2fe>
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	4a17      	ldr	r2, [pc, #92]	; (80065e8 <UART_SetConfig+0x2dc>)
 800658a:	4293      	cmp	r3, r2
 800658c:	d13a      	bne.n	8006604 <UART_SetConfig+0x2f8>
 800658e:	4b18      	ldr	r3, [pc, #96]	; (80065f0 <UART_SetConfig+0x2e4>)
 8006590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006594:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006598:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800659c:	d01a      	beq.n	80065d4 <UART_SetConfig+0x2c8>
 800659e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80065a2:	d81b      	bhi.n	80065dc <UART_SetConfig+0x2d0>
 80065a4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065a8:	d00c      	beq.n	80065c4 <UART_SetConfig+0x2b8>
 80065aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80065ae:	d815      	bhi.n	80065dc <UART_SetConfig+0x2d0>
 80065b0:	2b00      	cmp	r3, #0
 80065b2:	d003      	beq.n	80065bc <UART_SetConfig+0x2b0>
 80065b4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80065b8:	d008      	beq.n	80065cc <UART_SetConfig+0x2c0>
 80065ba:	e00f      	b.n	80065dc <UART_SetConfig+0x2d0>
 80065bc:	2300      	movs	r3, #0
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c2:	e022      	b.n	800660a <UART_SetConfig+0x2fe>
 80065c4:	2302      	movs	r3, #2
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ca:	e01e      	b.n	800660a <UART_SetConfig+0x2fe>
 80065cc:	2304      	movs	r3, #4
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d2:	e01a      	b.n	800660a <UART_SetConfig+0x2fe>
 80065d4:	2308      	movs	r3, #8
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065da:	e016      	b.n	800660a <UART_SetConfig+0x2fe>
 80065dc:	2310      	movs	r3, #16
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065e2:	e012      	b.n	800660a <UART_SetConfig+0x2fe>
 80065e4:	cfff69f3 	.word	0xcfff69f3
 80065e8:	40008000 	.word	0x40008000
 80065ec:	40013800 	.word	0x40013800
 80065f0:	40021000 	.word	0x40021000
 80065f4:	40004400 	.word	0x40004400
 80065f8:	40004800 	.word	0x40004800
 80065fc:	40004c00 	.word	0x40004c00
 8006600:	40005000 	.word	0x40005000
 8006604:	2310      	movs	r3, #16
 8006606:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800660a:	697b      	ldr	r3, [r7, #20]
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	4aae      	ldr	r2, [pc, #696]	; (80068c8 <UART_SetConfig+0x5bc>)
 8006610:	4293      	cmp	r3, r2
 8006612:	f040 8097 	bne.w	8006744 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006616:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800661a:	2b08      	cmp	r3, #8
 800661c:	d823      	bhi.n	8006666 <UART_SetConfig+0x35a>
 800661e:	a201      	add	r2, pc, #4	; (adr r2, 8006624 <UART_SetConfig+0x318>)
 8006620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006624:	08006649 	.word	0x08006649
 8006628:	08006667 	.word	0x08006667
 800662c:	08006651 	.word	0x08006651
 8006630:	08006667 	.word	0x08006667
 8006634:	08006657 	.word	0x08006657
 8006638:	08006667 	.word	0x08006667
 800663c:	08006667 	.word	0x08006667
 8006640:	08006667 	.word	0x08006667
 8006644:	0800665f 	.word	0x0800665f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006648:	f7fd ffec 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 800664c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800664e:	e010      	b.n	8006672 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006650:	4b9e      	ldr	r3, [pc, #632]	; (80068cc <UART_SetConfig+0x5c0>)
 8006652:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006654:	e00d      	b.n	8006672 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006656:	f7fd ff77 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 800665a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800665c:	e009      	b.n	8006672 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800665e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006662:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006664:	e005      	b.n	8006672 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8006666:	2300      	movs	r3, #0
 8006668:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800666a:	2301      	movs	r3, #1
 800666c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006670:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006672:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006674:	2b00      	cmp	r3, #0
 8006676:	f000 8130 	beq.w	80068da <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800667a:	697b      	ldr	r3, [r7, #20]
 800667c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800667e:	4a94      	ldr	r2, [pc, #592]	; (80068d0 <UART_SetConfig+0x5c4>)
 8006680:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006684:	461a      	mov	r2, r3
 8006686:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006688:	fbb3 f3f2 	udiv	r3, r3, r2
 800668c:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800668e:	697b      	ldr	r3, [r7, #20]
 8006690:	685a      	ldr	r2, [r3, #4]
 8006692:	4613      	mov	r3, r2
 8006694:	005b      	lsls	r3, r3, #1
 8006696:	4413      	add	r3, r2
 8006698:	69ba      	ldr	r2, [r7, #24]
 800669a:	429a      	cmp	r2, r3
 800669c:	d305      	bcc.n	80066aa <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	685b      	ldr	r3, [r3, #4]
 80066a2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80066a4:	69ba      	ldr	r2, [r7, #24]
 80066a6:	429a      	cmp	r2, r3
 80066a8:	d903      	bls.n	80066b2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80066b0:	e113      	b.n	80068da <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066b4:	2200      	movs	r2, #0
 80066b6:	60bb      	str	r3, [r7, #8]
 80066b8:	60fa      	str	r2, [r7, #12]
 80066ba:	697b      	ldr	r3, [r7, #20]
 80066bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80066be:	4a84      	ldr	r2, [pc, #528]	; (80068d0 <UART_SetConfig+0x5c4>)
 80066c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	2200      	movs	r2, #0
 80066c8:	603b      	str	r3, [r7, #0]
 80066ca:	607a      	str	r2, [r7, #4]
 80066cc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066d4:	f7f9 fda0 	bl	8000218 <__aeabi_uldivmod>
 80066d8:	4602      	mov	r2, r0
 80066da:	460b      	mov	r3, r1
 80066dc:	4610      	mov	r0, r2
 80066de:	4619      	mov	r1, r3
 80066e0:	f04f 0200 	mov.w	r2, #0
 80066e4:	f04f 0300 	mov.w	r3, #0
 80066e8:	020b      	lsls	r3, r1, #8
 80066ea:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066ee:	0202      	lsls	r2, r0, #8
 80066f0:	6979      	ldr	r1, [r7, #20]
 80066f2:	6849      	ldr	r1, [r1, #4]
 80066f4:	0849      	lsrs	r1, r1, #1
 80066f6:	2000      	movs	r0, #0
 80066f8:	460c      	mov	r4, r1
 80066fa:	4605      	mov	r5, r0
 80066fc:	eb12 0804 	adds.w	r8, r2, r4
 8006700:	eb43 0905 	adc.w	r9, r3, r5
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	685b      	ldr	r3, [r3, #4]
 8006708:	2200      	movs	r2, #0
 800670a:	469a      	mov	sl, r3
 800670c:	4693      	mov	fp, r2
 800670e:	4652      	mov	r2, sl
 8006710:	465b      	mov	r3, fp
 8006712:	4640      	mov	r0, r8
 8006714:	4649      	mov	r1, r9
 8006716:	f7f9 fd7f 	bl	8000218 <__aeabi_uldivmod>
 800671a:	4602      	mov	r2, r0
 800671c:	460b      	mov	r3, r1
 800671e:	4613      	mov	r3, r2
 8006720:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006722:	6a3b      	ldr	r3, [r7, #32]
 8006724:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006728:	d308      	bcc.n	800673c <UART_SetConfig+0x430>
 800672a:	6a3b      	ldr	r3, [r7, #32]
 800672c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006730:	d204      	bcs.n	800673c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	6a3a      	ldr	r2, [r7, #32]
 8006738:	60da      	str	r2, [r3, #12]
 800673a:	e0ce      	b.n	80068da <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800673c:	2301      	movs	r3, #1
 800673e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006742:	e0ca      	b.n	80068da <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006744:	697b      	ldr	r3, [r7, #20]
 8006746:	69db      	ldr	r3, [r3, #28]
 8006748:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800674c:	d166      	bne.n	800681c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800674e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006752:	2b08      	cmp	r3, #8
 8006754:	d827      	bhi.n	80067a6 <UART_SetConfig+0x49a>
 8006756:	a201      	add	r2, pc, #4	; (adr r2, 800675c <UART_SetConfig+0x450>)
 8006758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800675c:	08006781 	.word	0x08006781
 8006760:	08006789 	.word	0x08006789
 8006764:	08006791 	.word	0x08006791
 8006768:	080067a7 	.word	0x080067a7
 800676c:	08006797 	.word	0x08006797
 8006770:	080067a7 	.word	0x080067a7
 8006774:	080067a7 	.word	0x080067a7
 8006778:	080067a7 	.word	0x080067a7
 800677c:	0800679f 	.word	0x0800679f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006780:	f7fd ff50 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8006784:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006786:	e014      	b.n	80067b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006788:	f7fd ff62 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 800678c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800678e:	e010      	b.n	80067b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006790:	4b4e      	ldr	r3, [pc, #312]	; (80068cc <UART_SetConfig+0x5c0>)
 8006792:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006794:	e00d      	b.n	80067b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006796:	f7fd fed7 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 800679a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800679c:	e009      	b.n	80067b2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067a2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80067a4:	e005      	b.n	80067b2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80067a6:	2300      	movs	r3, #0
 80067a8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80067aa:	2301      	movs	r3, #1
 80067ac:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80067b0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	f000 8090 	beq.w	80068da <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067ba:	697b      	ldr	r3, [r7, #20]
 80067bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067be:	4a44      	ldr	r2, [pc, #272]	; (80068d0 <UART_SetConfig+0x5c4>)
 80067c0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c4:	461a      	mov	r2, r3
 80067c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80067c8:	fbb3 f3f2 	udiv	r3, r3, r2
 80067cc:	005a      	lsls	r2, r3, #1
 80067ce:	697b      	ldr	r3, [r7, #20]
 80067d0:	685b      	ldr	r3, [r3, #4]
 80067d2:	085b      	lsrs	r3, r3, #1
 80067d4:	441a      	add	r2, r3
 80067d6:	697b      	ldr	r3, [r7, #20]
 80067d8:	685b      	ldr	r3, [r3, #4]
 80067da:	fbb2 f3f3 	udiv	r3, r2, r3
 80067de:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	2b0f      	cmp	r3, #15
 80067e4:	d916      	bls.n	8006814 <UART_SetConfig+0x508>
 80067e6:	6a3b      	ldr	r3, [r7, #32]
 80067e8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067ec:	d212      	bcs.n	8006814 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ee:	6a3b      	ldr	r3, [r7, #32]
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	f023 030f 	bic.w	r3, r3, #15
 80067f6:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f8:	6a3b      	ldr	r3, [r7, #32]
 80067fa:	085b      	lsrs	r3, r3, #1
 80067fc:	b29b      	uxth	r3, r3
 80067fe:	f003 0307 	and.w	r3, r3, #7
 8006802:	b29a      	uxth	r2, r3
 8006804:	8bfb      	ldrh	r3, [r7, #30]
 8006806:	4313      	orrs	r3, r2
 8006808:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800680a:	697b      	ldr	r3, [r7, #20]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	8bfa      	ldrh	r2, [r7, #30]
 8006810:	60da      	str	r2, [r3, #12]
 8006812:	e062      	b.n	80068da <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8006814:	2301      	movs	r3, #1
 8006816:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800681a:	e05e      	b.n	80068da <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800681c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006820:	2b08      	cmp	r3, #8
 8006822:	d828      	bhi.n	8006876 <UART_SetConfig+0x56a>
 8006824:	a201      	add	r2, pc, #4	; (adr r2, 800682c <UART_SetConfig+0x520>)
 8006826:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800682a:	bf00      	nop
 800682c:	08006851 	.word	0x08006851
 8006830:	08006859 	.word	0x08006859
 8006834:	08006861 	.word	0x08006861
 8006838:	08006877 	.word	0x08006877
 800683c:	08006867 	.word	0x08006867
 8006840:	08006877 	.word	0x08006877
 8006844:	08006877 	.word	0x08006877
 8006848:	08006877 	.word	0x08006877
 800684c:	0800686f 	.word	0x0800686f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006850:	f7fd fee8 	bl	8004624 <HAL_RCC_GetPCLK1Freq>
 8006854:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006856:	e014      	b.n	8006882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006858:	f7fd fefa 	bl	8004650 <HAL_RCC_GetPCLK2Freq>
 800685c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800685e:	e010      	b.n	8006882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006860:	4b1a      	ldr	r3, [pc, #104]	; (80068cc <UART_SetConfig+0x5c0>)
 8006862:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006864:	e00d      	b.n	8006882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006866:	f7fd fe6f 	bl	8004548 <HAL_RCC_GetSysClockFreq>
 800686a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800686c:	e009      	b.n	8006882 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006872:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006874:	e005      	b.n	8006882 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006876:	2300      	movs	r3, #0
 8006878:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800687a:	2301      	movs	r3, #1
 800687c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006880:	bf00      	nop
    }

    if (pclk != 0U)
 8006882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006884:	2b00      	cmp	r3, #0
 8006886:	d028      	beq.n	80068da <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006888:	697b      	ldr	r3, [r7, #20]
 800688a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800688c:	4a10      	ldr	r2, [pc, #64]	; (80068d0 <UART_SetConfig+0x5c4>)
 800688e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006892:	461a      	mov	r2, r3
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	fbb3 f2f2 	udiv	r2, r3, r2
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	085b      	lsrs	r3, r3, #1
 80068a0:	441a      	add	r2, r3
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	685b      	ldr	r3, [r3, #4]
 80068a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80068aa:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068ac:	6a3b      	ldr	r3, [r7, #32]
 80068ae:	2b0f      	cmp	r3, #15
 80068b0:	d910      	bls.n	80068d4 <UART_SetConfig+0x5c8>
 80068b2:	6a3b      	ldr	r3, [r7, #32]
 80068b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80068b8:	d20c      	bcs.n	80068d4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068ba:	6a3b      	ldr	r3, [r7, #32]
 80068bc:	b29a      	uxth	r2, r3
 80068be:	697b      	ldr	r3, [r7, #20]
 80068c0:	681b      	ldr	r3, [r3, #0]
 80068c2:	60da      	str	r2, [r3, #12]
 80068c4:	e009      	b.n	80068da <UART_SetConfig+0x5ce>
 80068c6:	bf00      	nop
 80068c8:	40008000 	.word	0x40008000
 80068cc:	00f42400 	.word	0x00f42400
 80068d0:	08006fd0 	.word	0x08006fd0
      }
      else
      {
        ret = HAL_ERROR;
 80068d4:	2301      	movs	r3, #1
 80068d6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068da:	697b      	ldr	r3, [r7, #20]
 80068dc:	2201      	movs	r2, #1
 80068de:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80068e2:	697b      	ldr	r3, [r7, #20]
 80068e4:	2201      	movs	r2, #1
 80068e6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068ea:	697b      	ldr	r3, [r7, #20]
 80068ec:	2200      	movs	r2, #0
 80068ee:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 80068f0:	697b      	ldr	r3, [r7, #20]
 80068f2:	2200      	movs	r2, #0
 80068f4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 80068f6:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 80068fa:	4618      	mov	r0, r3
 80068fc:	3730      	adds	r7, #48	; 0x30
 80068fe:	46bd      	mov	sp, r7
 8006900:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006904 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006904:	b480      	push	{r7}
 8006906:	b083      	sub	sp, #12
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006910:	f003 0308 	and.w	r3, r3, #8
 8006914:	2b00      	cmp	r3, #0
 8006916:	d00a      	beq.n	800692e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	685b      	ldr	r3, [r3, #4]
 800691e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	430a      	orrs	r2, r1
 800692c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006932:	f003 0301 	and.w	r3, r3, #1
 8006936:	2b00      	cmp	r3, #0
 8006938:	d00a      	beq.n	8006950 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	685b      	ldr	r3, [r3, #4]
 8006940:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	681b      	ldr	r3, [r3, #0]
 800694c:	430a      	orrs	r2, r1
 800694e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006954:	f003 0302 	and.w	r3, r3, #2
 8006958:	2b00      	cmp	r3, #0
 800695a:	d00a      	beq.n	8006972 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006976:	f003 0304 	and.w	r3, r3, #4
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006998:	f003 0310 	and.w	r3, r3, #16
 800699c:	2b00      	cmp	r3, #0
 800699e:	d00a      	beq.n	80069b6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	689b      	ldr	r3, [r3, #8]
 80069a6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	681b      	ldr	r3, [r3, #0]
 80069b2:	430a      	orrs	r2, r1
 80069b4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069ba:	f003 0320 	and.w	r3, r3, #32
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d00a      	beq.n	80069d8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	681b      	ldr	r3, [r3, #0]
 80069c6:	689b      	ldr	r3, [r3, #8]
 80069c8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	430a      	orrs	r2, r1
 80069d6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80069dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d01a      	beq.n	8006a1a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	685b      	ldr	r3, [r3, #4]
 80069ea:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	430a      	orrs	r2, r1
 80069f8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80069fe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006a02:	d10a      	bne.n	8006a1a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	430a      	orrs	r2, r1
 8006a18:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d00a      	beq.n	8006a3c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	430a      	orrs	r2, r1
 8006a3a:	605a      	str	r2, [r3, #4]
  }
}
 8006a3c:	bf00      	nop
 8006a3e:	370c      	adds	r7, #12
 8006a40:	46bd      	mov	sp, r7
 8006a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a46:	4770      	bx	lr

08006a48 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a48:	b580      	push	{r7, lr}
 8006a4a:	b098      	sub	sp, #96	; 0x60
 8006a4c:	af02      	add	r7, sp, #8
 8006a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	2200      	movs	r2, #0
 8006a54:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a58:	f7fa fbf2 	bl	8001240 <HAL_GetTick>
 8006a5c:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	f003 0308 	and.w	r3, r3, #8
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d12f      	bne.n	8006acc <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a6c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006a70:	9300      	str	r3, [sp, #0]
 8006a72:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006a74:	2200      	movs	r2, #0
 8006a76:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006a7a:	6878      	ldr	r0, [r7, #4]
 8006a7c:	f000 f88e 	bl	8006b9c <UART_WaitOnFlagUntilTimeout>
 8006a80:	4603      	mov	r3, r0
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d022      	beq.n	8006acc <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a8e:	e853 3f00 	ldrex	r3, [r3]
 8006a92:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006a94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a96:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a9a:	653b      	str	r3, [r7, #80]	; 0x50
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	461a      	mov	r2, r3
 8006aa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006aa4:	647b      	str	r3, [r7, #68]	; 0x44
 8006aa6:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa8:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006aaa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006aac:	e841 2300 	strex	r3, r2, [r1]
 8006ab0:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ab2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d1e6      	bne.n	8006a86 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2220      	movs	r2, #32
 8006abc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac8:	2303      	movs	r3, #3
 8006aca:	e063      	b.n	8006b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f003 0304 	and.w	r3, r3, #4
 8006ad6:	2b04      	cmp	r3, #4
 8006ad8:	d149      	bne.n	8006b6e <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ada:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006ade:	9300      	str	r3, [sp, #0]
 8006ae0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006ae8:	6878      	ldr	r0, [r7, #4]
 8006aea:	f000 f857 	bl	8006b9c <UART_WaitOnFlagUntilTimeout>
 8006aee:	4603      	mov	r3, r0
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d03c      	beq.n	8006b6e <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006afa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006afc:	e853 3f00 	ldrex	r3, [r3]
 8006b00:	623b      	str	r3, [r7, #32]
   return(result);
 8006b02:	6a3b      	ldr	r3, [r7, #32]
 8006b04:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b08:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	461a      	mov	r2, r3
 8006b10:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b12:	633b      	str	r3, [r7, #48]	; 0x30
 8006b14:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b16:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b18:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b1a:	e841 2300 	strex	r3, r2, [r1]
 8006b1e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d1e6      	bne.n	8006af4 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	3308      	adds	r3, #8
 8006b2c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b2e:	693b      	ldr	r3, [r7, #16]
 8006b30:	e853 3f00 	ldrex	r3, [r3]
 8006b34:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	f023 0301 	bic.w	r3, r3, #1
 8006b3c:	64bb      	str	r3, [r7, #72]	; 0x48
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	3308      	adds	r3, #8
 8006b44:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006b46:	61fa      	str	r2, [r7, #28]
 8006b48:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b4a:	69b9      	ldr	r1, [r7, #24]
 8006b4c:	69fa      	ldr	r2, [r7, #28]
 8006b4e:	e841 2300 	strex	r3, r2, [r1]
 8006b52:	617b      	str	r3, [r7, #20]
   return(result);
 8006b54:	697b      	ldr	r3, [r7, #20]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1e5      	bne.n	8006b26 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2220      	movs	r2, #32
 8006b5e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2200      	movs	r2, #0
 8006b66:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b6a:	2303      	movs	r3, #3
 8006b6c:	e012      	b.n	8006b94 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2220      	movs	r2, #32
 8006b7a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	2200      	movs	r2, #0
 8006b82:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	2200      	movs	r2, #0
 8006b88:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006b92:	2300      	movs	r3, #0
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3758      	adds	r7, #88	; 0x58
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}

08006b9c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b084      	sub	sp, #16
 8006ba0:	af00      	add	r7, sp, #0
 8006ba2:	60f8      	str	r0, [r7, #12]
 8006ba4:	60b9      	str	r1, [r7, #8]
 8006ba6:	603b      	str	r3, [r7, #0]
 8006ba8:	4613      	mov	r3, r2
 8006baa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bac:	e04f      	b.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bb4:	d04b      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bb6:	f7fa fb43 	bl	8001240 <HAL_GetTick>
 8006bba:	4602      	mov	r2, r0
 8006bbc:	683b      	ldr	r3, [r7, #0]
 8006bbe:	1ad3      	subs	r3, r2, r3
 8006bc0:	69ba      	ldr	r2, [r7, #24]
 8006bc2:	429a      	cmp	r2, r3
 8006bc4:	d302      	bcc.n	8006bcc <UART_WaitOnFlagUntilTimeout+0x30>
 8006bc6:	69bb      	ldr	r3, [r7, #24]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d101      	bne.n	8006bd0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bcc:	2303      	movs	r3, #3
 8006bce:	e04e      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	f003 0304 	and.w	r3, r3, #4
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d037      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bde:	68bb      	ldr	r3, [r7, #8]
 8006be0:	2b80      	cmp	r3, #128	; 0x80
 8006be2:	d034      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
 8006be4:	68bb      	ldr	r3, [r7, #8]
 8006be6:	2b40      	cmp	r3, #64	; 0x40
 8006be8:	d031      	beq.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006bea:	68fb      	ldr	r3, [r7, #12]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	69db      	ldr	r3, [r3, #28]
 8006bf0:	f003 0308 	and.w	r3, r3, #8
 8006bf4:	2b08      	cmp	r3, #8
 8006bf6:	d110      	bne.n	8006c1a <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf8:	68fb      	ldr	r3, [r7, #12]
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c00:	68f8      	ldr	r0, [r7, #12]
 8006c02:	f000 f838 	bl	8006c76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2208      	movs	r2, #8
 8006c0a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	2200      	movs	r2, #0
 8006c12:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_ERROR;
 8006c16:	2301      	movs	r3, #1
 8006c18:	e029      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	69db      	ldr	r3, [r3, #28]
 8006c20:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006c24:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c28:	d111      	bne.n	8006c4e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c2a:	68fb      	ldr	r3, [r7, #12]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006c32:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f81e 	bl	8006c76 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2220      	movs	r2, #32
 8006c3e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8006c4a:	2303      	movs	r3, #3
 8006c4c:	e00f      	b.n	8006c6e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	69da      	ldr	r2, [r3, #28]
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	4013      	ands	r3, r2
 8006c58:	68ba      	ldr	r2, [r7, #8]
 8006c5a:	429a      	cmp	r2, r3
 8006c5c:	bf0c      	ite	eq
 8006c5e:	2301      	moveq	r3, #1
 8006c60:	2300      	movne	r3, #0
 8006c62:	b2db      	uxtb	r3, r3
 8006c64:	461a      	mov	r2, r3
 8006c66:	79fb      	ldrb	r3, [r7, #7]
 8006c68:	429a      	cmp	r2, r3
 8006c6a:	d0a0      	beq.n	8006bae <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c6c:	2300      	movs	r3, #0
}
 8006c6e:	4618      	mov	r0, r3
 8006c70:	3710      	adds	r7, #16
 8006c72:	46bd      	mov	sp, r7
 8006c74:	bd80      	pop	{r7, pc}

08006c76 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c76:	b480      	push	{r7}
 8006c78:	b095      	sub	sp, #84	; 0x54
 8006c7a:	af00      	add	r7, sp, #0
 8006c7c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c7e:	687b      	ldr	r3, [r7, #4]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c86:	e853 3f00 	ldrex	r3, [r3]
 8006c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	681b      	ldr	r3, [r3, #0]
 8006c98:	461a      	mov	r2, r3
 8006c9a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006c9c:	643b      	str	r3, [r7, #64]	; 0x40
 8006c9e:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ca4:	e841 2300 	strex	r3, r2, [r1]
 8006ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d1e6      	bne.n	8006c7e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	3308      	adds	r3, #8
 8006cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb8:	6a3b      	ldr	r3, [r7, #32]
 8006cba:	e853 3f00 	ldrex	r3, [r3]
 8006cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cc0:	69fb      	ldr	r3, [r7, #28]
 8006cc2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006cc6:	f023 0301 	bic.w	r3, r3, #1
 8006cca:	64bb      	str	r3, [r7, #72]	; 0x48
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	3308      	adds	r3, #8
 8006cd2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006cd4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006cd6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006cda:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006cdc:	e841 2300 	strex	r3, r2, [r1]
 8006ce0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d1e3      	bne.n	8006cb0 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006cec:	2b01      	cmp	r3, #1
 8006cee:	d118      	bne.n	8006d22 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	e853 3f00 	ldrex	r3, [r3]
 8006cfc:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	f023 0310 	bic.w	r3, r3, #16
 8006d04:	647b      	str	r3, [r7, #68]	; 0x44
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	461a      	mov	r2, r3
 8006d0c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8006d0e:	61bb      	str	r3, [r7, #24]
 8006d10:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d12:	6979      	ldr	r1, [r7, #20]
 8006d14:	69ba      	ldr	r2, [r7, #24]
 8006d16:	e841 2300 	strex	r3, r2, [r1]
 8006d1a:	613b      	str	r3, [r7, #16]
   return(result);
 8006d1c:	693b      	ldr	r3, [r7, #16]
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	d1e6      	bne.n	8006cf0 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2220      	movs	r2, #32
 8006d26:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2200      	movs	r2, #0
 8006d34:	675a      	str	r2, [r3, #116]	; 0x74
}
 8006d36:	bf00      	nop
 8006d38:	3754      	adds	r7, #84	; 0x54
 8006d3a:	46bd      	mov	sp, r7
 8006d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d40:	4770      	bx	lr

08006d42 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d42:	b480      	push	{r7}
 8006d44:	b085      	sub	sp, #20
 8006d46:	af00      	add	r7, sp, #0
 8006d48:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006d50:	2b01      	cmp	r3, #1
 8006d52:	d101      	bne.n	8006d58 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d54:	2302      	movs	r3, #2
 8006d56:	e027      	b.n	8006da8 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2201      	movs	r2, #1
 8006d5c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	2224      	movs	r2, #36	; 0x24
 8006d64:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	681a      	ldr	r2, [r3, #0]
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	f022 0201 	bic.w	r2, r2, #1
 8006d7e:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8006d86:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68fa      	ldr	r2, [r7, #12]
 8006d94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2220      	movs	r2, #32
 8006d9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006da6:	2300      	movs	r3, #0
}
 8006da8:	4618      	mov	r0, r3
 8006daa:	3714      	adds	r7, #20
 8006dac:	46bd      	mov	sp, r7
 8006dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006db2:	4770      	bx	lr

08006db4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006db4:	b580      	push	{r7, lr}
 8006db6:	b084      	sub	sp, #16
 8006db8:	af00      	add	r7, sp, #0
 8006dba:	6078      	str	r0, [r7, #4]
 8006dbc:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006dc4:	2b01      	cmp	r3, #1
 8006dc6:	d101      	bne.n	8006dcc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dc8:	2302      	movs	r3, #2
 8006dca:	e02d      	b.n	8006e28 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2201      	movs	r2, #1
 8006dd0:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2224      	movs	r2, #36	; 0x24
 8006dd8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	681a      	ldr	r2, [r3, #0]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	689b      	ldr	r3, [r3, #8]
 8006dfa:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	683a      	ldr	r2, [r7, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e08:	6878      	ldr	r0, [r7, #4]
 8006e0a:	f000 f84f 	bl	8006eac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2220      	movs	r2, #32
 8006e1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	2200      	movs	r2, #0
 8006e22:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006e26:	2300      	movs	r3, #0
}
 8006e28:	4618      	mov	r0, r3
 8006e2a:	3710      	adds	r7, #16
 8006e2c:	46bd      	mov	sp, r7
 8006e2e:	bd80      	pop	{r7, pc}

08006e30 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e30:	b580      	push	{r7, lr}
 8006e32:	b084      	sub	sp, #16
 8006e34:	af00      	add	r7, sp, #0
 8006e36:	6078      	str	r0, [r7, #4]
 8006e38:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d101      	bne.n	8006e48 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e44:	2302      	movs	r3, #2
 8006e46:	e02d      	b.n	8006ea4 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2201      	movs	r2, #1
 8006e4c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2224      	movs	r2, #36	; 0x24
 8006e54:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	681a      	ldr	r2, [r3, #0]
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f022 0201 	bic.w	r2, r2, #1
 8006e6e:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	683a      	ldr	r2, [r7, #0]
 8006e80:	430a      	orrs	r2, r1
 8006e82:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e84:	6878      	ldr	r0, [r7, #4]
 8006e86:	f000 f811 	bl	8006eac <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	68fa      	ldr	r2, [r7, #12]
 8006e90:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8006ea2:	2300      	movs	r3, #0
}
 8006ea4:	4618      	mov	r0, r3
 8006ea6:	3710      	adds	r7, #16
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	bd80      	pop	{r7, pc}

08006eac <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006eac:	b480      	push	{r7}
 8006eae:	b085      	sub	sp, #20
 8006eb0:	af00      	add	r7, sp, #0
 8006eb2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006eb8:	2b00      	cmp	r3, #0
 8006eba:	d108      	bne.n	8006ece <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	2201      	movs	r2, #1
 8006ec8:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ecc:	e031      	b.n	8006f32 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ece:	2308      	movs	r3, #8
 8006ed0:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006ed2:	2308      	movs	r3, #8
 8006ed4:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	689b      	ldr	r3, [r3, #8]
 8006edc:	0e5b      	lsrs	r3, r3, #25
 8006ede:	b2db      	uxtb	r3, r3
 8006ee0:	f003 0307 	and.w	r3, r3, #7
 8006ee4:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	689b      	ldr	r3, [r3, #8]
 8006eec:	0f5b      	lsrs	r3, r3, #29
 8006eee:	b2db      	uxtb	r3, r3
 8006ef0:	f003 0307 	and.w	r3, r3, #7
 8006ef4:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006ef6:	7bbb      	ldrb	r3, [r7, #14]
 8006ef8:	7b3a      	ldrb	r2, [r7, #12]
 8006efa:	4911      	ldr	r1, [pc, #68]	; (8006f40 <UARTEx_SetNbDataToProcess+0x94>)
 8006efc:	5c8a      	ldrb	r2, [r1, r2]
 8006efe:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006f02:	7b3a      	ldrb	r2, [r7, #12]
 8006f04:	490f      	ldr	r1, [pc, #60]	; (8006f44 <UARTEx_SetNbDataToProcess+0x98>)
 8006f06:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f08:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f0c:	b29a      	uxth	r2, r3
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f14:	7bfb      	ldrb	r3, [r7, #15]
 8006f16:	7b7a      	ldrb	r2, [r7, #13]
 8006f18:	4909      	ldr	r1, [pc, #36]	; (8006f40 <UARTEx_SetNbDataToProcess+0x94>)
 8006f1a:	5c8a      	ldrb	r2, [r1, r2]
 8006f1c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f20:	7b7a      	ldrb	r2, [r7, #13]
 8006f22:	4908      	ldr	r1, [pc, #32]	; (8006f44 <UARTEx_SetNbDataToProcess+0x98>)
 8006f24:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f26:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f2a:	b29a      	uxth	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	08006fe8 	.word	0x08006fe8
 8006f44:	08006ff0 	.word	0x08006ff0

08006f48 <memset>:
 8006f48:	4402      	add	r2, r0
 8006f4a:	4603      	mov	r3, r0
 8006f4c:	4293      	cmp	r3, r2
 8006f4e:	d100      	bne.n	8006f52 <memset+0xa>
 8006f50:	4770      	bx	lr
 8006f52:	f803 1b01 	strb.w	r1, [r3], #1
 8006f56:	e7f9      	b.n	8006f4c <memset+0x4>

08006f58 <__libc_init_array>:
 8006f58:	b570      	push	{r4, r5, r6, lr}
 8006f5a:	4d0d      	ldr	r5, [pc, #52]	; (8006f90 <__libc_init_array+0x38>)
 8006f5c:	4c0d      	ldr	r4, [pc, #52]	; (8006f94 <__libc_init_array+0x3c>)
 8006f5e:	1b64      	subs	r4, r4, r5
 8006f60:	10a4      	asrs	r4, r4, #2
 8006f62:	2600      	movs	r6, #0
 8006f64:	42a6      	cmp	r6, r4
 8006f66:	d109      	bne.n	8006f7c <__libc_init_array+0x24>
 8006f68:	4d0b      	ldr	r5, [pc, #44]	; (8006f98 <__libc_init_array+0x40>)
 8006f6a:	4c0c      	ldr	r4, [pc, #48]	; (8006f9c <__libc_init_array+0x44>)
 8006f6c:	f000 f818 	bl	8006fa0 <_init>
 8006f70:	1b64      	subs	r4, r4, r5
 8006f72:	10a4      	asrs	r4, r4, #2
 8006f74:	2600      	movs	r6, #0
 8006f76:	42a6      	cmp	r6, r4
 8006f78:	d105      	bne.n	8006f86 <__libc_init_array+0x2e>
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}
 8006f7c:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f80:	4798      	blx	r3
 8006f82:	3601      	adds	r6, #1
 8006f84:	e7ee      	b.n	8006f64 <__libc_init_array+0xc>
 8006f86:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f8a:	4798      	blx	r3
 8006f8c:	3601      	adds	r6, #1
 8006f8e:	e7f2      	b.n	8006f76 <__libc_init_array+0x1e>
 8006f90:	08007000 	.word	0x08007000
 8006f94:	08007000 	.word	0x08007000
 8006f98:	08007000 	.word	0x08007000
 8006f9c:	08007004 	.word	0x08007004

08006fa0 <_init>:
 8006fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa2:	bf00      	nop
 8006fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fa6:	bc08      	pop	{r3}
 8006fa8:	469e      	mov	lr, r3
 8006faa:	4770      	bx	lr

08006fac <_fini>:
 8006fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fae:	bf00      	nop
 8006fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006fb2:	bc08      	pop	{r3}
 8006fb4:	469e      	mov	lr, r3
 8006fb6:	4770      	bx	lr
